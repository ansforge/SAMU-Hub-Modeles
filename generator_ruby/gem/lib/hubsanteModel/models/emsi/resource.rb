=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Emsi
  class Resource
    attr_accessor :rtype

    # Identifiant unique de la ressource  dans le système du partenaire propriétaire. Les systèmes sont garants de l'unicité et de l'invariablité des ids de véhicule dans le temps. Ils peuvent se servir des ids dans les référentiels existants si ils sont uniques et stables. Dans le cas d'un véhicule agrégé par un LRM (comme un SMUR), l'ID doit être valorisé avec son immatriculation. Dans le cas d'un véhicule agrégé par NexSIS, l'ID fournit peut ne pas correspondre à une immatriculation.
    attr_accessor :id

    # Identifiant de l'organisation à laquelle la ressource est rattachée (caserne, SAMU etc). Se référer au DSF pour la structure normée des organisations. Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*. Dans le cas où le LRM/NexSIS sert d'aggrégateur pour des véhicules appartenant à un partenaire tiers (type ambulance privée), l'identifiant d'organisation permet d'identifier ce tiers. A constituer par le rédacteur du présent EMSI pour être unique.
    attr_accessor :org_id

    # Nom donné à la ressource par le partenaire. L'immatriculation peut être utilisée dans le nom courant des véhicules. Dans le cas pompier, les véhicules sont nommés Dans le cas d'équipier, cela peut être leur nom
    attr_accessor :name

    # Texte libre permettant de décrire la ressource où d'ajouter des précisions sur son engagement. Permet aussi notamment de décrire des attributs librement pour la ressource. Par exemple, pour un véhicule, sa plaque d'immatriculation.
    attr_accessor :freetext

    attr_accessor :rgeo

    # Dans le cadre d'un échange d'opération, optionnel. Permet de quantifier une ressource : - à ne pas utiliser pour les véhicules ni le personnel - utilisable pour du matériel - utilisable pour des consommables (dans le cas de consommable, à compléter avec le champ UM)
    attr_accessor :quantity

    # Dans le cadre d'un échange d'opération, optionnel. Unité de mesure pour des ressources consommables
    attr_accessor :um

    # Définit le statut de disponibilité d'une ressource. - AVAILB : Lorsqu'une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l'affaire mais pas encore engagée dans l'opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu'ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu'ils sont sur les lieux de l'affaire
    attr_accessor :status

    # Nationalité d'une ressource, réemployer ISO 3166-1-alpha-2 code elements.
    attr_accessor :nationality

    attr_accessor :contacts

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rtype' => :'RTYPE',
        :'id' => :'ID',
        :'org_id' => :'ORG_ID',
        :'name' => :'NAME',
        :'freetext' => :'FREETEXT',
        :'rgeo' => :'RGEO',
        :'quantity' => :'QUANTITY',
        :'um' => :'UM',
        :'status' => :'STATUS',
        :'nationality' => :'NATIONALITY',
        :'contacts' => :'CONTACTS'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'rtype' => :'Rtype',
        :'id' => :'String',
        :'org_id' => :'String',
        :'name' => :'String',
        :'freetext' => :'String',
        :'rgeo' => :'Array<Rgeo>',
        :'quantity' => :'Float',
        :'um' => :'String',
        :'status' => :'String',
        :'nationality' => :'String',
        :'contacts' => :'Array<Contact>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Emsi::Resource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Emsi::Resource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'rtype')
        self.rtype = attributes[:'rtype']
      else
        self.rtype = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'freetext')
        self.freetext = attributes[:'freetext']
      end

      if attributes.key?(:'rgeo')
        if (value = attributes[:'rgeo']).is_a?(Array)
          self.rgeo = value
        end
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'um')
        self.um = attributes[:'um']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end

      if attributes.key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @rtype.nil?
        invalid_properties.push('invalid value for "rtype", rtype cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @rtype.nil?
      return false if @id.nil?
      return false if @name.nil?
      um_validator = EnumAttributeValidator.new('String', ["LSV", "OTH", "PKG", "TIM", "WGT", "LSV/CM", "LSV/CMH", "LSV/CNTLTR", "LSV/DEG", "LSV/HCTLTR", "LSV/HCTMTR", "LSV/KM", "LSV/KPH", "LSV/LI", "LSV/LTPRHR", "LSV/LTPRMN", "LSV/METRE", "LSV/MILLTR", "LSV/MILMTR", "LSV/SMH", "LSV/SQM", "OTH/COIL", "OTH/DOZEN", "OTH/EA", "OTH/GROSS", "OTH/MANHUR", "OTH/MHPRHR", "PKG/BALE", "PKG/BARREL", "PKG/BLK", "PKG/BOX", "PKG/CASE", "PKG/CONTNR", "PKG/CRATE", "PKG/DRM", "PKG/JERCAN", "PKG/PAK", "PKG/PAL", "PKG/RATION", "TIM/DAY", "TIM/HR", "TIM/MINUTE", "TIM/MON", "TIM/SECOND", "TIM/WEK", "TIM/YEA", "WGT/CNTGRM", "WGT/GRAM", "WGT/KG", "WGT/KGH"])
      return false unless um_validator.valid?(@um)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["AVAILB", "UNAV", "MAINTC", "RESRVD", "VIRTUAL", "IN_USE/MOBILE", "IN_USE/ON_SCENE"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] um Object to be assigned
    def um=(um)
      validator = EnumAttributeValidator.new('String', ["LSV", "OTH", "PKG", "TIM", "WGT", "LSV/CM", "LSV/CMH", "LSV/CNTLTR", "LSV/DEG", "LSV/HCTLTR", "LSV/HCTMTR", "LSV/KM", "LSV/KPH", "LSV/LI", "LSV/LTPRHR", "LSV/LTPRMN", "LSV/METRE", "LSV/MILLTR", "LSV/MILMTR", "LSV/SMH", "LSV/SQM", "OTH/COIL", "OTH/DOZEN", "OTH/EA", "OTH/GROSS", "OTH/MANHUR", "OTH/MHPRHR", "PKG/BALE", "PKG/BARREL", "PKG/BLK", "PKG/BOX", "PKG/CASE", "PKG/CONTNR", "PKG/CRATE", "PKG/DRM", "PKG/JERCAN", "PKG/PAK", "PKG/PAL", "PKG/RATION", "TIM/DAY", "TIM/HR", "TIM/MINUTE", "TIM/MON", "TIM/SECOND", "TIM/WEK", "TIM/YEA", "WGT/CNTGRM", "WGT/GRAM", "WGT/KG", "WGT/KGH"])
      unless validator.valid?(um)
        fail ArgumentError, "invalid value for \"um\", must be one of #{validator.allowable_values}."
      end
      @um = um
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["AVAILB", "UNAV", "MAINTC", "RESRVD", "VIRTUAL", "IN_USE/MOBILE", "IN_USE/ON_SCENE"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rtype == o.rtype &&
          id == o.id &&
          org_id == o.org_id &&
          name == o.name &&
          freetext == o.freetext &&
          rgeo == o.rgeo &&
          quantity == o.quantity &&
          um == o.um &&
          status == o.status &&
          nationality == o.nationality &&
          contacts == o.contacts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [rtype, id, org_id, name, freetext, rgeo, quantity, um, status, nationality, contacts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Emsi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
