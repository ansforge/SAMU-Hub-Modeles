=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Emsi
  class Event
    # A renseigner avec l'identifiant local de l'affaire dans le LRM ou NexSIS
    attr_accessor :id

    # Optionnel Dans nexSIS; [libelle NF 1 métier] & \" - \" & [libelle TL 1 métier] & \" - \" & [libellé commune]
    attr_accessor :name

    # A renseigner avec l'identifiant de l'organisation (champ organization du message RC-EDA) suivi de l'identifiant local de l'affaire du partenaire requérant (champ senderCaseId du message RC-EDA). {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.{numéro de dossier}  NB : Si l'initiateur du partage de dossier est le même que l'initiateur du message EMSI, l'EVENT.ID = EVENT.MAIN_EVENT_ID
    attr_accessor :main_event_id

    attr_accessor :etype

    # Optionnel
    attr_accessor :source

    # Optionnel, Niveau de criticité de l'opération
    attr_accessor :scale

    # Prend une valeur entière entre 0 et 100, et décrit à quel point l'alerte associée à l'événement est fiable Optionnel
    attr_accessor :certainty

    # Dans le cadre d'une demande de concours, ce champ est valorisé avec la date/heure de création de l'affaire ou de l'opération. NexSIS transmettra la date/heure de création de l'opération dans ses systèmes (qui peut diverger de la date/heure de création de l'affaire)
    attr_accessor :decl_datime

    # Dans le cadre d'une demande de concours, ce champ est valorisé avec la date de la première alerte ou la date évaluée de début de la situation d'urgence. Par exemple : Si un incendie est déclaré est 9h02, il a pu démarré à 8h55 par exemple. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l'alerte initiale
    attr_accessor :occ_datime

    # Ce champ est idéalement à valoriser avec la date/heure à laquelle l'observation de la situation d'urgence de l'affaire la plus récente a été réalisée. NexSIS transmettra la date/heure d'envoi de la demande de concours dans son système. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l'alerte initiale
    attr_accessor :obs_datime

    # Permet de décrire le status de l'affaire en cours. Ce champ suit une nomenclature EMSI. (COM = event complete, IPR = event in progress, NST = event not started, STOP = STOP = event under control, no need for additional resource) Dans le cadre d'une opération : - si l'opération est encore en cours : rensigner 'IPR', - si le dispatching de moyens est encore en cours ou que seulement des qualifications d'alertes ont été échangées sans aucune décision de régulation 'NST', - si l'opération est en pause/veille : 'STOP' - si le message d'échange opérationnel décrit une fin d'opération, à renseigner avec 'COM' Un message EMSI-EO sans RESSOURCE ni 
    attr_accessor :status

    # Optionnel
    attr_accessor :risk_assesment

    attr_accessor :reference

    attr_accessor :casualties

    attr_accessor :evac

    attr_accessor :egeo

    # Optionnel
    attr_accessor :cause

    # Optionnel
    attr_accessor :freetext

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'name' => :'NAME',
        :'main_event_id' => :'MAIN_EVENT_ID',
        :'etype' => :'ETYPE',
        :'source' => :'SOURCE',
        :'scale' => :'SCALE',
        :'certainty' => :'CERTAINTY',
        :'decl_datime' => :'DECL_DATIME',
        :'occ_datime' => :'OCC_DATIME',
        :'obs_datime' => :'OBS_DATIME',
        :'status' => :'STATUS',
        :'risk_assesment' => :'RISK_ASSESMENT',
        :'reference' => :'REFERENCE',
        :'casualties' => :'CASUALTIES',
        :'evac' => :'EVAC',
        :'egeo' => :'EGEO',
        :'cause' => :'CAUSE',
        :'freetext' => :'FREETEXT'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'main_event_id' => :'String',
        :'etype' => :'Etype',
        :'source' => :'String',
        :'scale' => :'String',
        :'certainty' => :'Integer',
        :'decl_datime' => :'Time',
        :'occ_datime' => :'Time',
        :'obs_datime' => :'Time',
        :'status' => :'String',
        :'risk_assesment' => :'String',
        :'reference' => :'Array<Reference>',
        :'casualties' => :'Array<Casualties>',
        :'evac' => :'Array<Evac>',
        :'egeo' => :'Array<Egeo>',
        :'cause' => :'String',
        :'freetext' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Emsi::Event` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Emsi::Event`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'main_event_id')
        self.main_event_id = attributes[:'main_event_id']
      end

      if attributes.key?(:'etype')
        self.etype = attributes[:'etype']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'scale')
        self.scale = attributes[:'scale']
      end

      if attributes.key?(:'certainty')
        self.certainty = attributes[:'certainty']
      end

      if attributes.key?(:'decl_datime')
        self.decl_datime = attributes[:'decl_datime']
      end

      if attributes.key?(:'occ_datime')
        self.occ_datime = attributes[:'occ_datime']
      end

      if attributes.key?(:'obs_datime')
        self.obs_datime = attributes[:'obs_datime']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'risk_assesment')
        self.risk_assesment = attributes[:'risk_assesment']
      end

      if attributes.key?(:'reference')
        if (value = attributes[:'reference']).is_a?(Array)
          self.reference = value
        end
      end

      if attributes.key?(:'casualties')
        if (value = attributes[:'casualties']).is_a?(Array)
          self.casualties = value
        end
      end

      if attributes.key?(:'evac')
        if (value = attributes[:'evac']).is_a?(Array)
          self.evac = value
        end
      end

      if attributes.key?(:'egeo')
        if (value = attributes[:'egeo']).is_a?(Array)
          self.egeo = value
        end
      end

      if attributes.key?(:'cause')
        self.cause = attributes[:'cause']
      end

      if attributes.key?(:'freetext')
        self.freetext = attributes[:'freetext']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@decl_datime.nil? && @decl_datime !~ pattern
        invalid_properties.push("invalid value for \"decl_datime\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@occ_datime.nil? && @occ_datime !~ pattern
        invalid_properties.push("invalid value for \"occ_datime\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@obs_datime.nil? && @obs_datime !~ pattern
        invalid_properties.push("invalid value for \"obs_datime\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      source_validator = EnumAttributeValidator.new('String', ["COMFOR", "HUMDED", "HUMOBS", "SENSOR"])
      return false unless source_validator.valid?(@source)
      scale_validator = EnumAttributeValidator.new('String', ["1", "2", "3", "4", "5"])
      return false unless scale_validator.valid?(@scale)
      return false if !@decl_datime.nil? && @decl_datime !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if !@occ_datime.nil? && @occ_datime !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if !@obs_datime.nil? && @obs_datime !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      status_validator = EnumAttributeValidator.new('String', ["COM", "IPR", "NST", "STOP"])
      return false unless status_validator.valid?(@status)
      risk_assesment_validator = EnumAttributeValidator.new('String', ["NCREA", "DECREA", "STABLE"])
      return false unless risk_assesment_validator.valid?(@risk_assesment)
      cause_validator = EnumAttributeValidator.new('String', ["ACC", "DEL", "NAT"])
      return false unless cause_validator.valid?(@cause)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ["COMFOR", "HUMDED", "HUMOBS", "SENSOR"])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scale Object to be assigned
    def scale=(scale)
      validator = EnumAttributeValidator.new('String', ["1", "2", "3", "4", "5"])
      unless validator.valid?(scale)
        fail ArgumentError, "invalid value for \"scale\", must be one of #{validator.allowable_values}."
      end
      @scale = scale
    end

    # Custom attribute writer method with validation
    # @param [Object] decl_datime Value to be assigned
    def decl_datime=(decl_datime)
      if decl_datime.nil?
        fail ArgumentError, 'decl_datime cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if decl_datime !~ pattern
        fail ArgumentError, "invalid value for \"decl_datime\", must conform to the pattern #{pattern}."
      end

      @decl_datime = decl_datime
    end

    # Custom attribute writer method with validation
    # @param [Object] occ_datime Value to be assigned
    def occ_datime=(occ_datime)
      if occ_datime.nil?
        fail ArgumentError, 'occ_datime cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if occ_datime !~ pattern
        fail ArgumentError, "invalid value for \"occ_datime\", must conform to the pattern #{pattern}."
      end

      @occ_datime = occ_datime
    end

    # Custom attribute writer method with validation
    # @param [Object] obs_datime Value to be assigned
    def obs_datime=(obs_datime)
      if obs_datime.nil?
        fail ArgumentError, 'obs_datime cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if obs_datime !~ pattern
        fail ArgumentError, "invalid value for \"obs_datime\", must conform to the pattern #{pattern}."
      end

      @obs_datime = obs_datime
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["COM", "IPR", "NST", "STOP"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_assesment Object to be assigned
    def risk_assesment=(risk_assesment)
      validator = EnumAttributeValidator.new('String', ["NCREA", "DECREA", "STABLE"])
      unless validator.valid?(risk_assesment)
        fail ArgumentError, "invalid value for \"risk_assesment\", must be one of #{validator.allowable_values}."
      end
      @risk_assesment = risk_assesment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cause Object to be assigned
    def cause=(cause)
      validator = EnumAttributeValidator.new('String', ["ACC", "DEL", "NAT"])
      unless validator.valid?(cause)
        fail ArgumentError, "invalid value for \"cause\", must be one of #{validator.allowable_values}."
      end
      @cause = cause
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          main_event_id == o.main_event_id &&
          etype == o.etype &&
          source == o.source &&
          scale == o.scale &&
          certainty == o.certainty &&
          decl_datime == o.decl_datime &&
          occ_datime == o.occ_datime &&
          obs_datime == o.obs_datime &&
          status == o.status &&
          risk_assesment == o.risk_assesment &&
          reference == o.reference &&
          casualties == o.casualties &&
          evac == o.evac &&
          egeo == o.egeo &&
          cause == o.cause &&
          freetext == o.freetext
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, main_event_id, etype, source, scale, certainty, decl_datime, occ_datime, obs_datime, status, risk_assesment, reference, casualties, evac, egeo, cause, freetext].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Emsi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
