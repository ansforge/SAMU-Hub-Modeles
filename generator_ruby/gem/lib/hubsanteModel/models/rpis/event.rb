=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module Rpis
  class Event
    # Numéro du SAMU régulant la mission SMUR.  A valoriser par fr.health.samuXXX :  {pays}.{domaine}.{organisation} 
    attr_accessor :org_id

    # Numéro du dossier SAMU à l’origine de la mission SMUR A valoriser par DRFR15DDXAAJJJ00000 :  - DR = désignation d'un dossier sous forme abrégée, - FR : désigne le pays (FR = France), - 15 : désigne le fait que le dossier a été pris en charge par un SAMU / SAS, - DD : désigne le département où est situé le SAMU / SAS qui a traité le dossier, - X : lettre désignant le SAMU / SAS en cas de pluralité de SAMU / SAS sur le même département ou le troisième chiffre des DOM, - AA : année durant laquelle l’appel a été créé, - JJJ : désigne le jour de l'année (de 1j à 365j),\\par - 00000 : numéro d’ordre chronologique du dossier dans la journée de référence ci-dessus.
    attr_accessor :sender_case_id

    # s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :creation_date

    # s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :decision_date

    # FINESS juridique établissement rattachement SMUR
    attr_accessor :ressource_finess_legal

    # FINESS géographique établissement rattachement SMUR ou antenne SMUR
    attr_accessor :ressource_finess_geo

    # 9 = Antenne SMUR, 0 = SMUR général, 1 = SMUR pédiatrique, 2 = SMUR neonatal 
    attr_accessor :ressource_structure

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'org_id' => :'orgId',
        :'sender_case_id' => :'senderCaseId',
        :'creation_date' => :'creationDate',
        :'decision_date' => :'decisionDate',
        :'ressource_finess_legal' => :'ressourceFinessLegal',
        :'ressource_finess_geo' => :'ressourceFinessGeo',
        :'ressource_structure' => :'ressourceStructure'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'org_id' => :'String',
        :'sender_case_id' => :'String',
        :'creation_date' => :'Time',
        :'decision_date' => :'Time',
        :'ressource_finess_legal' => :'String',
        :'ressource_finess_geo' => :'String',
        :'ressource_structure' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Rpis::Event` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Rpis::Event`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      else
        self.org_id = nil
      end

      if attributes.key?(:'sender_case_id')
        self.sender_case_id = attributes[:'sender_case_id']
      else
        self.sender_case_id = nil
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      else
        self.creation_date = nil
      end

      if attributes.key?(:'decision_date')
        self.decision_date = attributes[:'decision_date']
      else
        self.decision_date = nil
      end

      if attributes.key?(:'ressource_finess_legal')
        self.ressource_finess_legal = attributes[:'ressource_finess_legal']
      else
        self.ressource_finess_legal = nil
      end

      if attributes.key?(:'ressource_finess_geo')
        self.ressource_finess_geo = attributes[:'ressource_finess_geo']
      else
        self.ressource_finess_geo = nil
      end

      if attributes.key?(:'ressource_structure')
        self.ressource_structure = attributes[:'ressource_structure']
      else
        self.ressource_structure = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @org_id.nil?
        invalid_properties.push('invalid value for "org_id", org_id cannot be nil.')
      end

      pattern = Regexp.new(/^[a-z]{2,3}\.[a-z]+\.\w*$/)
      if @org_id !~ pattern
        invalid_properties.push("invalid value for \"org_id\", must conform to the pattern #{pattern}.")
      end

      if @sender_case_id.nil?
        invalid_properties.push('invalid value for "sender_case_id", sender_case_id cannot be nil.')
      end

      if @creation_date.nil?
        invalid_properties.push('invalid value for "creation_date", creation_date cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @creation_date !~ pattern
        invalid_properties.push("invalid value for \"creation_date\", must conform to the pattern #{pattern}.")
      end

      if @decision_date.nil?
        invalid_properties.push('invalid value for "decision_date", decision_date cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @decision_date !~ pattern
        invalid_properties.push("invalid value for \"decision_date\", must conform to the pattern #{pattern}.")
      end

      if @ressource_finess_legal.nil?
        invalid_properties.push('invalid value for "ressource_finess_legal", ressource_finess_legal cannot be nil.')
      end

      if @ressource_finess_geo.nil?
        invalid_properties.push('invalid value for "ressource_finess_geo", ressource_finess_geo cannot be nil.')
      end

      if @ressource_structure.nil?
        invalid_properties.push('invalid value for "ressource_structure", ressource_structure cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @org_id.nil?
      return false if @org_id !~ Regexp.new(/^[a-z]{2,3}\.[a-z]+\.\w*$/)
      return false if @sender_case_id.nil?
      return false if @creation_date.nil?
      return false if @creation_date !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @decision_date.nil?
      return false if @decision_date !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @ressource_finess_legal.nil?
      return false if @ressource_finess_geo.nil?
      return false if @ressource_structure.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] org_id Value to be assigned
    def org_id=(org_id)
      if org_id.nil?
        fail ArgumentError, 'org_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-z]{2,3}\.[a-z]+\.\w*$/)
      if org_id !~ pattern
        fail ArgumentError, "invalid value for \"org_id\", must conform to the pattern #{pattern}."
      end

      @org_id = org_id
    end

    # Custom attribute writer method with validation
    # @param [Object] creation_date Value to be assigned
    def creation_date=(creation_date)
      if creation_date.nil?
        fail ArgumentError, 'creation_date cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if creation_date !~ pattern
        fail ArgumentError, "invalid value for \"creation_date\", must conform to the pattern #{pattern}."
      end

      @creation_date = creation_date
    end

    # Custom attribute writer method with validation
    # @param [Object] decision_date Value to be assigned
    def decision_date=(decision_date)
      if decision_date.nil?
        fail ArgumentError, 'decision_date cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if decision_date !~ pattern
        fail ArgumentError, "invalid value for \"decision_date\", must conform to the pattern #{pattern}."
      end

      @decision_date = decision_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          org_id == o.org_id &&
          sender_case_id == o.sender_case_id &&
          creation_date == o.creation_date &&
          decision_date == o.decision_date &&
          ressource_finess_legal == o.ressource_finess_legal &&
          ressource_finess_geo == o.ressource_finess_geo &&
          ressource_structure == o.ressource_structure
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [org_id, sender_case_id, creation_date, decision_date, ressource_finess_legal, ressource_finess_geo, ressource_structure].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Rpis.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
