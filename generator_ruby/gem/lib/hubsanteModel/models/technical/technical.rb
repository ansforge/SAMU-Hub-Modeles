=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module Technical
  class Technical
    # This field is required
    attr_accessor :required_string_field

    # This field is optional
    attr_accessor :optional_string_field

    # This is an enumeration
    attr_accessor :enumeration_field

    # This is an integer
    attr_accessor :integer_field

    # This is a number
    attr_accessor :number_field

    # This is a boolean
    attr_accessor :boolean_field

    attr_accessor :object_field

    attr_accessor :array_field

    attr_accessor :enum_array_field

    attr_accessor :required_array

    attr_accessor :array_with_max_length

    # Phone number with regex
    attr_accessor :phone_number_field

    # Date
    attr_accessor :date_field

    # Email with regex
    attr_accessor :email_field

    # Datetime
    attr_accessor :datetime_field

    attr_accessor :object_level1

    # Enum from extenal nomenclature file
    attr_accessor :nomenclature_field

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'required_string_field' => :'requiredStringField',
        :'optional_string_field' => :'optionalStringField',
        :'enumeration_field' => :'enumerationField',
        :'integer_field' => :'integerField',
        :'number_field' => :'numberField',
        :'boolean_field' => :'booleanField',
        :'object_field' => :'objectField',
        :'array_field' => :'arrayField',
        :'enum_array_field' => :'enumArrayField',
        :'required_array' => :'requiredArray',
        :'array_with_max_length' => :'arrayWithMaxLength',
        :'phone_number_field' => :'phoneNumberField',
        :'date_field' => :'dateField',
        :'email_field' => :'emailField',
        :'datetime_field' => :'datetimeField',
        :'object_level1' => :'objectLevel1',
        :'nomenclature_field' => :'nomenclatureField'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'required_string_field' => :'String',
        :'optional_string_field' => :'String',
        :'enumeration_field' => :'String',
        :'integer_field' => :'Integer',
        :'number_field' => :'Float',
        :'boolean_field' => :'Boolean',
        :'object_field' => :'TechnicalObject',
        :'array_field' => :'Array<String>',
        :'enum_array_field' => :'Array<String>',
        :'required_array' => :'Array<String>',
        :'array_with_max_length' => :'Array<String>',
        :'phone_number_field' => :'String',
        :'date_field' => :'String',
        :'email_field' => :'String',
        :'datetime_field' => :'Time',
        :'object_level1' => :'LevelOneData',
        :'nomenclature_field' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Technical::Technical` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Technical::Technical`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'required_string_field')
        self.required_string_field = attributes[:'required_string_field']
      else
        self.required_string_field = nil
      end

      if attributes.key?(:'optional_string_field')
        self.optional_string_field = attributes[:'optional_string_field']
      end

      if attributes.key?(:'enumeration_field')
        self.enumeration_field = attributes[:'enumeration_field']
      end

      if attributes.key?(:'integer_field')
        self.integer_field = attributes[:'integer_field']
      end

      if attributes.key?(:'number_field')
        self.number_field = attributes[:'number_field']
      end

      if attributes.key?(:'boolean_field')
        self.boolean_field = attributes[:'boolean_field']
      end

      if attributes.key?(:'object_field')
        self.object_field = attributes[:'object_field']
      end

      if attributes.key?(:'array_field')
        if (value = attributes[:'array_field']).is_a?(Array)
          self.array_field = value
        end
      end

      if attributes.key?(:'enum_array_field')
        if (value = attributes[:'enum_array_field']).is_a?(Array)
          self.enum_array_field = value
        end
      end

      if attributes.key?(:'required_array')
        if (value = attributes[:'required_array']).is_a?(Array)
          self.required_array = value
        end
      else
        self.required_array = nil
      end

      if attributes.key?(:'array_with_max_length')
        if (value = attributes[:'array_with_max_length']).is_a?(Array)
          self.array_with_max_length = value
        end
      end

      if attributes.key?(:'phone_number_field')
        self.phone_number_field = attributes[:'phone_number_field']
      end

      if attributes.key?(:'date_field')
        self.date_field = attributes[:'date_field']
      end

      if attributes.key?(:'email_field')
        self.email_field = attributes[:'email_field']
      end

      if attributes.key?(:'datetime_field')
        self.datetime_field = attributes[:'datetime_field']
      end

      if attributes.key?(:'object_level1')
        self.object_level1 = attributes[:'object_level1']
      end

      if attributes.key?(:'nomenclature_field')
        self.nomenclature_field = attributes[:'nomenclature_field']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @required_string_field.nil?
        invalid_properties.push('invalid value for "required_string_field", required_string_field cannot be nil.')
      end

      if @required_array.nil?
        invalid_properties.push('invalid value for "required_array", required_array cannot be nil.')
      end

      if @required_array.length < 1
        invalid_properties.push('invalid value for "required_array", number of items must be greater than or equal to 1.')
      end

      if !@array_with_max_length.nil? && @array_with_max_length.length > 5
        invalid_properties.push('invalid value for "array_with_max_length", number of items must be less than or equal to 5.')
      end

      pattern = Regexp.new(/^\+?[0-9]{2,14}$/)
      if !@phone_number_field.nil? && @phone_number_field !~ pattern
        invalid_properties.push("invalid value for \"phone_number_field\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}$/)
      if !@date_field.nil? && @date_field !~ pattern
        invalid_properties.push("invalid value for \"date_field\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[\w\-\.]+@([\w\-]+\.)+[\w\-]{2,4}$/)
      if !@email_field.nil? && @email_field !~ pattern
        invalid_properties.push("invalid value for \"email_field\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@datetime_field.nil? && @datetime_field !~ pattern
        invalid_properties.push("invalid value for \"datetime_field\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @required_string_field.nil?
      enumeration_field_validator = EnumAttributeValidator.new('String', ["ENUM_VALUE_1", "ENUM_VALUE_2", "ENUM_VALUE_3", "ENUM_VALUE_4", "ENUM_VALUE_5"])
      return false unless enumeration_field_validator.valid?(@enumeration_field)
      return false if @required_array.nil?
      return false if @required_array.length < 1
      return false if !@array_with_max_length.nil? && @array_with_max_length.length > 5
      return false if !@phone_number_field.nil? && @phone_number_field !~ Regexp.new(/^\+?[0-9]{2,14}$/)
      return false if !@date_field.nil? && @date_field !~ Regexp.new(/^\d{4}-\d{2}-\d{2}$/)
      return false if !@email_field.nil? && @email_field !~ Regexp.new(/^[\w\-\.]+@([\w\-]+\.)+[\w\-]{2,4}$/)
      return false if !@datetime_field.nil? && @datetime_field !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      nomenclature_field_validator = EnumAttributeValidator.new('String', ["M", "F", "O", "UN"])
      return false unless nomenclature_field_validator.valid?(@nomenclature_field)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enumeration_field Object to be assigned
    def enumeration_field=(enumeration_field)
      validator = EnumAttributeValidator.new('String', ["ENUM_VALUE_1", "ENUM_VALUE_2", "ENUM_VALUE_3", "ENUM_VALUE_4", "ENUM_VALUE_5"])
      unless validator.valid?(enumeration_field)
        fail ArgumentError, "invalid value for \"enumeration_field\", must be one of #{validator.allowable_values}."
      end
      @enumeration_field = enumeration_field
    end

    # Custom attribute writer method with validation
    # @param [Object] required_array Value to be assigned
    def required_array=(required_array)
      if required_array.nil?
        fail ArgumentError, 'required_array cannot be nil'
      end

      if required_array.length < 1
        fail ArgumentError, 'invalid value for "required_array", number of items must be greater than or equal to 1.'
      end

      @required_array = required_array
    end

    # Custom attribute writer method with validation
    # @param [Object] array_with_max_length Value to be assigned
    def array_with_max_length=(array_with_max_length)
      if array_with_max_length.nil?
        fail ArgumentError, 'array_with_max_length cannot be nil'
      end

      if array_with_max_length.length > 5
        fail ArgumentError, 'invalid value for "array_with_max_length", number of items must be less than or equal to 5.'
      end

      @array_with_max_length = array_with_max_length
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number_field Value to be assigned
    def phone_number_field=(phone_number_field)
      if phone_number_field.nil?
        fail ArgumentError, 'phone_number_field cannot be nil'
      end

      pattern = Regexp.new(/^\+?[0-9]{2,14}$/)
      if phone_number_field !~ pattern
        fail ArgumentError, "invalid value for \"phone_number_field\", must conform to the pattern #{pattern}."
      end

      @phone_number_field = phone_number_field
    end

    # Custom attribute writer method with validation
    # @param [Object] date_field Value to be assigned
    def date_field=(date_field)
      if date_field.nil?
        fail ArgumentError, 'date_field cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}$/)
      if date_field !~ pattern
        fail ArgumentError, "invalid value for \"date_field\", must conform to the pattern #{pattern}."
      end

      @date_field = date_field
    end

    # Custom attribute writer method with validation
    # @param [Object] email_field Value to be assigned
    def email_field=(email_field)
      if email_field.nil?
        fail ArgumentError, 'email_field cannot be nil'
      end

      pattern = Regexp.new(/^[\w\-\.]+@([\w\-]+\.)+[\w\-]{2,4}$/)
      if email_field !~ pattern
        fail ArgumentError, "invalid value for \"email_field\", must conform to the pattern #{pattern}."
      end

      @email_field = email_field
    end

    # Custom attribute writer method with validation
    # @param [Object] datetime_field Value to be assigned
    def datetime_field=(datetime_field)
      if datetime_field.nil?
        fail ArgumentError, 'datetime_field cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if datetime_field !~ pattern
        fail ArgumentError, "invalid value for \"datetime_field\", must conform to the pattern #{pattern}."
      end

      @datetime_field = datetime_field
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nomenclature_field Object to be assigned
    def nomenclature_field=(nomenclature_field)
      validator = EnumAttributeValidator.new('String', ["M", "F", "O", "UN"])
      unless validator.valid?(nomenclature_field)
        fail ArgumentError, "invalid value for \"nomenclature_field\", must be one of #{validator.allowable_values}."
      end
      @nomenclature_field = nomenclature_field
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          required_string_field == o.required_string_field &&
          optional_string_field == o.optional_string_field &&
          enumeration_field == o.enumeration_field &&
          integer_field == o.integer_field &&
          number_field == o.number_field &&
          boolean_field == o.boolean_field &&
          object_field == o.object_field &&
          array_field == o.array_field &&
          enum_array_field == o.enum_array_field &&
          required_array == o.required_array &&
          array_with_max_length == o.array_with_max_length &&
          phone_number_field == o.phone_number_field &&
          date_field == o.date_field &&
          email_field == o.email_field &&
          datetime_field == o.datetime_field &&
          object_level1 == o.object_level1 &&
          nomenclature_field == o.nomenclature_field
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [required_string_field, optional_string_field, enumeration_field, integer_field, number_field, boolean_field, object_field, array_field, enum_array_field, required_array, array_with_max_length, phone_number_field, date_field, email_field, datetime_field, object_level1, nomenclature_field].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Technical.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
