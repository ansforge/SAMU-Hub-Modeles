=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module Health
  class Decision
    # A valoriser avec l'ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur
    attr_accessor :patient_id

    # A valoriser avec le groupe date heure de création de la décision.  L'indicateur de fuseau horaire Z ne doit pas être utilisé.
    attr_accessor :creation

    attr_accessor :operator

    # A valoriser avec le type de décision prise (cf.nomenclature associée)
    attr_accessor :decision_type

    # A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d'intervention ou de transport/orientation.
    attr_accessor :resource_type

    # A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True = transport médicalisé False = transport non médicalisé
    attr_accessor :medical_transport

    # Indique le type de destination en cas de décision d'orientation (cf. nomenclature associée)
    attr_accessor :orientation_type

    attr_accessor :destination

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'patient_id' => :'patientId',
        :'creation' => :'creation',
        :'operator' => :'operator',
        :'decision_type' => :'decisionType',
        :'resource_type' => :'resourceType',
        :'medical_transport' => :'medicalTransport',
        :'orientation_type' => :'orientationType',
        :'destination' => :'destination'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'patient_id' => :'String',
        :'creation' => :'Time',
        :'operator' => :'Operator',
        :'decision_type' => :'String',
        :'resource_type' => :'String',
        :'medical_transport' => :'Boolean',
        :'orientation_type' => :'String',
        :'destination' => :'Destination'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Health::Decision` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Health::Decision`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'patient_id')
        self.patient_id = attributes[:'patient_id']
      end

      if attributes.key?(:'creation')
        self.creation = attributes[:'creation']
      else
        self.creation = nil
      end

      if attributes.key?(:'operator')
        self.operator = attributes[:'operator']
      else
        self.operator = nil
      end

      if attributes.key?(:'decision_type')
        self.decision_type = attributes[:'decision_type']
      else
        self.decision_type = nil
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'medical_transport')
        self.medical_transport = attributes[:'medical_transport']
      end

      if attributes.key?(:'orientation_type')
        self.orientation_type = attributes[:'orientation_type']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @creation.nil?
        invalid_properties.push('invalid value for "creation", creation cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @creation !~ pattern
        invalid_properties.push("invalid value for \"creation\", must conform to the pattern #{pattern}.")
      end

      if @operator.nil?
        invalid_properties.push('invalid value for "operator", operator cannot be nil.')
      end

      if @decision_type.nil?
        invalid_properties.push('invalid value for "decision_type", decision_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @creation.nil?
      return false if @creation !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @operator.nil?
      return false if @decision_type.nil?
      decision_type_validator = EnumAttributeValidator.new('String', ["CONSEIL", "PMT", "INTER", "ORIENT", "PASPLUS"])
      return false unless decision_type_validator.valid?(@decision_type)
      resource_type_validator = EnumAttributeValidator.new('String', ["SMUR", "SMUR.ADULT", "SMUR.PED", "SMUR.UMH-S", "SMUR.CUMP", "HOSPIT", "LIBERAL", "LIBERAL.MG", "LIBERAL.PHARM", "LIBERAL.INF", "LIBERAL.KINE", "LIBERAL.SOS", "LIBERAL.MMG", "LIBERAL.MSPD", "LIBERAL.MCS", "LIBERAL.SPEMED", "LIBERAL.DENT", "LIBERAL.LABO", "LIBERAL.AUTREPRO", "TSU ", "SIS", "SIS.MEDSP", "SIS.ISP", "SIS.SP", "AASC", "FDO", "FDO.PN", "FDO.GEND", "FDO.PM", "FDO.DOUANES", "AUTRE", "AUTRE.ADM", "AUTRE.DAE", "AUTRE.AUTRE"])
      return false unless resource_type_validator.valid?(@resource_type)
      orientation_type_validator = EnumAttributeValidator.new('String', ["URGENCES", "REA-USI", "SANTE", "CABINET", "DOMICILE", "EPHAD", "AUTRE"])
      return false unless orientation_type_validator.valid?(@orientation_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] creation Value to be assigned
    def creation=(creation)
      if creation.nil?
        fail ArgumentError, 'creation cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if creation !~ pattern
        fail ArgumentError, "invalid value for \"creation\", must conform to the pattern #{pattern}."
      end

      @creation = creation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decision_type Object to be assigned
    def decision_type=(decision_type)
      validator = EnumAttributeValidator.new('String', ["CONSEIL", "PMT", "INTER", "ORIENT", "PASPLUS"])
      unless validator.valid?(decision_type)
        fail ArgumentError, "invalid value for \"decision_type\", must be one of #{validator.allowable_values}."
      end
      @decision_type = decision_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      validator = EnumAttributeValidator.new('String', ["SMUR", "SMUR.ADULT", "SMUR.PED", "SMUR.UMH-S", "SMUR.CUMP", "HOSPIT", "LIBERAL", "LIBERAL.MG", "LIBERAL.PHARM", "LIBERAL.INF", "LIBERAL.KINE", "LIBERAL.SOS", "LIBERAL.MMG", "LIBERAL.MSPD", "LIBERAL.MCS", "LIBERAL.SPEMED", "LIBERAL.DENT", "LIBERAL.LABO", "LIBERAL.AUTREPRO", "TSU ", "SIS", "SIS.MEDSP", "SIS.ISP", "SIS.SP", "AASC", "FDO", "FDO.PN", "FDO.GEND", "FDO.PM", "FDO.DOUANES", "AUTRE", "AUTRE.ADM", "AUTRE.DAE", "AUTRE.AUTRE"])
      unless validator.valid?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{validator.allowable_values}."
      end
      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] orientation_type Object to be assigned
    def orientation_type=(orientation_type)
      validator = EnumAttributeValidator.new('String', ["URGENCES", "REA-USI", "SANTE", "CABINET", "DOMICILE", "EPHAD", "AUTRE"])
      unless validator.valid?(orientation_type)
        fail ArgumentError, "invalid value for \"orientation_type\", must be one of #{validator.allowable_values}."
      end
      @orientation_type = orientation_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          patient_id == o.patient_id &&
          creation == o.creation &&
          operator == o.operator &&
          decision_type == o.decision_type &&
          resource_type == o.resource_type &&
          medical_transport == o.medical_transport &&
          orientation_type == o.orientation_type &&
          destination == o.destination
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [patient_id, creation, operator, decision_type, resource_type, medical_transport, orientation_type, destination].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Health.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
