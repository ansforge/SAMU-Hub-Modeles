=begin
#OpenAPI

#OpenAPI

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Health
  class MedicalNote
    # Identifiant partagé du patient concerné par l'observation, a remplir obligatoirement si ce patient existe et est identifié dans le système emetteur,   Valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n'existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}
    attr_accessor :patient_id

    attr_accessor :operator

    # Identifiant partagé de l'observation, généré une seule fois par le système du partenaire qui créé l'observation Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.medicalNote.{ID unique de l’observation dans le système émetteur}  OU - uniquement dans le cas où un ID unique de la note n'est pas disponible dans le système :  {OrgId émetteur}.medicalNote.{senderCaseId}.{numéro chronologique de l’observation}  Cet identifiant a vocation à devenir obligatoire pour permettre les mises à jour, il est laissé en facultatif temporairement. 
    attr_accessor :medical_note_id

    # A valoriser avec le groupe date heure de création de l'observation.  L'indicateur de fuseau horaire Z ne doit pas être utilisé.
    attr_accessor :creation

    # Champ libre qui permet de compléter les informations de nature médicales, faites par un ARM, un médecin ou un autre professionnel de santé.
    attr_accessor :freetext

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'patient_id' => :'patientId',
        :'operator' => :'operator',
        :'medical_note_id' => :'medicalNoteId',
        :'creation' => :'creation',
        :'freetext' => :'freetext'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'patient_id' => :'String',
        :'operator' => :'Operator',
        :'medical_note_id' => :'String',
        :'creation' => :'Time',
        :'freetext' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Health::MedicalNote` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Health::MedicalNote`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'patient_id')
        self.patient_id = attributes[:'patient_id']
      end

      if attributes.key?(:'operator')
        self.operator = attributes[:'operator']
      else
        self.operator = nil
      end

      if attributes.key?(:'medical_note_id')
        self.medical_note_id = attributes[:'medical_note_id']
      else
        self.medical_note_id = nil
      end

      if attributes.key?(:'creation')
        self.creation = attributes[:'creation']
      end

      if attributes.key?(:'freetext')
        self.freetext = attributes[:'freetext']
      else
        self.freetext = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^([\w-]+\.){3,8}patient(\.[\w-]+){1,2}$/)
      if !@patient_id.nil? && @patient_id !~ pattern
        invalid_properties.push("invalid value for \"patient_id\", must conform to the pattern #{pattern}.")
      end

      if @operator.nil?
        invalid_properties.push('invalid value for "operator", operator cannot be nil.')
      end

      if @medical_note_id.nil?
        invalid_properties.push('invalid value for "medical_note_id", medical_note_id cannot be nil.')
      end

      pattern = Regexp.new(/^([\w-]+\.){3,8}medicalNote(\.[\w-]+){1,2}$/)
      if @medical_note_id !~ pattern
        invalid_properties.push("invalid value for \"medical_note_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@creation.nil? && @creation !~ pattern
        invalid_properties.push("invalid value for \"creation\", must conform to the pattern #{pattern}.")
      end

      if @freetext.nil?
        invalid_properties.push('invalid value for "freetext", freetext cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@patient_id.nil? && @patient_id !~ Regexp.new(/^([\w-]+\.){3,8}patient(\.[\w-]+){1,2}$/)
      return false if @operator.nil?
      return false if @medical_note_id.nil?
      return false if @medical_note_id !~ Regexp.new(/^([\w-]+\.){3,8}medicalNote(\.[\w-]+){1,2}$/)
      return false if !@creation.nil? && @creation !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @freetext.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] patient_id Value to be assigned
    def patient_id=(patient_id)
      if patient_id.nil?
        fail ArgumentError, 'patient_id cannot be nil'
      end

      pattern = Regexp.new(/^([\w-]+\.){3,8}patient(\.[\w-]+){1,2}$/)
      if patient_id !~ pattern
        fail ArgumentError, "invalid value for \"patient_id\", must conform to the pattern #{pattern}."
      end

      @patient_id = patient_id
    end

    # Custom attribute writer method with validation
    # @param [Object] medical_note_id Value to be assigned
    def medical_note_id=(medical_note_id)
      if medical_note_id.nil?
        fail ArgumentError, 'medical_note_id cannot be nil'
      end

      pattern = Regexp.new(/^([\w-]+\.){3,8}medicalNote(\.[\w-]+){1,2}$/)
      if medical_note_id !~ pattern
        fail ArgumentError, "invalid value for \"medical_note_id\", must conform to the pattern #{pattern}."
      end

      @medical_note_id = medical_note_id
    end

    # Custom attribute writer method with validation
    # @param [Object] creation Value to be assigned
    def creation=(creation)
      if creation.nil?
        fail ArgumentError, 'creation cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if creation !~ pattern
        fail ArgumentError, "invalid value for \"creation\", must conform to the pattern #{pattern}."
      end

      @creation = creation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          patient_id == o.patient_id &&
          operator == o.operator &&
          medical_note_id == o.medical_note_id &&
          creation == o.creation &&
          freetext == o.freetext
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [patient_id, operator, medical_note_id, creation, freetext].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Health.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
