=begin


Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module Rpis
  class ResourceStatus
    # Date et heure à laquelle le SMUR quitte sa base.  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :depart_smur

    # Date et heure à laquelle le SMUR arrive sur les lieux de l'intervention.  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :arrived_smur

    # Date et heure à laquelle le SMUR quitte les lieux de l'intervention.  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :depart_location

    # Date et heure à laquelle le SMUR qui transporte arrive à destination.  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :arrived_destination

    # Date et heure à laquelle le SMUR est disponible (dispose de tout les équipements pour faire une autre intervention).  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :team_available

    # Date et heure à laquelle le SMUR est de retour à la base.  s'exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
    attr_accessor :return_smur

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'depart_smur' => :'departSmur',
        :'arrived_smur' => :'arrivedSmur',
        :'depart_location' => :'departLocation',
        :'arrived_destination' => :'arrivedDestination',
        :'team_available' => :'teamAvailable',
        :'return_smur' => :'returnSmur'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'depart_smur' => :'Time',
        :'arrived_smur' => :'Time',
        :'depart_location' => :'Time',
        :'arrived_destination' => :'Time',
        :'team_available' => :'Time',
        :'return_smur' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Rpis::ResourceStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Rpis::ResourceStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'depart_smur')
        self.depart_smur = attributes[:'depart_smur']
      else
        self.depart_smur = nil
      end

      if attributes.key?(:'arrived_smur')
        self.arrived_smur = attributes[:'arrived_smur']
      end

      if attributes.key?(:'depart_location')
        self.depart_location = attributes[:'depart_location']
      end

      if attributes.key?(:'arrived_destination')
        self.arrived_destination = attributes[:'arrived_destination']
      end

      if attributes.key?(:'team_available')
        self.team_available = attributes[:'team_available']
      else
        self.team_available = nil
      end

      if attributes.key?(:'return_smur')
        self.return_smur = attributes[:'return_smur']
      else
        self.return_smur = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @depart_smur.nil?
        invalid_properties.push('invalid value for "depart_smur", depart_smur cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @depart_smur !~ pattern
        invalid_properties.push("invalid value for \"depart_smur\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@arrived_smur.nil? && @arrived_smur !~ pattern
        invalid_properties.push("invalid value for \"arrived_smur\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@depart_location.nil? && @depart_location !~ pattern
        invalid_properties.push("invalid value for \"depart_location\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if !@arrived_destination.nil? && @arrived_destination !~ pattern
        invalid_properties.push("invalid value for \"arrived_destination\", must conform to the pattern #{pattern}.")
      end

      if @team_available.nil?
        invalid_properties.push('invalid value for "team_available", team_available cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @team_available !~ pattern
        invalid_properties.push("invalid value for \"team_available\", must conform to the pattern #{pattern}.")
      end

      if @return_smur.nil?
        invalid_properties.push('invalid value for "return_smur", return_smur cannot be nil.')
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if @return_smur !~ pattern
        invalid_properties.push("invalid value for \"return_smur\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @depart_smur.nil?
      return false if @depart_smur !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if !@arrived_smur.nil? && @arrived_smur !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if !@depart_location.nil? && @depart_location !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if !@arrived_destination.nil? && @arrived_destination !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @team_available.nil?
      return false if @team_available !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      return false if @return_smur.nil?
      return false if @return_smur !~ Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] depart_smur Value to be assigned
    def depart_smur=(depart_smur)
      if depart_smur.nil?
        fail ArgumentError, 'depart_smur cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if depart_smur !~ pattern
        fail ArgumentError, "invalid value for \"depart_smur\", must conform to the pattern #{pattern}."
      end

      @depart_smur = depart_smur
    end

    # Custom attribute writer method with validation
    # @param [Object] arrived_smur Value to be assigned
    def arrived_smur=(arrived_smur)
      if arrived_smur.nil?
        fail ArgumentError, 'arrived_smur cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if arrived_smur !~ pattern
        fail ArgumentError, "invalid value for \"arrived_smur\", must conform to the pattern #{pattern}."
      end

      @arrived_smur = arrived_smur
    end

    # Custom attribute writer method with validation
    # @param [Object] depart_location Value to be assigned
    def depart_location=(depart_location)
      if depart_location.nil?
        fail ArgumentError, 'depart_location cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if depart_location !~ pattern
        fail ArgumentError, "invalid value for \"depart_location\", must conform to the pattern #{pattern}."
      end

      @depart_location = depart_location
    end

    # Custom attribute writer method with validation
    # @param [Object] arrived_destination Value to be assigned
    def arrived_destination=(arrived_destination)
      if arrived_destination.nil?
        fail ArgumentError, 'arrived_destination cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if arrived_destination !~ pattern
        fail ArgumentError, "invalid value for \"arrived_destination\", must conform to the pattern #{pattern}."
      end

      @arrived_destination = arrived_destination
    end

    # Custom attribute writer method with validation
    # @param [Object] team_available Value to be assigned
    def team_available=(team_available)
      if team_available.nil?
        fail ArgumentError, 'team_available cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if team_available !~ pattern
        fail ArgumentError, "invalid value for \"team_available\", must conform to the pattern #{pattern}."
      end

      @team_available = team_available
    end

    # Custom attribute writer method with validation
    # @param [Object] return_smur Value to be assigned
    def return_smur=(return_smur)
      if return_smur.nil?
        fail ArgumentError, 'return_smur cannot be nil'
      end

      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/)
      if return_smur !~ pattern
        fail ArgumentError, "invalid value for \"return_smur\", must conform to the pattern #{pattern}."
      end

      @return_smur = return_smur
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          depart_smur == o.depart_smur &&
          arrived_smur == o.arrived_smur &&
          depart_location == o.depart_location &&
          arrived_destination == o.arrived_destination &&
          team_available == o.team_available &&
          return_smur == o.return_smur
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [depart_smur, arrived_smur, depart_location, arrived_destination, team_available, return_smur].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Rpis.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
