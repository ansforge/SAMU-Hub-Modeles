=begin


Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module Geolocation
  class Position
    # Identifiant unique de la ressource  dans le système du partenaire propriétaire
    attr_accessor :id

    # Date et heure de la dernière position connue
    attr_accessor :datetime

    # Date et heure de la réception de la dernière position connue dans le système de l'organisme
    attr_accessor :reception_datetime

    attr_accessor :coord

    # Vitesse de la ressource enregistrée, exprimée en km/h
    attr_accessor :speed

    # Direction de la ressource, exprimé en degrés
    attr_accessor :cap

    # Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE)
    attr_accessor :move

    # Indique si le moteur de la ressource est éteint (FAUX) ou allumé/en marche (VRAI)
    attr_accessor :engine_on

    # Indique si l'hélicoptère est au sol (VRAI) ou en l'air (FAUX)
    attr_accessor :ground_status

    # Définit le statut de disponibilité d'une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n'est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu
    attr_accessor :status

    # Précise le statut d'une ressource qui est engagée sur une mission
    attr_accessor :engaged_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'datetime' => :'datetime',
        :'reception_datetime' => :'receptionDatetime',
        :'coord' => :'coord',
        :'speed' => :'speed',
        :'cap' => :'cap',
        :'move' => :'move',
        :'engine_on' => :'engineOn',
        :'ground_status' => :'groundStatus',
        :'status' => :'status',
        :'engaged_status' => :'engagedStatus'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'datetime' => :'Time',
        :'reception_datetime' => :'Time',
        :'coord' => :'Array<Coord>',
        :'speed' => :'Float',
        :'cap' => :'String',
        :'move' => :'String',
        :'engine_on' => :'Boolean',
        :'ground_status' => :'Boolean',
        :'status' => :'String',
        :'engaged_status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Geolocation::Position` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Geolocation::Position`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'datetime')
        self.datetime = attributes[:'datetime']
      else
        self.datetime = nil
      end

      if attributes.key?(:'reception_datetime')
        self.reception_datetime = attributes[:'reception_datetime']
      end

      if attributes.key?(:'coord')
        if (value = attributes[:'coord']).is_a?(Array)
          self.coord = value
        end
      end

      if attributes.key?(:'speed')
        self.speed = attributes[:'speed']
      end

      if attributes.key?(:'cap')
        self.cap = attributes[:'cap']
      end

      if attributes.key?(:'move')
        self.move = attributes[:'move']
      end

      if attributes.key?(:'engine_on')
        self.engine_on = attributes[:'engine_on']
      end

      if attributes.key?(:'ground_status')
        self.ground_status = attributes[:'ground_status']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'engaged_status')
        self.engaged_status = attributes[:'engaged_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @datetime.nil?
        invalid_properties.push('invalid value for "datetime", datetime cannot be nil.')
      end

      pattern = Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      if @datetime !~ pattern
        invalid_properties.push("invalid value for \"datetime\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      if !@reception_datetime.nil? && @reception_datetime !~ pattern
        invalid_properties.push("invalid value for \"reception_datetime\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @datetime.nil?
      return false if @datetime !~ Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      return false if !@reception_datetime.nil? && @reception_datetime !~ Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      move_validator = EnumAttributeValidator.new('String', ["MOBILE", "STATIQUE"])
      return false unless move_validator.valid?(@move)
      status_validator = EnumAttributeValidator.new('String', ["DISPONIBLE", "INDISPONIBLE", "INCONNU"])
      return false unless status_validator.valid?(@status)
      engaged_status_validator = EnumAttributeValidator.new('String', ["ALERTEE", "PARTIE", "ARRIVEE_LIEU", "TRANSPORT_DESTINATION", "ARRIVEE_DESTINATION", "FIN_MED", "QUITTE_DESTINATION", "RETOUR_DISPONIBLE", "RETOUR_INDISPONIBLE", "ARRIVEE_CENTRE"])
      return false unless engaged_status_validator.valid?(@engaged_status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] datetime Value to be assigned
    def datetime=(datetime)
      if datetime.nil?
        fail ArgumentError, 'datetime cannot be nil'
      end

      pattern = Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      if datetime !~ pattern
        fail ArgumentError, "invalid value for \"datetime\", must conform to the pattern #{pattern}."
      end

      @datetime = datetime
    end

    # Custom attribute writer method with validation
    # @param [Object] reception_datetime Value to be assigned
    def reception_datetime=(reception_datetime)
      if reception_datetime.nil?
        fail ArgumentError, 'reception_datetime cannot be nil'
      end

      pattern = Regexp.new(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}/)
      if reception_datetime !~ pattern
        fail ArgumentError, "invalid value for \"reception_datetime\", must conform to the pattern #{pattern}."
      end

      @reception_datetime = reception_datetime
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] move Object to be assigned
    def move=(move)
      validator = EnumAttributeValidator.new('String', ["MOBILE", "STATIQUE"])
      unless validator.valid?(move)
        fail ArgumentError, "invalid value for \"move\", must be one of #{validator.allowable_values}."
      end
      @move = move
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DISPONIBLE", "INDISPONIBLE", "INCONNU"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] engaged_status Object to be assigned
    def engaged_status=(engaged_status)
      validator = EnumAttributeValidator.new('String', ["ALERTEE", "PARTIE", "ARRIVEE_LIEU", "TRANSPORT_DESTINATION", "ARRIVEE_DESTINATION", "FIN_MED", "QUITTE_DESTINATION", "RETOUR_DISPONIBLE", "RETOUR_INDISPONIBLE", "ARRIVEE_CENTRE"])
      unless validator.valid?(engaged_status)
        fail ArgumentError, "invalid value for \"engaged_status\", must be one of #{validator.allowable_values}."
      end
      @engaged_status = engaged_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          datetime == o.datetime &&
          reception_datetime == o.reception_datetime &&
          coord == o.coord &&
          speed == o.speed &&
          cap == o.cap &&
          move == o.move &&
          engine_on == o.engine_on &&
          ground_status == o.ground_status &&
          status == o.status &&
          engaged_status == o.engaged_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, datetime, reception_datetime, coord, speed, cap, move, engine_on, ground_status, status, engaged_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Geolocation.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
