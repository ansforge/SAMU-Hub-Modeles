/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.sas;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Practitioner
 */
@JsonPropertyOrder({Practitioner.JSON_PROPERTY_RPPS_ID,
                    Practitioner.JSON_PROPERTY_LAST_NAME,
                    Practitioner.JSON_PROPERTY_FIRST_NAME,
                    Practitioner.JSON_PROPERTY_SPECIALITY})
@JsonTypeName("practitioner")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Practitioner {
  public static final String JSON_PROPERTY_RPPS_ID = "rppsId";
  private String rppsId;

  public static final String JSON_PROPERTY_LAST_NAME = "lastName";
  private String lastName;

  public static final String JSON_PROPERTY_FIRST_NAME = "firstName";
  private List<String> firstName = new ArrayList<>();

  public static final String JSON_PROPERTY_SPECIALITY = "speciality";
  private List<String> speciality;

  public Practitioner() {}

  public Practitioner rppsId(String rppsId) {

    this.rppsId = rppsId;
    return this;
  }

  /**
   * Identifiant national (RPPS) du PS
   * @return rppsId
   **/
  @JsonProperty(JSON_PROPERTY_RPPS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRppsId() {
    return rppsId;
  }

  @JsonProperty(JSON_PROPERTY_RPPS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRppsId(String rppsId) {
    this.rppsId = rppsId;
  }

  public Practitioner lastName(String lastName) {

    this.lastName = lastName;
    return this;
  }

  /**
   * Nom du professionnel de santé
   * @return lastName
   **/
  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastName() {
    return lastName;
  }

  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public Practitioner firstName(List<String> firstName) {

    this.firstName = firstName;
    return this;
  }

  public Practitioner addFirstNameItem(String firstNameItem) {
    if (this.firstName == null) {
      this.firstName = new ArrayList<>();
    }
    this.firstName.add(firstNameItem);
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   **/
  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFirstName() {
    return firstName;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstName(List<String> firstName) {
    if (firstName == null) {
      return;
    }
    if (this.firstName == null) {
      this.firstName = new ArrayList<>();
    }
    this.firstName.addAll(firstName);
  }

  public Practitioner speciality(List<String> speciality) {

    this.speciality = speciality;
    return this;
  }

  public Practitioner addSpecialityItem(String specialityItem) {
    if (this.speciality == null) {
      this.speciality = new ArrayList<>();
    }
    this.speciality.add(specialityItem);
    return this;
  }

  /**
   * Get speciality
   * @return speciality
   **/
  @JsonProperty(JSON_PROPERTY_SPECIALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSpeciality() {
    return speciality;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_SPECIALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpeciality(List<String> speciality) {
    if (speciality == null) {
      return;
    }
    if (this.speciality == null) {
      this.speciality = new ArrayList<>();
    }
    this.speciality.addAll(speciality);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Practitioner practitioner = (Practitioner)o;
    return Objects.equals(this.rppsId, practitioner.rppsId) &&
        Objects.equals(this.lastName, practitioner.lastName) &&
        Objects.equals(this.firstName, practitioner.firstName) &&
        Objects.equals(this.speciality, practitioner.speciality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rppsId, lastName, firstName, speciality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Practitioner {\n");
    sb.append("    rppsId: ").append(toIndentedString(rppsId)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    firstName: ")
        .append(toIndentedString(firstName))
        .append("\n");
    sb.append("    speciality: ")
        .append(toIndentedString(speciality))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
