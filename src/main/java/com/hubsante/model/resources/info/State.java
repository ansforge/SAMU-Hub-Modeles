/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.resources.info;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * State
 */
@JsonPropertyOrder({State.JSON_PROPERTY_DATETIME, State.JSON_PROPERTY_STATUS,
                    State.JSON_PROPERTY_AVAILABILITY})
@JsonTypeName("state")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class State {
  public static final String JSON_PROPERTY_DATETIME = "datetime";
  private OffsetDateTime datetime;

  /**
   * A valoriser avec le statut du vecteur. Cf nomenclature associée.
   */
  public enum StatusEnum {
    DECISION("DECISION"),

    DECLENCHE("DECLENCHE"),

    DEPART("DEPART"),

    ANNULE("ANNULE"),

    ARRIVEE("ARRIVEE"),

    PEC("PEC"),

    BILAN("BILAN"),

    ORIENTAT("ORIENTAT"),

    TRANSP("TRANSP"),

    ETAPE1("ETAPE1"),

    TRANSP2("TRANSP2"),

    ETAPE2("ETAPE2"),

    TRANSP3("TRANSP3"),

    DESTIN("DESTIN"),

    FINPEC("FINPEC"),

    RETOUR("RETOUR"),

    RET_BASE("RET-BASE"),

    REN_BASE("REN-BASE");

    private String value;

    StatusEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_AVAILABILITY = "availability";
  private Boolean availability;

  public State() {}

  public State datetime(OffsetDateTime datetime) {

    this.datetime = datetime;
    return this;
  }

  /**
   * A valoriser avec la date et heure d&#39;engagement de changement vers le
   *nouveau statut
   * @return datetime
   **/
  @JsonProperty(JSON_PROPERTY_DATETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDatetime() {
    return datetime;
  }

  @JsonProperty(JSON_PROPERTY_DATETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatetime(OffsetDateTime datetime) {
    this.datetime = datetime;
  }

  public State status(StatusEnum status) {

    this.status = status;
    return this;
  }

  /**
   * A valoriser avec le statut du vecteur. Cf nomenclature associée.
   * @return status
   **/
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public State availability(Boolean availability) {

    this.availability = availability;
    return this;
  }

  /**
   * A valoriser de manière à indiquer la disponibilité du vecteur. TRUE &#x3D;
   *DISPONIBLE FALSE &#x3D; INDISPONIBLE VIDE &#x3D; INCONNU
   * @return availability
   **/
  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAvailability() {
    return availability;
  }

  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailability(Boolean availability) {
    this.availability = availability;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    State state = (State)o;
    return Objects.equals(this.datetime, state.datetime) &&
        Objects.equals(this.status, state.status) &&
        Objects.equals(this.availability, state.availability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datetime, status, availability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class State {\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    availability: ")
        .append(toIndentedString(availability))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
