/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Highway
 */
@JsonPropertyOrder({Highway.JSON_PROPERTY_NAME, Highway.JSON_PROPERTY_PK,
                    Highway.JSON_PROPERTY_DIRECTION})
@JsonTypeName("highway")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Highway {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PK = "pk";
  private String pk;

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private String direction;

  public Highway() {}

  public Highway name(String name) {

    this.name = name;
    return this;
  }

  /**
   * A valoriser avec le nom de l&#39;autoroute, de la voie ferrée ou voie
   *navigable.
   * @return name
   **/
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public Highway pk(String pk) {

    this.pk = pk;
    return this;
  }

  /**
   * A valoriser avec le point kilométrique de l&#39;autoroute, de la voie
   *ferrée ou voie navigable.
   * @return pk
   **/
  @JsonProperty(JSON_PROPERTY_PK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPk() {
    return pk;
  }

  @JsonProperty(JSON_PROPERTY_PK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPk(String pk) {
    this.pk = pk;
  }

  public Highway direction(String direction) {

    this.direction = direction;
    return this;
  }

  /**
   * A valoriser avec le sens de l&#39;autoroute.
   * @return direction
   **/
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDirection() {
    return direction;
  }

  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(String direction) {
    this.direction = direction;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Highway highway = (Highway)o;
    return Objects.equals(this.name, highway.name) &&
        Objects.equals(this.pk, highway.pk) &&
        Objects.equals(this.direction, highway.direction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pk, direction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Highway {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    direction: ")
        .append(toIndentedString(direction))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
