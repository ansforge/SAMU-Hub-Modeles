/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.Contact;
import com.hubsante.model.health.DetailedName;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Caller
 */
@JsonPropertyOrder(
    {Caller.JSON_PROPERTY_CALLER_CONTACT, Caller.JSON_PROPERTY_CALLBACK_CONTACT,
     Caller.JSON_PROPERTY_LANGUAGE, Caller.JSON_PROPERTY_TYPE,
     Caller.JSON_PROPERTY_COMMUNICATION, Caller.JSON_PROPERTY_FREETEXT,
     Caller.JSON_PROPERTY_DETAILED_NAME})
@JsonTypeName("caller")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Caller {
  public static final String JSON_PROPERTY_CALLER_CONTACT = "callerContact";
  private Contact callerContact;

  public static final String JSON_PROPERTY_CALLBACK_CONTACT = "callbackContact";
  private Contact callbackContact;

  /**
   * A valoriser avec la langue parlée par le requérant.  cf.nomenclature
   * associée.
   */
  public enum LanguageEnum {
    AA("aa"),

    AB("ab"),

    AE("ae"),

    AF("af"),

    AK("ak"),

    AM("am"),

    AN("an"),

    AR("ar"),

    AS("as"),

    AV("av"),

    AY("ay"),

    AZ("az"),

    BA("ba"),

    BE("be"),

    BG("bg"),

    BI("bi"),

    BM("bm"),

    BN("bn"),

    BO("bo"),

    BR("br"),

    BS("bs"),

    CA("ca"),

    CE("ce"),

    CH("ch"),

    CO("co"),

    CR("cr"),

    CS("cs"),

    CU("cu"),

    CV("cv"),

    CY("cy"),

    DA("da"),

    DE("de"),

    DV("dv"),

    DZ("dz"),

    EE("ee"),

    EL("el"),

    EN("en"),

    EO("eo"),

    ES("es"),

    ET("et"),

    EU("eu"),

    FA("fa"),

    FF("ff"),

    FI("fi"),

    FJ("fj"),

    FO("fo"),

    FR("fr"),

    FY("fy"),

    GA("ga"),

    GD("gd"),

    GL("gl"),

    GN("gn"),

    GU("gu"),

    GV("gv"),

    HA("ha"),

    HE("he"),

    HI("hi"),

    HO("ho"),

    HR("hr"),

    HT("ht"),

    HU("hu"),

    HY("hy"),

    HZ("hz"),

    IA("ia"),

    ID("id"),

    IE("ie"),

    IG("ig"),

    II("ii"),

    IK("ik"),

    IO("io"),

    IS("is"),

    IT("it"),

    IU("iu"),

    JA("ja"),

    JV("jv"),

    KA("ka"),

    KG("kg"),

    KI("ki"),

    KJ("kj"),

    KK("kk"),

    KL("kl"),

    KM("km"),

    KN("kn"),

    KO("ko"),

    KR("kr"),

    KS("ks"),

    KU("ku"),

    KV("kv"),

    KW("kw"),

    KY("ky"),

    LA("la"),

    LB("lb"),

    LG("lg"),

    LI("li"),

    LN("ln"),

    LO("lo"),

    LT("lt"),

    LU("lu"),

    LV("lv"),

    MG("mg"),

    MH("mh"),

    MI("mi"),

    MK("mk"),

    ML("ml"),

    MN("mn"),

    MR("mr"),

    MS("ms"),

    MT("mt"),

    MY("my"),

    NA("na"),

    NB("nb"),

    ND("nd"),

    NE("ne"),

    NG("ng"),

    NL("nl"),

    NN("nn"),

    NO("no"),

    NR("nr"),

    NV("nv"),

    NY("ny"),

    OC("oc"),

    OJ("oj"),

    OM("om"),

    OR("or"),

    OS("os"),

    PA("pa"),

    PI("pi"),

    PL("pl"),

    PS("ps"),

    PT("pt"),

    QU("qu"),

    RM("rm"),

    RN("rn"),

    RO("ro"),

    RU("ru"),

    RW("rw"),

    SA("sa"),

    SC("sc"),

    SD("sd"),

    SE("se"),

    SG("sg"),

    SI("si"),

    SK("sk"),

    SL("sl"),

    SM("sm"),

    SN("sn"),

    SO("so"),

    SQ("sq"),

    SR("sr"),

    SS("ss"),

    ST("st"),

    SU("su"),

    SV("sv"),

    SW("sw"),

    TA("ta"),

    TE("te"),

    TG("tg"),

    TH("th"),

    TI("ti"),

    TK("tk"),

    TL("tl"),

    TN("tn"),

    TO("to"),

    TR("tr"),

    TS("ts"),

    TT("tt"),

    TW("tw"),

    TY("ty"),

    UG("ug"),

    UK("uk"),

    UR("ur"),

    UZ("uz"),

    VE("ve"),

    VI("vi"),

    VO("vo"),

    WA("wa"),

    WO("wo"),

    XH("xh"),

    YI("yi"),

    YO("yo"),

    ZA("za"),

    ZH("zh"),

    ZU("zu");

    private String value;

    LanguageEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private LanguageEnum language;

  /**
   * A valoriser avec la relation du requérant avec l&#39;incident / le patient
   * / la victime. cf. nomenclature associée.
   */
  public enum TypeEnum {
    SUJET("SUJET"),

    FAMILLE("FAMILLE"),

    TIERS("TIERS"),

    POMPIER("POMPIER"),

    AMBULANC("AMBULANC"),

    AMBULANC_AASC("AMBULANC.AASC"),

    AMBULANC_AUTRESEC("AMBULANC.AUTRESEC"),

    SECOUR("SECOUR"),

    MED("MED"),

    MED_MEDSOS("MED.MEDSOS"),

    MED_MRL("MED.MRL"),

    MED_EFFML("MED.EFFML"),

    SANTE("SANTE"),

    SANTE_INF("SANTE.INF"),

    SANTE_AIDESOIN("SANTE.AIDESOIN"),

    SANTE_SF("SANTE.SF"),

    SANTE_AIDEDOM("SANTE.AIDEDOM"),

    SANTE_PHARMA("SANTE.PHARMA"),

    SANTE_DENTISTE("SANTE.DENTISTE"),

    SANTE_LABO("SANTE.LABO"),

    FDO_MILI("FDO-MILI"),

    FDO_MILI_POL("FDO-MILI.POL"),

    FDO_MILI_GENDARM("FDO-MILI.GENDARM"),

    FDO_MILI_MILI("FDO-MILI.MILI"),

    ADM_TUTL("ADM-TUTL"),

    VIP("VIP"),

    OBJCONNC("OBJCONNC"),

    AUTRE("AUTRE"),

    INCONNU("INCONNU");

    private String value;

    TypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * A valoriser avec la nature des éventuelles difficultés de communication
   * rencontrées par le requérant.  cf.nomenclature associée.
   */
  public enum CommunicationEnum {
    AUCUNE("AUCUNE"),

    MUET("MUET"),

    VISION("VISION"),

    LANGUE("LANGUE"),

    PANIQUE("PANIQUE"),

    HOSTILE("HOSTILE"),

    AGITE("AGITE"),

    AUTRE("AUTRE"),

    IMPOSS("IMPOSS");

    private String value;

    CommunicationEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CommunicationEnum fromValue(String value) {
      for (CommunicationEnum b : CommunicationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COMMUNICATION = "communication";
  private CommunicationEnum communication;

  public static final String JSON_PROPERTY_FREETEXT = "freetext";
  private String freetext;

  public static final String JSON_PROPERTY_DETAILED_NAME = "detailedName";
  private DetailedName detailedName;

  public Caller() {}

  public Caller callerContact(Contact callerContact) {

    this.callerContact = callerContact;
    return this;
  }

  /**
   * Get callerContact
   * @return callerContact
   **/
  @JsonProperty(JSON_PROPERTY_CALLER_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Contact getCallerContact() {
    return callerContact;
  }

  @JsonProperty(JSON_PROPERTY_CALLER_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallerContact(Contact callerContact) {
    this.callerContact = callerContact;
  }

  public Caller callbackContact(Contact callbackContact) {

    this.callbackContact = callbackContact;
    return this;
  }

  /**
   * Get callbackContact
   * @return callbackContact
   **/
  @JsonProperty(JSON_PROPERTY_CALLBACK_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Contact getCallbackContact() {
    return callbackContact;
  }

  @JsonProperty(JSON_PROPERTY_CALLBACK_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallbackContact(Contact callbackContact) {
    this.callbackContact = callbackContact;
  }

  public Caller language(LanguageEnum language) {

    this.language = language;
    return this;
  }

  /**
   * A valoriser avec la langue parlée par le requérant.  cf.nomenclature
   *associée.
   * @return language
   **/
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LanguageEnum getLanguage() {
    return language;
  }

  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public Caller type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * A valoriser avec la relation du requérant avec l&#39;incident / le patient
   * / la victime. cf. nomenclature associée.
   * @return type
   **/
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Caller communication(CommunicationEnum communication) {

    this.communication = communication;
    return this;
  }

  /**
   * A valoriser avec la nature des éventuelles difficultés de communication
   *rencontrées par le requérant.  cf.nomenclature associée.
   * @return communication
   **/
  @JsonProperty(JSON_PROPERTY_COMMUNICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommunicationEnum getCommunication() {
    return communication;
  }

  @JsonProperty(JSON_PROPERTY_COMMUNICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommunication(CommunicationEnum communication) {
    this.communication = communication;
  }

  public Caller freetext(String freetext) {

    this.freetext = freetext;
    return this;
  }

  /**
   * Champ libre qui permet de compléter les informations spécifiquement liées
   *au requérant.
   * @return freetext
   **/
  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFreetext() {
    return freetext;
  }

  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreetext(String freetext) {
    this.freetext = freetext;
  }

  public Caller detailedName(DetailedName detailedName) {

    this.detailedName = detailedName;
    return this;
  }

  /**
   * Get detailedName
   * @return detailedName
   **/
  @JsonProperty(JSON_PROPERTY_DETAILED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DetailedName getDetailedName() {
    return detailedName;
  }

  @JsonProperty(JSON_PROPERTY_DETAILED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetailedName(DetailedName detailedName) {
    this.detailedName = detailedName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Caller caller = (Caller)o;
    return Objects.equals(this.callerContact, caller.callerContact) &&
        Objects.equals(this.callbackContact, caller.callbackContact) &&
        Objects.equals(this.language, caller.language) &&
        Objects.equals(this.type, caller.type) &&
        Objects.equals(this.communication, caller.communication) &&
        Objects.equals(this.freetext, caller.freetext) &&
        Objects.equals(this.detailedName, caller.detailedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerContact, callbackContact, language, type,
                        communication, freetext, detailedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Caller {\n");
    sb.append("    callerContact: ")
        .append(toIndentedString(callerContact))
        .append("\n");
    sb.append("    callbackContact: ")
        .append(toIndentedString(callbackContact))
        .append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    communication: ")
        .append(toIndentedString(communication))
        .append("\n");
    sb.append("    freetext: ").append(toIndentedString(freetext)).append("\n");
    sb.append("    detailedName: ")
        .append(toIndentedString(detailedName))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
