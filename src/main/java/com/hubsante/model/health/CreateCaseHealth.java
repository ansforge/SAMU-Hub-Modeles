/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.AdditionalInformation;
import com.hubsante.model.health.Alert;
import com.hubsante.model.health.Decision;
import com.hubsante.model.health.Location;
import com.hubsante.model.health.MedicalNote;
import com.hubsante.model.health.Operator;
import com.hubsante.model.health.Patient;
import com.hubsante.model.health.Qualification;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * CreateCaseHealth
 */
@JsonPropertyOrder({CreateCaseHealth.JSON_PROPERTY_CASE_ID,
                    CreateCaseHealth.JSON_PROPERTY_SENDER_CASE_ID,
                    CreateCaseHealth.JSON_PROPERTY_CREATION,
                    CreateCaseHealth.JSON_PROPERTY_REFERENCE_VERSION,
                    CreateCaseHealth.JSON_PROPERTY_QUALIFICATION,
                    CreateCaseHealth.JSON_PROPERTY_LOCATION,
                    CreateCaseHealth.JSON_PROPERTY_INITIAL_ALERT,
                    CreateCaseHealth.JSON_PROPERTY_OWNER,
                    CreateCaseHealth.JSON_PROPERTY_OPERATOR,
                    CreateCaseHealth.JSON_PROPERTY_PATIENT,
                    CreateCaseHealth.JSON_PROPERTY_MEDICAL_NOTE,
                    CreateCaseHealth.JSON_PROPERTY_DECISION,
                    CreateCaseHealth.JSON_PROPERTY_NEW_ALERT,
                    CreateCaseHealth.JSON_PROPERTY_ADDITIONAL_INFORMATION,
                    CreateCaseHealth.JSON_PROPERTY_FREETEXT})
@JsonTypeName("createCaseHealth")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class CreateCaseHealth {
  @JacksonXmlProperty(isAttribute = true)
  String xmlns = "urn:emergency:cisu:2.0:createCaseHealth";
  public static final String JSON_PROPERTY_CASE_ID = "caseId";
  private String caseId;

  public static final String JSON_PROPERTY_SENDER_CASE_ID = "senderCaseId";
  private String senderCaseId;

  public static final String JSON_PROPERTY_CREATION = "creation";
  private OffsetDateTime creation;

  public static final String JSON_PROPERTY_REFERENCE_VERSION =
      "referenceVersion";
  private String referenceVersion;

  public static final String JSON_PROPERTY_QUALIFICATION = "qualification";
  private Qualification qualification;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private Location location;

  public static final String JSON_PROPERTY_INITIAL_ALERT = "initialAlert";
  private Alert initialAlert;

  public static final String JSON_PROPERTY_OWNER = "owner";
  private String owner;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private List<Operator> operator;

  public static final String JSON_PROPERTY_PATIENT = "patient";
  private List<Patient> patient;

  public static final String JSON_PROPERTY_MEDICAL_NOTE = "medicalNote";
  private List<MedicalNote> medicalNote;

  public static final String JSON_PROPERTY_DECISION = "decision";
  private List<Decision> decision;

  public static final String JSON_PROPERTY_NEW_ALERT = "newAlert";
  private List<Alert> newAlert;

  public static final String JSON_PROPERTY_ADDITIONAL_INFORMATION =
      "additionalInformation";
  private AdditionalInformation additionalInformation;

  public static final String JSON_PROPERTY_FREETEXT = "freetext";
  private List<String> freetext;

  public CreateCaseHealth() {}

  public CreateCaseHealth caseId(String caseId) {

    this.caseId = caseId;
    return this;
  }

  /**
   * Identifiant de l&#39;affaire partagé entre tous les intervenants &#x3D; aux
   *champs {organization}.{senderCaseId}. Il doit pouvoir être généré de façon
   *unique et décentralisée et ne présenter aucune ambiguïté.  Il est généré par
   *le système du partenaire récepteur de la primo-demande de secours (créateur
   *du dossier). Valorisation : {pays}.{domaine}.{organisation}.{structure
   *interne}*.{unité fonctionnelle}*.{numéro de dossier}
   * @return caseId
   **/
  @JsonProperty(JSON_PROPERTY_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCaseId() {
    return caseId;
  }

  @JsonProperty(JSON_PROPERTY_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCaseId(String caseId) {
    this.caseId = caseId;
  }

  public CreateCaseHealth senderCaseId(String senderCaseId) {

    this.senderCaseId = senderCaseId;
    return this;
  }

  /**
   * Valoriser avec le numéro du dossier dans le SI de l&#39;émetteur du
   *message.  Ce champ est facultatif, il ne sera notamment pas transmis par
   *NexSIS.
   * @return senderCaseId
   **/
  @JsonProperty(JSON_PROPERTY_SENDER_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSenderCaseId() {
    return senderCaseId;
  }

  @JsonProperty(JSON_PROPERTY_SENDER_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSenderCaseId(String senderCaseId) {
    this.senderCaseId = senderCaseId;
  }

  public CreateCaseHealth creation(OffsetDateTime creation) {

    this.creation = creation;
    return this;
  }

  /**
   * Groupe date heure de début de partage lié à la création de l&#39;affaire
   *(et donc de génération du caseId). Il doit être renseigné à la fin du
   *processus de la  création  de la première alerte. Lors de l&#39;ajout
   *d&#39;alerte à une affaire ce champ ne doit pas être modifié.
   *L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
   * @return creation
   **/
  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreation() {
    return creation;
  }

  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreation(OffsetDateTime creation) {
    this.creation = creation;
  }

  public CreateCaseHealth referenceVersion(String referenceVersion) {

    this.referenceVersion = referenceVersion;
    return this;
  }

  /**
   * Indique le numéro de version du référentiel des nomenclatures des codes
   *transmis.  Cela permet aux différents systèmes de s&#39;assurer qu&#39;ils
   *utilisent la même version des codes de nomenclature que leurs partenaires.
   * @return referenceVersion
   **/
  @JsonProperty(JSON_PROPERTY_REFERENCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReferenceVersion() {
    return referenceVersion;
  }

  @JsonProperty(JSON_PROPERTY_REFERENCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferenceVersion(String referenceVersion) {
    this.referenceVersion = referenceVersion;
  }

  public CreateCaseHealth qualification(Qualification qualification) {

    this.qualification = qualification;
    return this;
  }

  /**
   * Get qualification
   * @return qualification
   **/
  @JsonProperty(JSON_PROPERTY_QUALIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Qualification getQualification() {
    return qualification;
  }

  @JsonProperty(JSON_PROPERTY_QUALIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQualification(Qualification qualification) {
    this.qualification = qualification;
  }

  public CreateCaseHealth location(Location location) {

    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   **/
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Location getLocation() {
    return location;
  }

  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocation(Location location) {
    this.location = location;
  }

  public CreateCaseHealth initialAlert(Alert initialAlert) {

    this.initialAlert = initialAlert;
    return this;
  }

  /**
   * Get initialAlert
   * @return initialAlert
   **/
  @JsonProperty(JSON_PROPERTY_INITIAL_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Alert getInitialAlert() {
    return initialAlert;
  }

  @JsonProperty(JSON_PROPERTY_INITIAL_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitialAlert(Alert initialAlert) {
    this.initialAlert = initialAlert;
  }

  public CreateCaseHealth owner(String owner) {

    this.owner = owner;
    return this;
  }

  /**
   * Champ servant à transférer la responsabilité du traitement d&#39;un dossier
   *à un autre CRAA / à lui demander de prendre en charge le traitement du
   *dossier. Le SAMU demandeur entre dans ce champ l&#39;ID du CRAA à qui il
   *demande de traiter l&#39;affaire (uniquement en cas de transfert intégral du
   *traitement d&#39;un dossier). Le SAMU qui reçoit la demande de transfert et
   *l&#39;accepte renvoie un RC-EDA de mise à jour en laissant son ID dans ce
   *champ + en ajoutant l&#39;ID local du dossier chez lui dans le message. Le
   *SAMU qui reçoit la demande de transfert et la refuse renvoie un RC-EDA de
   *mise à jour en remettant l&#39;ID du SAMU demandeur dans ce champ + il
   *envoie l&#39;ID local du dossier chez lui.
   * @return owner
   **/
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwner() {
    return owner;
  }

  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwner(String owner) {
    this.owner = owner;
  }

  public CreateCaseHealth operator(List<Operator> operator) {

    this.operator = operator;
    return this;
  }

  public CreateCaseHealth addOperatorItem(Operator operatorItem) {
    if (this.operator == null) {
      this.operator = new ArrayList<>();
    }
    this.operator.add(operatorItem);
    return this;
  }

  /**
   * Get operator
   * @return operator
   **/
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Operator> getOperator() {
    return operator;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(List<Operator> operator) {
    if (operator == null) {
      return;
    }
    if (this.operator == null) {
      this.operator = new ArrayList<>();
    }
    this.operator.addAll(operator);
  }

  public CreateCaseHealth patient(List<Patient> patient) {

    this.patient = patient;
    return this;
  }

  public CreateCaseHealth addPatientItem(Patient patientItem) {
    if (this.patient == null) {
      this.patient = new ArrayList<>();
    }
    this.patient.add(patientItem);
    return this;
  }

  /**
   * Get patient
   * @return patient
   **/
  @JsonProperty(JSON_PROPERTY_PATIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Patient> getPatient() {
    return patient;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_PATIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatient(List<Patient> patient) {
    if (patient == null) {
      return;
    }
    if (this.patient == null) {
      this.patient = new ArrayList<>();
    }
    this.patient.addAll(patient);
  }

  public CreateCaseHealth medicalNote(List<MedicalNote> medicalNote) {

    this.medicalNote = medicalNote;
    return this;
  }

  public CreateCaseHealth addMedicalNoteItem(MedicalNote medicalNoteItem) {
    if (this.medicalNote == null) {
      this.medicalNote = new ArrayList<>();
    }
    this.medicalNote.add(medicalNoteItem);
    return this;
  }

  /**
   * Get medicalNote
   * @return medicalNote
   **/
  @JsonProperty(JSON_PROPERTY_MEDICAL_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MedicalNote> getMedicalNote() {
    return medicalNote;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_MEDICAL_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedicalNote(List<MedicalNote> medicalNote) {
    if (medicalNote == null) {
      return;
    }
    if (this.medicalNote == null) {
      this.medicalNote = new ArrayList<>();
    }
    this.medicalNote.addAll(medicalNote);
  }

  public CreateCaseHealth decision(List<Decision> decision) {

    this.decision = decision;
    return this;
  }

  public CreateCaseHealth addDecisionItem(Decision decisionItem) {
    if (this.decision == null) {
      this.decision = new ArrayList<>();
    }
    this.decision.add(decisionItem);
    return this;
  }

  /**
   * Get decision
   * @return decision
   **/
  @JsonProperty(JSON_PROPERTY_DECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Decision> getDecision() {
    return decision;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_DECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecision(List<Decision> decision) {
    if (decision == null) {
      return;
    }
    if (this.decision == null) {
      this.decision = new ArrayList<>();
    }
    this.decision.addAll(decision);
  }

  public CreateCaseHealth newAlert(List<Alert> newAlert) {

    this.newAlert = newAlert;
    return this;
  }

  public CreateCaseHealth addNewAlertItem(Alert newAlertItem) {
    if (this.newAlert == null) {
      this.newAlert = new ArrayList<>();
    }
    this.newAlert.add(newAlertItem);
    return this;
  }

  /**
   * Get newAlert
   * @return newAlert
   **/
  @JsonProperty(JSON_PROPERTY_NEW_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Alert> getNewAlert() {
    return newAlert;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_NEW_ALERT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewAlert(List<Alert> newAlert) {
    if (newAlert == null) {
      return;
    }
    if (this.newAlert == null) {
      this.newAlert = new ArrayList<>();
    }
    this.newAlert.addAll(newAlert);
  }

  public CreateCaseHealth
  additionalInformation(AdditionalInformation additionalInformation) {

    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Get additionalInformation
   * @return additionalInformation
   **/
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AdditionalInformation getAdditionalInformation() {
    return additionalInformation;
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void
  setAdditionalInformation(AdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
  }

  public CreateCaseHealth freetext(List<String> freetext) {

    this.freetext = freetext;
    return this;
  }

  public CreateCaseHealth addFreetextItem(String freetextItem) {
    if (this.freetext == null) {
      this.freetext = new ArrayList<>();
    }
    this.freetext.add(freetextItem);
    return this;
  }

  /**
   * Get freetext
   * @return freetext
   **/
  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFreetext() {
    return freetext;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreetext(List<String> freetext) {
    if (freetext == null) {
      return;
    }
    if (this.freetext == null) {
      this.freetext = new ArrayList<>();
    }
    this.freetext.addAll(freetext);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCaseHealth createCaseHealth = (CreateCaseHealth)o;
    return Objects.equals(this.caseId, createCaseHealth.caseId) &&
        Objects.equals(this.senderCaseId, createCaseHealth.senderCaseId) &&
        Objects.equals(this.creation, createCaseHealth.creation) &&
        Objects.equals(this.referenceVersion,
                       createCaseHealth.referenceVersion) &&
        Objects.equals(this.qualification, createCaseHealth.qualification) &&
        Objects.equals(this.location, createCaseHealth.location) &&
        Objects.equals(this.initialAlert, createCaseHealth.initialAlert) &&
        Objects.equals(this.owner, createCaseHealth.owner) &&
        Objects.equals(this.operator, createCaseHealth.operator) &&
        Objects.equals(this.patient, createCaseHealth.patient) &&
        Objects.equals(this.medicalNote, createCaseHealth.medicalNote) &&
        Objects.equals(this.decision, createCaseHealth.decision) &&
        Objects.equals(this.newAlert, createCaseHealth.newAlert) &&
        Objects.equals(this.additionalInformation,
                       createCaseHealth.additionalInformation) &&
        Objects.equals(this.freetext, createCaseHealth.freetext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseId, senderCaseId, creation, referenceVersion,
                        qualification, location, initialAlert, owner, operator,
                        patient, medicalNote, decision, newAlert,
                        additionalInformation, freetext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCaseHealth {\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    senderCaseId: ")
        .append(toIndentedString(senderCaseId))
        .append("\n");
    sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
    sb.append("    referenceVersion: ")
        .append(toIndentedString(referenceVersion))
        .append("\n");
    sb.append("    qualification: ")
        .append(toIndentedString(qualification))
        .append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    initialAlert: ")
        .append(toIndentedString(initialAlert))
        .append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    medicalNote: ")
        .append(toIndentedString(medicalNote))
        .append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    newAlert: ").append(toIndentedString(newAlert)).append("\n");
    sb.append("    additionalInformation: ")
        .append(toIndentedString(additionalInformation))
        .append("\n");
    sb.append("    freetext: ").append(toIndentedString(freetext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
