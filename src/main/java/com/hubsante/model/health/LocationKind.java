/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * LocationKind
 */
@JsonPropertyOrder(
    {LocationKind.JSON_PROPERTY_CODE, LocationKind.JSON_PROPERTY_LABEL})
@JsonTypeName("locationKind")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class LocationKind {

  /**
   * A valoriser avec le code de la nomenclature associée
   */
  public enum CodeEnum {
    L01_00_00("L01.00.00"),

    L01_01_00("L01.01.00"),

    L01_01_01("L01.01.01"),

    L01_01_02("L01.01.02"),

    L01_01_03("L01.01.03"),

    L01_01_04("L01.01.04"),

    L01_02_00("L01.02.00"),

    L01_02_01("L01.02.01"),

    L01_02_02("L01.02.02"),

    L01_02_03("L01.02.03"),

    L01_02_04("L01.02.04"),

    L01_02_05("L01.02.05"),

    L01_02_06("L01.02.06"),

    L01_02_07("L01.02.07"),

    L01_02_08("L01.02.08"),

    L01_02_09("L01.02.09"),

    L01_02_10("L01.02.10"),

    L01_02_11("L01.02.11"),

    L01_02_12("L01.02.12"),

    L01_03_00("L01.03.00"),

    L01_03_01("L01.03.01"),

    L01_03_02("L01.03.02"),

    L01_03_03("L01.03.03"),

    L01_04_00("L01.04.00"),

    L02_00_00("L02.00.00"),

    L02_01_00("L02.01.00"),

    L02_02_00("L02.02.00"),

    L02_02_01("L02.02.01"),

    L02_02_02("L02.02.02"),

    L02_02_03("L02.02.03"),

    L02_02_04("L02.02.04"),

    L02_02_05("L02.02.05"),

    L02_03_00("L02.03.00"),

    L02_03_01("L02.03.01"),

    L02_03_02("L02.03.02"),

    L02_03_03("L02.03.03"),

    L02_04_00("L02.04.00"),

    L02_05_00("L02.05.00"),

    L02_05_01("L02.05.01"),

    L02_05_02("L02.05.02"),

    L02_05_03("L02.05.03"),

    L02_05_04("L02.05.04"),

    L02_05_05("L02.05.05"),

    L02_05_06("L02.05.06"),

    L02_05_07("L02.05.07"),

    L02_05_08("L02.05.08"),

    L02_05_09("L02.05.09"),

    L02_05_10("L02.05.10"),

    L02_05_11("L02.05.11"),

    L02_05_12("L02.05.12"),

    L02_05_13("L02.05.13"),

    L02_05_14("L02.05.14"),

    L02_05_15("L02.05.15"),

    L02_05_16("L02.05.16"),

    L02_06_00("L02.06.00"),

    L02_06_01("L02.06.01"),

    L02_06_02("L02.06.02"),

    L02_06_03("L02.06.03"),

    L02_06_04("L02.06.04"),

    L02_06_05("L02.06.05"),

    L02_06_06("L02.06.06"),

    L02_06_07("L02.06.07"),

    L02_06_08("L02.06.08"),

    L02_07_00("L02.07.00"),

    L02_07_01("L02.07.01"),

    L02_07_02("L02.07.02"),

    L02_08_00("L02.08.00"),

    L03_00_00("L03.00.00"),

    L03_01_00("L03.01.00"),

    L03_02_00("L03.02.00"),

    L03_03_00("L03.03.00"),

    L03_04_00("L03.04.00"),

    L03_05_00("L03.05.00"),

    L04_00_00("L04.00.00"),

    L04_01_00("L04.01.00"),

    L04_02_00("L04.02.00"),

    L04_02_01("L04.02.01"),

    L04_02_02("L04.02.02"),

    L04_02_03("L04.02.03"),

    L04_03_00("L04.03.00"),

    L04_03_01("L04.03.01"),

    L04_03_02("L04.03.02"),

    L04_03_03("L04.03.03"),

    L04_04_00("L04.04.00"),

    L04_05_00("L04.05.00"),

    L04_06_00("L04.06.00"),

    L04_06_01("L04.06.01"),

    L04_06_02("L04.06.02"),

    L04_06_03("L04.06.03"),

    L04_06_04("L04.06.04"),

    L04_06_05("L04.06.05"),

    L04_07_00("L04.07.00"),

    L04_07_01("L04.07.01"),

    L04_07_02("L04.07.02"),

    L04_07_03("L04.07.03"),

    L04_08_00("L04.08.00"),

    L04_08_01("L04.08.01"),

    L04_08_02("L04.08.02"),

    L04_09_00("L04.09.00"),

    L04_09_01("L04.09.01"),

    L04_09_02("L04.09.02"),

    L04_10_00("L04.10.00"),

    L04_11_00("L04.11.00"),

    L04_11_01("L04.11.01"),

    L04_11_02("L04.11.02"),

    L04_11_03("L04.11.03"),

    L04_11_04("L04.11.04"),

    L04_12_00("L04.12.00"),

    L04_12_01("L04.12.01"),

    L04_12_02("L04.12.02"),

    L04_12_03("L04.12.03"),

    L04_12_04("L04.12.04"),

    L04_13_00("L04.13.00"),

    L04_13_01("L04.13.01"),

    L04_13_02("L04.13.02"),

    L04_13_03("L04.13.03"),

    L04_13_04("L04.13.04"),

    L04_14_00("L04.14.00"),

    L04_14_01("L04.14.01"),

    L04_14_02("L04.14.02"),

    L04_15_00("L04.15.00"),

    L04_16_00("L04.16.00"),

    L05_00_00("L05.00.00"),

    L05_01_00("L05.01.00"),

    L05_01_01("L05.01.01"),

    L05_01_02("L05.01.02"),

    L05_01_03("L05.01.03"),

    L05_01_04("L05.01.04"),

    L05_02_00("L05.02.00"),

    L05_02_01("L05.02.01"),

    L05_02_02("L05.02.02"),

    L05_02_03("L05.02.03"),

    L05_02_04("L05.02.04"),

    L05_03_00("L05.03.00"),

    L05_03_01("L05.03.01"),

    L05_03_02("L05.03.02"),

    L05_04_00("L05.04.00"),

    L05_04_01("L05.04.01"),

    L05_04_02("L05.04.02"),

    L05_04_03("L05.04.03"),

    L05_04_04("L05.04.04"),

    L05_04_05("L05.04.05"),

    L05_04_06("L05.04.06"),

    L05_05_00("L05.05.00"),

    L05_06_00("L05.06.00"),

    L05_07_00("L05.07.00"),

    L06_00_00("L06.00.00"),

    L06_01_00("L06.01.00"),

    L06_01_01("L06.01.01"),

    L06_01_02("L06.01.02"),

    L06_01_03("L06.01.03"),

    L06_01_04("L06.01.04"),

    L06_01_05("L06.01.05"),

    L06_01_06("L06.01.06"),

    L06_01_07("L06.01.07"),

    L06_01_08("L06.01.08"),

    L06_02_00("L06.02.00"),

    L06_03_00("L06.03.00"),

    L06_03_01("L06.03.01"),

    L06_03_02("L06.03.02"),

    L06_03_03("L06.03.03"),

    L06_03_04("L06.03.04"),

    L06_03_05("L06.03.05"),

    L06_04_00("L06.04.00"),

    L06_05_00("L06.05.00"),

    L06_05_01("L06.05.01"),

    L06_05_02("L06.05.02"),

    L06_06_00("L06.06.00"),

    L06_06_01("L06.06.01"),

    L06_06_02("L06.06.02"),

    L06_06_03("L06.06.03"),

    L06_06_04("L06.06.04"),

    L06_07_00("L06.07.00"),

    L06_07_01("L06.07.01"),

    L06_07_02("L06.07.02"),

    L07_00_00("L07.00.00"),

    L07_01_00("L07.01.00"),

    L07_01_01("L07.01.01"),

    L07_02_00("L07.02.00");

    private String value;

    CodeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODE = "code";
  private CodeEnum code;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public LocationKind() {}

  public LocationKind code(CodeEnum code) {

    this.code = code;
    return this;
  }

  /**
   * A valoriser avec le code de la nomenclature associée
   * @return code
   **/
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CodeEnum getCode() {
    return code;
  }

  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(CodeEnum code) {
    this.code = code;
  }

  public LocationKind label(String label) {

    this.label = label;
    return this;
  }

  /**
   * A valoriser avec le libellé de la nomenclature associée. Dans le cas où un
   *système n&#39;est pas en mesure de reconnaître un code, il peut choisir
   *d&#39;afficher le libellé qui est obligatoirement fourni avec le code.
   * @return label
   **/
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }

  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationKind locationKind = (LocationKind)o;
    return Objects.equals(this.code, locationKind.code) &&
        Objects.equals(this.label, locationKind.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, label);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationKind {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
