/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health.update;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.update.Destination;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * DecisionDetails
 */
@JsonPropertyOrder({DecisionDetails.JSON_PROPERTY_CATEGORY_TYPE,
                    DecisionDetails.JSON_PROPERTY_RESOURCE_TYPE,
                    DecisionDetails.JSON_PROPERTY_TEAM_CARE_INITIAL,
                    DecisionDetails.JSON_PROPERTY_DESTINATION})
@JsonTypeName("decisionDetails")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class DecisionDetails {

  /**
   * A valoriser avec le type de ressource souhaité / demandé (cf.nomenclature
   * associée)
   */
  public enum CategoryTypeEnum {
    SMUR("SMUR"),

    HOSPIT("HOSPIT"),

    LIB("LIB"),

    TSU_("TSU "),

    SIS("SIS"),

    AASC("AASC"),

    FDO("FDO"),

    AUTRE("AUTRE");

    private String value;

    CategoryTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryTypeEnum fromValue(String value) {
      for (CategoryTypeEnum b : CategoryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY_TYPE = "categoryType";
  private CategoryTypeEnum categoryType;

  /**
   * A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature
   * associée).
   */
  public enum ResourceTypeEnum {
    AASC("AASC"),

    VLSC("VLSC"),

    VPSP("VPSP"),

    AUTRESC("AUTRESC"),

    AUTREVEC("AUTREVEC"),

    TAXI("TAXI"),

    TRANSP("TRANSP"),

    TRAIN("TRAIN"),

    AVION("AVION"),

    PERSO("PERSO"),

    APIED("APIED"),

    AUTRE("AUTRE"),

    AUTRETRA("AUTRETRA"),

    FSI("FSI"),

    HELIFSI("HELIFSI"),

    VLFSI("VLFSI"),

    FFSI("FFSI"),

    VHFSI("VHFSI"),

    LIB("LIB"),

    MEDV("MEDV"),

    INF("INF"),

    AUTREPRO("AUTREPRO"),

    SIS("SIS"),

    VSAV("VSAV"),

    GRIMP("GRIMP"),

    VPL("VPL"),

    SRSIS("SRSIS"),

    FEUSIS("FEUSIS"),

    VPMA("VPMA"),

    VCH("VCH"),

    VR("VR"),

    PCSIS("PCSIS"),

    VLISP("VLISP"),

    VLMSP("VLMSP"),

    VLCG("VLCG"),

    VLSIS("VLSIS"),

    DRAGON("DRAGON"),

    AVSC("AVSC"),

    MOYSSE("MOYSSE"),

    AUTRESIS("AUTRESIS"),

    NAVISIS("NAVISIS"),

    SMUR("SMUR"),

    VLM("VLM"),

    VL("VL"),

    PSM1("PSM1"),

    PSM2("PSM2"),

    PSM3("PSM3"),

    PSMP("PSMP"),

    VPC("VPC"),

    AR("AR"),

    AR_BAR("AR-BAR"),

    AR_PED("AR-PED"),

    HELISMUR("HELISMUR"),

    HELISAN("HELISAN"),

    AVSMUR("AVSMUR"),

    AVSAN("AVSAN"),

    NAVISMUR("NAVISMUR"),

    TSU("TSU"),

    VSL("VSL"),

    AMB_GV("AMB-GV"),

    AMB_PV("AMB-PV"),

    AMB_BAR("AMB-BAR"),

    AMB("AMB");

    private String value;

    ResourceTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  private ResourceTypeEnum resourceType;

  /**
   * A valoriser avec le niveau de prise en charge souhaité (cf.nomenclature
   * associée)
   */
  public enum TeamCareInitialEnum {
    MED("MED"),

    PARAMED("PARAMED"),

    SECOURS("SECOURS");

    private String value;

    TeamCareInitialEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TeamCareInitialEnum fromValue(String value) {
      for (TeamCareInitialEnum b : TeamCareInitialEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TEAM_CARE_INITIAL =
      "teamCareInitial";
  private TeamCareInitialEnum teamCareInitial;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private Destination destination;

  public DecisionDetails() {}

  public DecisionDetails categoryType(CategoryTypeEnum categoryType) {

    this.categoryType = categoryType;
    return this;
  }

  /**
   * A valoriser avec le type de ressource souhaité / demandé (cf.nomenclature
   *associée)
   * @return categoryType
   **/
  @JsonProperty(JSON_PROPERTY_CATEGORY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CategoryTypeEnum getCategoryType() {
    return categoryType;
  }

  @JsonProperty(JSON_PROPERTY_CATEGORY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategoryType(CategoryTypeEnum categoryType) {
    this.categoryType = categoryType;
  }

  public DecisionDetails resourceType(ResourceTypeEnum resourceType) {

    this.resourceType = resourceType;
    return this;
  }

  /**
   * A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature
   *associée).
   * @return resourceType
   **/
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

  public DecisionDetails teamCareInitial(TeamCareInitialEnum teamCareInitial) {

    this.teamCareInitial = teamCareInitial;
    return this;
  }

  /**
   * A valoriser avec le niveau de prise en charge souhaité (cf.nomenclature
   *associée)
   * @return teamCareInitial
   **/
  @JsonProperty(JSON_PROPERTY_TEAM_CARE_INITIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TeamCareInitialEnum getTeamCareInitial() {
    return teamCareInitial;
  }

  @JsonProperty(JSON_PROPERTY_TEAM_CARE_INITIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamCareInitial(TeamCareInitialEnum teamCareInitial) {
    this.teamCareInitial = teamCareInitial;
  }

  public DecisionDetails destination(Destination destination) {

    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Destination getDestination() {
    return destination;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(Destination destination) {
    this.destination = destination;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecisionDetails decisionDetails = (DecisionDetails)o;
    return Objects.equals(this.categoryType, decisionDetails.categoryType) &&
        Objects.equals(this.resourceType, decisionDetails.resourceType) &&
        Objects.equals(this.teamCareInitial, decisionDetails.teamCareInitial) &&
        Objects.equals(this.destination, decisionDetails.destination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryType, resourceType, teamCareInitial,
                        destination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecisionDetails {\n");
    sb.append("    categoryType: ")
        .append(toIndentedString(categoryType))
        .append("\n");
    sb.append("    resourceType: ")
        .append(toIndentedString(resourceType))
        .append("\n");
    sb.append("    teamCareInitial: ")
        .append(toIndentedString(teamCareInitial))
        .append("\n");
    sb.append("    destination: ")
        .append(toIndentedString(destination))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
