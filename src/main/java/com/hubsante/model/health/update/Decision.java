/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health.update;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.update.DecisionDetails;
import com.hubsante.model.health.update.Operator;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Decision
 */
@JsonPropertyOrder(
    {Decision.JSON_PROPERTY_ID_PAT, Decision.JSON_PROPERTY_PATIENT_STATUS,
     Decision.JSON_PROPERTY_CREATION, Decision.JSON_PROPERTY_TYPE,
     Decision.JSON_PROPERTY_OPERATOR, Decision.JSON_PROPERTY_ENGAGEMENT_DETAILS,
     Decision.JSON_PROPERTY_TRANSPORT_DETAILS})
@JsonTypeName("decision")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Decision {
  public static final String JSON_PROPERTY_ID_PAT = "idPat";
  private String idPat;

  /**
   * A valoriser avec le type de devenir du patient (cf. nomenclature associée)
   */
  public enum PatientStatusEnum {
    OK("OK"),

    TEMP("TEMP"),

    SEUL("SEUL"),

    AFAMILLE("AFAMILLE"),

    AMED("AMED"),

    AFDO("AFDO"),

    ATIERS("ATIERS"),

    MOYPERSO("MOYPERSO"),

    VECTEUR("VECTEUR"),

    REFPAT("REFPAT"),

    REFFAM("REFFAM"),

    PASREAKO("PASREAKO"),

    PASREAOK("PASREAOK"),

    REA("REA"),

    TRANSPOR("TRANSPOR"),

    ADM("ADM"),

    FUGUE("FUGUE"),

    REFAUTRE("REFAUTRE"),

    RAS("RAS");

    private String value;

    PatientStatusEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PatientStatusEnum fromValue(String value) {
      for (PatientStatusEnum b : PatientStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PATIENT_STATUS = "patientStatus";
  private PatientStatusEnum patientStatus;

  public static final String JSON_PROPERTY_CREATION = "creation";
  private OffsetDateTime creation;

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   */
  public enum TypeEnum {
    CONSEIL("CONSEIL"),

    PMT("PMT"),

    INTER("INTER"),

    ORIENT("ORIENT"),

    PASPLUS("PASPLUS");

    private String value;

    TypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private Operator operator;

  public static final String JSON_PROPERTY_ENGAGEMENT_DETAILS =
      "engagementDetails";
  private List<DecisionDetails> engagementDetails;

  public static final String JSON_PROPERTY_TRANSPORT_DETAILS =
      "transportDetails";
  private List<DecisionDetails> transportDetails;

  public Decision() {}

  public Decision idPat(String idPat) {

    this.idPat = idPat;
    return this;
  }

  /**
   * A valoriser avec l&#39;ID partagé du patient concerné par la décision, à
   *chaque fois que la décision est liée à un patient dans le système émetteur
   * @return idPat
   **/
  @JsonProperty(JSON_PROPERTY_ID_PAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdPat() {
    return idPat;
  }

  @JsonProperty(JSON_PROPERTY_ID_PAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdPat(String idPat) {
    this.idPat = idPat;
  }

  public Decision patientStatus(PatientStatusEnum patientStatus) {

    this.patientStatus = patientStatus;
    return this;
  }

  /**
   * A valoriser avec le type de devenir du patient (cf. nomenclature associée)
   * @return patientStatus
   **/
  @JsonProperty(JSON_PROPERTY_PATIENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PatientStatusEnum getPatientStatus() {
    return patientStatus;
  }

  @JsonProperty(JSON_PROPERTY_PATIENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatientStatus(PatientStatusEnum patientStatus) {
    this.patientStatus = patientStatus;
  }

  public Decision creation(OffsetDateTime creation) {

    this.creation = creation;
    return this;
  }

  /**
   * A valoriser avec le groupe date heure de création de la décision.
   *L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
   * @return creation
   **/
  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreation() {
    return creation;
  }

  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreation(OffsetDateTime creation) {
    this.creation = creation;
  }

  public Decision type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   * @return type
   **/
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Decision operator(Operator operator) {

    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   **/
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Operator getOperator() {
    return operator;
  }

  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperator(Operator operator) {
    this.operator = operator;
  }

  public Decision engagementDetails(List<DecisionDetails> engagementDetails) {

    this.engagementDetails = engagementDetails;
    return this;
  }

  public Decision
  addEngagementDetailsItem(DecisionDetails engagementDetailsItem) {
    if (this.engagementDetails == null) {
      this.engagementDetails = new ArrayList<>();
    }
    this.engagementDetails.add(engagementDetailsItem);
    return this;
  }

  /**
   * Get engagementDetails
   * @return engagementDetails
   **/
  @JsonProperty(JSON_PROPERTY_ENGAGEMENT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DecisionDetails> getEngagementDetails() {
    return engagementDetails;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_ENGAGEMENT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEngagementDetails(List<DecisionDetails> engagementDetails) {
    if (engagementDetails == null) {
      return;
    }
    if (this.engagementDetails == null) {
      this.engagementDetails = new ArrayList<>();
    }
    this.engagementDetails.addAll(engagementDetails);
  }

  public Decision transportDetails(List<DecisionDetails> transportDetails) {

    this.transportDetails = transportDetails;
    return this;
  }

  public Decision
  addTransportDetailsItem(DecisionDetails transportDetailsItem) {
    if (this.transportDetails == null) {
      this.transportDetails = new ArrayList<>();
    }
    this.transportDetails.add(transportDetailsItem);
    return this;
  }

  /**
   * Get transportDetails
   * @return transportDetails
   **/
  @JsonProperty(JSON_PROPERTY_TRANSPORT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DecisionDetails> getTransportDetails() {
    return transportDetails;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_TRANSPORT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransportDetails(List<DecisionDetails> transportDetails) {
    if (transportDetails == null) {
      return;
    }
    if (this.transportDetails == null) {
      this.transportDetails = new ArrayList<>();
    }
    this.transportDetails.addAll(transportDetails);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision)o;
    return Objects.equals(this.idPat, decision.idPat) &&
        Objects.equals(this.patientStatus, decision.patientStatus) &&
        Objects.equals(this.creation, decision.creation) &&
        Objects.equals(this.type, decision.type) &&
        Objects.equals(this.operator, decision.operator) &&
        Objects.equals(this.engagementDetails, decision.engagementDetails) &&
        Objects.equals(this.transportDetails, decision.transportDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idPat, patientStatus, creation, type, operator,
                        engagementDetails, transportDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    idPat: ").append(toIndentedString(idPat)).append("\n");
    sb.append("    patientStatus: ")
        .append(toIndentedString(patientStatus))
        .append("\n");
    sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    engagementDetails: ")
        .append(toIndentedString(engagementDetails))
        .append("\n");
    sb.append("    transportDetails: ")
        .append(toIndentedString(transportDetails))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
