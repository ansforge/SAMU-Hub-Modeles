/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * CaseDetails
 */
@JsonPropertyOrder(
    {CaseDetails.JSON_PROPERTY_STATUS, CaseDetails.JSON_PROPERTY_ATTRIBUTION,
     CaseDetails.JSON_PROPERTY_PRIORITY, CaseDetails.JSON_PROPERTY_CARE_LEVEL})
@JsonTypeName("caseDetails")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class CaseDetails {

  /**
   * A valoriser avec l&#39;état du dossier dans le système émetteur Spécificité
   * 15-15 : peut être ignoré en réception, partagé à titre indicatif uniquement
   * Spécificité 15-SMUR : à utiliser à minima pour transmettre le statut
   * CLOTURE à la tablette
   */
  public enum StatusEnum {
    PROGRAM("PROGRAM"),

    ACTIF("ACTIF"),

    ACHEVE("ACHEVE"),

    VALIDE("VALIDE"),

    CLOTURE("CLOTURE"),

    CLASSE("CLASSE"),

    ARCHIVE("ARCHIVE");

    private String value;

    StatusEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Décrit le type de professionnel médical à qui le dossier est attribué :
   * médecin généraliste, médecin urgentiste etc.
   */
  public enum AttributionEnum {
    DRM("DRM"),

    DRM_MRU("DRM.MRU"),

    DRM_MRU_MU("DRM.MRU.MU"),

    DRM_MRU_INDISPMU("DRM.MRU.INDISPMU"),

    DRM_MRU_SSE("DRM.MRU.SSE"),

    DRM_MRU_PLANBLAN("DRM.MRU.PLANBLAN"),

    DRM_MRU_PCSAMU("DRM.MRU.PCSAMU"),

    DRM_SPE("DRM.SPE"),

    DRM_SPE_DENT("DRM.SPE.DENT"),

    DRM_SPE_GERIA("DRM.SPE.GERIA"),

    DRM_SPE_PEDIA("DRM.SPE.PEDIA"),

    DRM_SPE_OBST("DRM.SPE.OBST"),

    DRM_SPE_PSY("DRM.SPE.PSY"),

    DRM_SPE_TOXICOL("DRM.SPE.TOXICOL"),

    DRM_SPE_AUTRESPE("DRM.SPE.AUTRESPE"),

    DRM_MRL("DRM.MRL"),

    DRM_MRL_MG("DRM.MRL.MG"),

    DRM_MRL_INDISPMG("DRM.MRL.INDISPMG"),

    DRM_MRL_ABSML("DRM.MRL.ABSML"),

    DR("DR"),

    DR_DREG("DR.DREG"),

    DR_DREG_DRARM("DR.DREG.DRARM"),

    DR_DREG_DRDAC("DR.DREG.DRDAC"),

    DR_DREG_DRMED("DR.DREG.DRMED"),

    DR_DREG_DRPHARMA("DR.DREG.DRPHARMA"),

    DR_DREG_DRDENT("DR.DREG.DRDENT"),

    DR_DREG_DRINFO("DR.DREG.DRINFO"),

    DR_DREG_DOS_SIS("DR.DREG.DOS-SIS"),

    DR_DREG_DOS_FDO("DR.DREG.DOS-FDO"),

    D("D"),

    D_D_MALV("D.D-MALV"),

    D_D_MALV_ERR("D.D-MALV.ERR"),

    D_D_MALV_NRP("D.D-MALV.NRP"),

    D_D_MALV_MALV("D.D-MALV.MALV"),

    D_D_MALV_FAX("D.D-MALV.FAX"),

    D_D_MALV_ITERATIF("D.D-MALV.ITERATIF"),

    D_D_IDENT("D.D-IDENT"),

    D_D_IDENT_ADMIN("D.D-IDENT.ADMIN"),

    D_D_IDENT_PERSO("D.D-IDENT.PERSO"),

    D_D_IDENT_AUTRE("D.D-IDENT.AUTRE");

    private String value;

    AttributionEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AttributionEnum fromValue(String value) {
      for (AttributionEnum b : AttributionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ATTRIBUTION = "attribution";
  private AttributionEnum attribution;

  /**
   * Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3
   */
  public enum PriorityEnum {
    P0("P0"),

    P1("P1"),

    P2("P2"),

    P3("P3"),

    NR("NR");

    private String value;

    PriorityEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  private PriorityEnum priority;

  /**
   * Décrit le niveau de soins global du dossier identifié au cours de
   * l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins
   * différents pour chaque patient, on indique ici le niveau le plus grave.
   * cf.nomenclature associée.
   */
  public enum CareLevelEnum {
    R1("R1"),

    R2("R2"),

    R3("R3"),

    R4("R4");

    private String value;

    CareLevelEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CareLevelEnum fromValue(String value) {
      for (CareLevelEnum b : CareLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CARE_LEVEL = "careLevel";
  private CareLevelEnum careLevel;

  public CaseDetails() {}

  public CaseDetails status(StatusEnum status) {

    this.status = status;
    return this;
  }

  /**
   * A valoriser avec l&#39;état du dossier dans le système émetteur Spécificité
   *15-15 : peut être ignoré en réception, partagé à titre indicatif uniquement
   *Spécificité 15-SMUR : à utiliser à minima pour transmettre le statut CLOTURE
   *à la tablette
   * @return status
   **/
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public CaseDetails attribution(AttributionEnum attribution) {

    this.attribution = attribution;
    return this;
  }

  /**
   * Décrit le type de professionnel médical à qui le dossier est attribué :
   *médecin généraliste, médecin urgentiste etc.
   * @return attribution
   **/
  @JsonProperty(JSON_PROPERTY_ATTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AttributionEnum getAttribution() {
    return attribution;
  }

  @JsonProperty(JSON_PROPERTY_ATTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttribution(AttributionEnum attribution) {
    this.attribution = attribution;
  }

  public CaseDetails priority(PriorityEnum priority) {

    this.priority = priority;
    return this;
  }

  /**
   * Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3
   * @return priority
   **/
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PriorityEnum getPriority() {
    return priority;
  }

  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }

  public CaseDetails careLevel(CareLevelEnum careLevel) {

    this.careLevel = careLevel;
    return this;
  }

  /**
   * Décrit le niveau de soins global du dossier identifié au cours de
   *l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins
   *différents pour chaque patient, on indique ici le niveau le plus grave.
   *cf.nomenclature associée.
   * @return careLevel
   **/
  @JsonProperty(JSON_PROPERTY_CARE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CareLevelEnum getCareLevel() {
    return careLevel;
  }

  @JsonProperty(JSON_PROPERTY_CARE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCareLevel(CareLevelEnum careLevel) {
    this.careLevel = careLevel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseDetails caseDetails = (CaseDetails)o;
    return Objects.equals(this.status, caseDetails.status) &&
        Objects.equals(this.attribution, caseDetails.attribution) &&
        Objects.equals(this.priority, caseDetails.priority) &&
        Objects.equals(this.careLevel, caseDetails.careLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, attribution, priority, careLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseDetails {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    attribution: ")
        .append(toIndentedString(attribution))
        .append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    careLevel: ")
        .append(toIndentedString(careLevel))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
