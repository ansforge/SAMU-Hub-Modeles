/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.Operator;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Decision
 */
@JsonPropertyOrder(
    {Decision.JSON_PROPERTY_ID_PAT, Decision.JSON_PROPERTY_CREATION,
     Decision.JSON_PROPERTY_OPERATOR, Decision.JSON_PROPERTY_DECISION_TYPE,
     Decision.JSON_PROPERTY_RESOURCE_TYPE, Decision.JSON_PROPERTY_VEHICULE_TYPE,
     Decision.JSON_PROPERTY_MEDICAL_TRANSPORT,
     Decision.JSON_PROPERTY_ORIENTATION_TYPE})
@JsonTypeName("decision")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Decision {
  public static final String JSON_PROPERTY_ID_PAT = "idPat";
  private String idPat;

  public static final String JSON_PROPERTY_CREATION = "creation";
  private OffsetDateTime creation;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private Operator operator;

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   */
  public enum DecisionTypeEnum {
    CONSEIL("CONSEIL"),

    PMT("PMT"),

    INTER("INTER"),

    ORIENT("ORIENT"),

    PASPLUS("PASPLUS");

    private String value;

    DecisionTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecisionTypeEnum fromValue(String value) {
      for (DecisionTypeEnum b : DecisionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DECISION_TYPE = "decisionType";
  private DecisionTypeEnum decisionType;

  /**
   * A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature
   * associée) - en fonction du type de décision. A fournir obligatoirement pour
   * une décision d&#39;intervention ou de transport/orientation.
   */
  public enum ResourceTypeEnum {
    SMUR("SMUR"),

    MED("MED"),

    PARAMED("PARAMED"),

    HOSPIT("HOSPIT"),

    LIB("LIB"),

    MEDC("MEDC"),

    PHARMA("PHARMA"),

    INF("INF"),

    MEDSPE("MEDSPE"),

    DENT("DENT"),

    AUTREPRO("AUTREPRO"),

    TSU_("TSU "),

    SIS("SIS"),

    MSP("MSP"),

    ISP("ISP"),

    SP("SP"),

    AASC("AASC"),

    FDO("FDO"),

    HELIFSI("HELIFSI"),

    VLFSI("VLFSI"),

    FFSI("FFSI"),

    DGDD("DGDD"),

    AUTRE("AUTRE"),

    ADM("ADM"),

    DAE("DAE"),

    INCONNU("INCONNU");

    private String value;

    ResourceTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  private ResourceTypeEnum resourceType;

  /**
   * A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature
   * associée) en fonction du type de décision. A fournir obligatoirement pour
   * une décision d&#39;intervention ou de transport/orientation.
   */
  public enum VehiculeTypeEnum {
    AASC("AASC"),

    VLSC("VLSC"),

    VPSP("VPSP"),

    AUTRESC("AUTRESC"),

    AUTREVEC("AUTREVEC"),

    TAXI("TAXI"),

    TRANSP("TRANSP"),

    TRAIN("TRAIN"),

    AVION("AVION"),

    PERSO("PERSO"),

    APIED("APIED"),

    AUTRE("AUTRE"),

    AUTRETRA("AUTRETRA"),

    FSI("FSI"),

    HELIFSI("HELIFSI"),

    VLFSI("VLFSI"),

    FFSI("FFSI"),

    VHFSI("VHFSI"),

    LIB("LIB"),

    MEDV("MEDV"),

    INF("INF"),

    AUTREPRO("AUTREPRO"),

    SIS("SIS"),

    VSAV("VSAV"),

    GRIMP("GRIMP"),

    VPL("VPL"),

    SRSIS("SRSIS"),

    FEUSIS("FEUSIS"),

    VPMA("VPMA"),

    VCH("VCH"),

    VR("VR"),

    PCSIS("PCSIS"),

    VLISP("VLISP"),

    VLMSP("VLMSP"),

    VLCG("VLCG"),

    VLSIS("VLSIS"),

    DRAGON("DRAGON"),

    AVSC("AVSC"),

    MOYSSE("MOYSSE"),

    AUTRESIS("AUTRESIS"),

    NAVISIS("NAVISIS"),

    SMUR("SMUR"),

    VLM("VLM"),

    VL("VL"),

    PSM1("PSM1"),

    PSM2("PSM2"),

    PSM3("PSM3"),

    PSMP("PSMP"),

    VPC("VPC"),

    AR("AR"),

    AR_BAR("AR-BAR"),

    AR_PED("AR-PED"),

    HELISMUR("HELISMUR"),

    HELISAN("HELISAN"),

    AVSMUR("AVSMUR"),

    AVSAN("AVSAN"),

    NAVISMUR("NAVISMUR"),

    TSU("TSU"),

    VSL("VSL"),

    AMB_GV("AMB-GV"),

    AMB_PV("AMB-PV"),

    AMB_BAR("AMB-BAR"),

    AMB("AMB");

    private String value;

    VehiculeTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VehiculeTypeEnum fromValue(String value) {
      for (VehiculeTypeEnum b : VehiculeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VEHICULE_TYPE = "vehiculeType";
  private VehiculeTypeEnum vehiculeType;

  public static final String JSON_PROPERTY_MEDICAL_TRANSPORT =
      "medicalTransport";
  private Boolean medicalTransport;

  /**
   * Indique le type de destination en cas de décision d&#39;orientation (cf.
   * nomenclature associée)
   */
  public enum OrientationTypeEnum {
    URGENCES("URGENCES"),

    SANTE("SANTE"),

    CABINET("CABINET"),

    DOMICILE("DOMICILE"),

    EPHAD("EPHAD"),

    AUTRE("AUTRE");

    private String value;

    OrientationTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrientationTypeEnum fromValue(String value) {
      for (OrientationTypeEnum b : OrientationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORIENTATION_TYPE = "orientationType";
  private OrientationTypeEnum orientationType;

  public Decision() {}

  public Decision idPat(String idPat) {

    this.idPat = idPat;
    return this;
  }

  /**
   * A valoriser avec l&#39;ID partagé du patient concerné par la décision, à
   *chaque fois que la décision est liée à un patient dans le système émetteur
   * @return idPat
   **/
  @JsonProperty(JSON_PROPERTY_ID_PAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdPat() {
    return idPat;
  }

  @JsonProperty(JSON_PROPERTY_ID_PAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdPat(String idPat) {
    this.idPat = idPat;
  }

  public Decision creation(OffsetDateTime creation) {

    this.creation = creation;
    return this;
  }

  /**
   * A valoriser avec le groupe date heure de création de la décision.
   *L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
   * @return creation
   **/
  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreation() {
    return creation;
  }

  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreation(OffsetDateTime creation) {
    this.creation = creation;
  }

  public Decision operator(Operator operator) {

    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   **/
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Operator getOperator() {
    return operator;
  }

  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(Operator operator) {
    this.operator = operator;
  }

  public Decision decisionType(DecisionTypeEnum decisionType) {

    this.decisionType = decisionType;
    return this;
  }

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   * @return decisionType
   **/
  @JsonProperty(JSON_PROPERTY_DECISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecisionTypeEnum getDecisionType() {
    return decisionType;
  }

  @JsonProperty(JSON_PROPERTY_DECISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecisionType(DecisionTypeEnum decisionType) {
    this.decisionType = decisionType;
  }

  public Decision resourceType(ResourceTypeEnum resourceType) {

    this.resourceType = resourceType;
    return this;
  }

  /**
   * A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature
   *associée) - en fonction du type de décision. A fournir obligatoirement pour
   *une décision d&#39;intervention ou de transport/orientation.
   * @return resourceType
   **/
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

  public Decision vehiculeType(VehiculeTypeEnum vehiculeType) {

    this.vehiculeType = vehiculeType;
    return this;
  }

  /**
   * A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature
   *associée) en fonction du type de décision. A fournir obligatoirement pour
   *une décision d&#39;intervention ou de transport/orientation.
   * @return vehiculeType
   **/
  @JsonProperty(JSON_PROPERTY_VEHICULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VehiculeTypeEnum getVehiculeType() {
    return vehiculeType;
  }

  @JsonProperty(JSON_PROPERTY_VEHICULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVehiculeType(VehiculeTypeEnum vehiculeType) {
    this.vehiculeType = vehiculeType;
  }

  public Decision medicalTransport(Boolean medicalTransport) {

    this.medicalTransport = medicalTransport;
    return this;
  }

  /**
   * A valoriser obligatoirement en cas de décision de transport, pour indiquer
   *si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D;
   *transport non médicalisé
   * @return medicalTransport
   **/
  @JsonProperty(JSON_PROPERTY_MEDICAL_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMedicalTransport() {
    return medicalTransport;
  }

  @JsonProperty(JSON_PROPERTY_MEDICAL_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedicalTransport(Boolean medicalTransport) {
    this.medicalTransport = medicalTransport;
  }

  public Decision orientationType(OrientationTypeEnum orientationType) {

    this.orientationType = orientationType;
    return this;
  }

  /**
   * Indique le type de destination en cas de décision d&#39;orientation (cf.
   *nomenclature associée)
   * @return orientationType
   **/
  @JsonProperty(JSON_PROPERTY_ORIENTATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrientationTypeEnum getOrientationType() {
    return orientationType;
  }

  @JsonProperty(JSON_PROPERTY_ORIENTATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrientationType(OrientationTypeEnum orientationType) {
    this.orientationType = orientationType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision)o;
    return Objects.equals(this.idPat, decision.idPat) &&
        Objects.equals(this.creation, decision.creation) &&
        Objects.equals(this.operator, decision.operator) &&
        Objects.equals(this.decisionType, decision.decisionType) &&
        Objects.equals(this.resourceType, decision.resourceType) &&
        Objects.equals(this.vehiculeType, decision.vehiculeType) &&
        Objects.equals(this.medicalTransport, decision.medicalTransport) &&
        Objects.equals(this.orientationType, decision.orientationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idPat, creation, operator, decisionType, resourceType,
                        vehiculeType, medicalTransport, orientationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    idPat: ").append(toIndentedString(idPat)).append("\n");
    sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    decisionType: ")
        .append(toIndentedString(decisionType))
        .append("\n");
    sb.append("    resourceType: ")
        .append(toIndentedString(resourceType))
        .append("\n");
    sb.append("    vehiculeType: ")
        .append(toIndentedString(vehiculeType))
        .append("\n");
    sb.append("    medicalTransport: ")
        .append(toIndentedString(medicalTransport))
        .append("\n");
    sb.append("    orientationType: ")
        .append(toIndentedString(orientationType))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
