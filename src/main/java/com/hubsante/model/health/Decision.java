/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.health;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.health.Destination;
import com.hubsante.model.health.Operator;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Decision
 */
@JsonPropertyOrder(
    {Decision.JSON_PROPERTY_PATIENT_ID, Decision.JSON_PROPERTY_CREATION,
     Decision.JSON_PROPERTY_OPERATOR, Decision.JSON_PROPERTY_DECISION_TYPE,
     Decision.JSON_PROPERTY_RESOURCE_TYPE,
     Decision.JSON_PROPERTY_MEDICAL_TRANSPORT,
     Decision.JSON_PROPERTY_ORIENTATION_TYPE,
     Decision.JSON_PROPERTY_DESTINATION})
@JsonTypeName("decision")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Decision {
  public static final String JSON_PROPERTY_PATIENT_ID = "patientId";
  private String patientId;

  public static final String JSON_PROPERTY_CREATION = "creation";
  private OffsetDateTime creation;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private Operator operator;

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   */
  public enum DecisionTypeEnum {
    CONSEIL(String.valueOf("CONSEIL")),

    PMT(String.valueOf("PMT")),

    INTER(String.valueOf("INTER")),

    ORIENT(String.valueOf("ORIENT")),

    PASPLUS(String.valueOf("PASPLUS"));

    private String value;

    DecisionTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecisionTypeEnum fromValue(String value) {
      for (DecisionTypeEnum b : DecisionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DECISION_TYPE = "decisionType";
  private DecisionTypeEnum decisionType;

  /**
   * A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature
   * associée) - en fonction du type de décision. A fournir obligatoirement pour
   * une décision d&#39;intervention ou de transport/orientation.
   */
  public enum ResourceTypeEnum {
    SMUR(String.valueOf("SMUR")),

    SMUR_ADULT(String.valueOf("SMUR.ADULT")),

    SMUR_PED(String.valueOf("SMUR.PED")),

    SMUR_UMH_S(String.valueOf("SMUR.UMH-S")),

    SMUR_CUMP(String.valueOf("SMUR.CUMP")),

    HOSPIT(String.valueOf("HOSPIT")),

    LIBERAL(String.valueOf("LIBERAL")),

    LIBERAL_MG(String.valueOf("LIBERAL.MG")),

    LIBERAL_PHARM(String.valueOf("LIBERAL.PHARM")),

    LIBERAL_INF(String.valueOf("LIBERAL.INF")),

    LIBERAL_KINE(String.valueOf("LIBERAL.KINE")),

    LIBERAL_SOS(String.valueOf("LIBERAL.SOS")),

    LIBERAL_MMG(String.valueOf("LIBERAL.MMG")),

    LIBERAL_MSPD(String.valueOf("LIBERAL.MSPD")),

    LIBERAL_MCS(String.valueOf("LIBERAL.MCS")),

    LIBERAL_SPEMED(String.valueOf("LIBERAL.SPEMED")),

    LIBERAL_DENT(String.valueOf("LIBERAL.DENT")),

    LIBERAL_LABO(String.valueOf("LIBERAL.LABO")),

    LIBERAL_AUTREPRO(String.valueOf("LIBERAL.AUTREPRO")),

    TSU_(String.valueOf("TSU ")),

    SIS(String.valueOf("SIS")),

    SIS_MEDSP(String.valueOf("SIS.MEDSP")),

    SIS_ISP(String.valueOf("SIS.ISP")),

    SIS_SP(String.valueOf("SIS.SP")),

    AASC(String.valueOf("AASC")),

    FDO(String.valueOf("FDO")),

    FDO_PN(String.valueOf("FDO.PN")),

    FDO_GEND(String.valueOf("FDO.GEND")),

    FDO_PM(String.valueOf("FDO.PM")),

    FDO_DOUANES(String.valueOf("FDO.DOUANES")),

    AUTRE(String.valueOf("AUTRE")),

    AUTRE_ADM(String.valueOf("AUTRE.ADM")),

    AUTRE_DAE(String.valueOf("AUTRE.DAE")),

    AUTRE_AUTRE(String.valueOf("AUTRE.AUTRE"));

    private String value;

    ResourceTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  private ResourceTypeEnum resourceType;

  public static final String JSON_PROPERTY_MEDICAL_TRANSPORT =
      "medicalTransport";
  private Boolean medicalTransport;

  /**
   * Indique le type de destination en cas de décision d&#39;orientation (cf.
   * nomenclature associée)
   */
  public enum OrientationTypeEnum {
    URGENCES(String.valueOf("URGENCES")),

    REA_USI(String.valueOf("REA-USI")),

    SANTE(String.valueOf("SANTE")),

    CABINET(String.valueOf("CABINET")),

    DOMICILE(String.valueOf("DOMICILE")),

    EPHAD(String.valueOf("EPHAD")),

    AUTRE(String.valueOf("AUTRE"));

    private String value;

    OrientationTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrientationTypeEnum fromValue(String value) {
      for (OrientationTypeEnum b : OrientationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORIENTATION_TYPE = "orientationType";
  private OrientationTypeEnum orientationType;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private Destination destination;

  public Decision() {}

  public Decision patientId(String patientId) {

    this.patientId = patientId;
    return this;
  }

  /**
   * A valoriser avec l&#39;ID partagé du patient concerné par la décision, à
   *chaque fois que la décision est liée à un patient dans le système émetteur
   * @return patientId
   **/
  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPatientId() {
    return patientId;
  }

  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatientId(String patientId) {
    this.patientId = patientId;
  }

  public Decision creation(OffsetDateTime creation) {

    this.creation = creation;
    return this;
  }

  /**
   * A valoriser avec le groupe date heure de création de la décision.
   *L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
   * @return creation
   **/
  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreation() {
    return creation;
  }

  @JsonProperty(JSON_PROPERTY_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreation(OffsetDateTime creation) {
    this.creation = creation;
  }

  public Decision operator(Operator operator) {

    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   **/
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Operator getOperator() {
    return operator;
  }

  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(Operator operator) {
    this.operator = operator;
  }

  public Decision decisionType(DecisionTypeEnum decisionType) {

    this.decisionType = decisionType;
    return this;
  }

  /**
   * A valoriser avec le type de décision prise (cf.nomenclature associée)
   * @return decisionType
   **/
  @JsonProperty(JSON_PROPERTY_DECISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecisionTypeEnum getDecisionType() {
    return decisionType;
  }

  @JsonProperty(JSON_PROPERTY_DECISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecisionType(DecisionTypeEnum decisionType) {
    this.decisionType = decisionType;
  }

  public Decision resourceType(ResourceTypeEnum resourceType) {

    this.resourceType = resourceType;
    return this;
  }

  /**
   * A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature
   *associée) - en fonction du type de décision. A fournir obligatoirement pour
   *une décision d&#39;intervention ou de transport/orientation.
   * @return resourceType
   **/
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

  public Decision medicalTransport(Boolean medicalTransport) {

    this.medicalTransport = medicalTransport;
    return this;
  }

  /**
   * A valoriser obligatoirement en cas de décision de transport, pour indiquer
   *si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D;
   *transport non médicalisé
   * @return medicalTransport
   **/
  @JsonProperty(JSON_PROPERTY_MEDICAL_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMedicalTransport() {
    return medicalTransport;
  }

  @JsonProperty(JSON_PROPERTY_MEDICAL_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedicalTransport(Boolean medicalTransport) {
    this.medicalTransport = medicalTransport;
  }

  public Decision orientationType(OrientationTypeEnum orientationType) {

    this.orientationType = orientationType;
    return this;
  }

  /**
   * Indique le type de destination en cas de décision d&#39;orientation (cf.
   *nomenclature associée)
   * @return orientationType
   **/
  @JsonProperty(JSON_PROPERTY_ORIENTATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrientationTypeEnum getOrientationType() {
    return orientationType;
  }

  @JsonProperty(JSON_PROPERTY_ORIENTATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrientationType(OrientationTypeEnum orientationType) {
    this.orientationType = orientationType;
  }

  public Decision destination(Destination destination) {

    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Destination getDestination() {
    return destination;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(Destination destination) {
    this.destination = destination;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision)o;
    return Objects.equals(this.patientId, decision.patientId) &&
        Objects.equals(this.creation, decision.creation) &&
        Objects.equals(this.operator, decision.operator) &&
        Objects.equals(this.decisionType, decision.decisionType) &&
        Objects.equals(this.resourceType, decision.resourceType) &&
        Objects.equals(this.medicalTransport, decision.medicalTransport) &&
        Objects.equals(this.orientationType, decision.orientationType) &&
        Objects.equals(this.destination, decision.destination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patientId, creation, operator, decisionType,
                        resourceType, medicalTransport, orientationType,
                        destination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    patientId: ")
        .append(toIndentedString(patientId))
        .append("\n");
    sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    decisionType: ")
        .append(toIndentedString(decisionType))
        .append("\n");
    sb.append("    resourceType: ")
        .append(toIndentedString(resourceType))
        .append("\n");
    sb.append("    medicalTransport: ")
        .append(toIndentedString(medicalTransport))
        .append("\n");
    sb.append("    orientationType: ")
        .append(toIndentedString(orientationType))
        .append("\n");
    sb.append("    destination: ")
        .append(toIndentedString(destination))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
