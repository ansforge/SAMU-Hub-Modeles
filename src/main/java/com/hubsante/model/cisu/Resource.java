/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hubsante.model.cisu;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Resource
 */
@JsonPropertyOrder({
        Resource.JSON_PROPERTY_RESOURCE_DESC,
        Resource.JSON_PROPERTY_MIME_TYPE,
        Resource.JSON_PROPERTY_SIZE,
        Resource.JSON_PROPERTY_U_R_I,
        Resource.JSON_PROPERTY_DEREF_U_R_I,
        Resource.JSON_PROPERTY_DIGEST
})
@JsonTypeName("resource")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-15T16:43:16.580+02:00[Europe/Paris]")
public class Resource {
    public static final String JSON_PROPERTY_RESOURCE_DESC = "resourceDesc";
    private String resourceDesc;

    public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
    private String mimeType;

    public static final String JSON_PROPERTY_SIZE = "size";
    private Integer size;

    public static final String JSON_PROPERTY_U_R_I = "URI";
    private String URI;

    public static final String JSON_PROPERTY_DEREF_U_R_I = "derefURI";
    private String derefURI;

    public static final String JSON_PROPERTY_DIGEST = "digest";
    private String digest;

    public Resource() {
    }

    public Resource resourceDesc(String resourceDesc) {

        this.resourceDesc = resourceDesc;
        return this;
    }

    /**
     * Décrit la ressource en précisant le type et le contenu, tels que «carte» ou «photo»
     *
     * @return resourceDesc
     **/
    @JsonProperty(JSON_PROPERTY_RESOURCE_DESC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getResourceDesc() {
        return resourceDesc;
    }


    @JsonProperty(JSON_PROPERTY_RESOURCE_DESC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResourceDesc(String resourceDesc) {
        this.resourceDesc = resourceDesc;
    }


    public Resource mimeType(String mimeType) {

        this.mimeType = mimeType;
        return this;
    }

    /**
     * L&#39;identifiant du type MIME de contenu et sous-type décrivant la ressource
     *
     * @return mimeType
     **/
    @JsonProperty(JSON_PROPERTY_MIME_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getMimeType() {
        return mimeType;
    }


    @JsonProperty(JSON_PROPERTY_MIME_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }


    public Resource size(Integer size) {

        this.size = size;
        return this;
    }

    /**
     * Taille approximative de la ressource en kO
     *
     * @return size
     **/
    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Integer getSize() {
        return size;
    }


    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSize(Integer size) {
        this.size = size;
    }


    public Resource URI(String URI) {

        this.URI = URI;
        return this;
    }

    /**
     * Une URI, généralement une URL, qui permet d&#39;atteindre la ressource sur Internet ou sur un réseau privé
     *
     * @return URI
     **/
    @JsonProperty(JSON_PROPERTY_U_R_I)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getURI() {
        return URI;
    }


    @JsonProperty(JSON_PROPERTY_U_R_I)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setURI(String URI) {
        this.URI = URI;
    }


    public Resource derefURI(String derefURI) {

        this.derefURI = derefURI;
        return this;
    }

    /**
     * Peut être utilisé à la place de l&#39;élément &#39;URI&#39; pour envoyer la ressource encodée en base64 pour éviter des problèmes de transcodage (sur des double quotes qui casseraient le message, …)
     *
     * @return derefURI
     **/
    @JsonProperty(JSON_PROPERTY_DEREF_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDerefURI() {
        return derefURI;
    }


    @JsonProperty(JSON_PROPERTY_DEREF_U_R_I)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDerefURI(String derefURI) {
        this.derefURI = derefURI;
    }


    public Resource digest(String digest) {

        this.digest = digest;
        return this;
    }

    /**
     * Hash de la ressource pour confirmer la réception de la bonne ressource
     *
     * @return digest
     **/
    @JsonProperty(JSON_PROPERTY_DIGEST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDigest() {
        return digest;
    }


    @JsonProperty(JSON_PROPERTY_DIGEST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDigest(String digest) {
        this.digest = digest;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Resource resource = (Resource) o;
        return Objects.equals(this.resourceDesc, resource.resourceDesc) &&
                Objects.equals(this.mimeType, resource.mimeType) &&
                Objects.equals(this.size, resource.size) &&
                Objects.equals(this.URI, resource.URI) &&
                Objects.equals(this.derefURI, resource.derefURI) &&
                Objects.equals(this.digest, resource.digest);
    }

    @Override
    public int hashCode() {
        return Objects.hash(resourceDesc
                , mimeType
                , size
                , URI
                , derefURI
                , digest);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Resource {\n");
        sb.append("    resourceDesc: ").append(toIndentedString(resourceDesc)).append("\n");
        sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    URI: ").append(toIndentedString(URI)).append("\n");
        sb.append("    derefURI: ").append(toIndentedString(derefURI)).append("\n");
        sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
