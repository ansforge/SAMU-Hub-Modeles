/**
 * Copyright Â© 2023 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Patdestination
 */
@JsonPropertyOrder({Patdestination.JSON_PROPERTY_FACILITY,
                    Patdestination.JSON_PROPERTY_SERVICE,
                    Patdestination.JSON_PROPERTY_OTHER})
@JsonTypeName("patdestination")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Patdestination {
  public static final String JSON_PROPERTY_FACILITY = "facility";
  private String facility;

  public static final String JSON_PROPERTY_SERVICE = "service";
  private String service;

  public static final String JSON_PROPERTY_OTHER = "other";
  private String other;

  public Patdestination() {}

  public Patdestination facility(String facility) {

    this.facility = facility;
    return this;
  }

  /**
   * Get facility
   * @return facility
   **/
  @JsonProperty(JSON_PROPERTY_FACILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFacility() {
    return facility;
  }

  @JsonProperty(JSON_PROPERTY_FACILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFacility(String facility) {
    this.facility = facility;
  }

  public Patdestination service(String service) {

    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   **/
  @JsonProperty(JSON_PROPERTY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getService() {
    return service;
  }

  @JsonProperty(JSON_PROPERTY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setService(String service) {
    this.service = service;
  }

  public Patdestination other(String other) {

    this.other = other;
    return this;
  }

  /**
   * Get other
   * @return other
   **/
  @JsonProperty(JSON_PROPERTY_OTHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOther() {
    return other;
  }

  @JsonProperty(JSON_PROPERTY_OTHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOther(String other) {
    this.other = other;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Patdestination patdestination = (Patdestination)o;
    return Objects.equals(this.facility, patdestination.facility) &&
        Objects.equals(this.service, patdestination.service) &&
        Objects.equals(this.other, patdestination.other);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facility, service, other);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Patdestination {\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
