/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.cisu.Destination;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * TransportDetails
 */
@JsonPropertyOrder({TransportDetails.JSON_PROPERTY_ORIENTATION,
                    TransportDetails.JSON_PROPERTY_TEAM_CARE,
                    TransportDetails.JSON_PROPERTY_DESTINATION})
@JsonTypeName("transportDetails")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class TransportDetails {
  public static final String JSON_PROPERTY_ORIENTATION = "orientation";
  private String orientation;

  /**
   * Type d’équipe (médical, paramédicale, non médicale, standard, incomplete,
   * ...)
   */
  public enum TeamCareEnum {
    MED("MED"),

    PARAMED("PARAMED"),

    SECOURS("SECOURS");

    private String value;

    TeamCareEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TeamCareEnum fromValue(String value) {
      for (TeamCareEnum b : TeamCareEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TEAM_CARE = "teamCare";
  private TeamCareEnum teamCare;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private Destination destination;

  public TransportDetails() {}

  public TransportDetails orientation(String orientation) {

    this.orientation = orientation;
    return this;
  }

  /**
   * Décision(s) d&#39;orientation prise par le médecin régulateur :  - A
   *transporter - Laisser sur place
   * @return orientation
   **/
  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrientation() {
    return orientation;
  }

  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }

  public TransportDetails teamCare(TeamCareEnum teamCare) {

    this.teamCare = teamCare;
    return this;
  }

  /**
   * Type d’équipe (médical, paramédicale, non médicale, standard, incomplete,
   *...)
   * @return teamCare
   **/
  @JsonProperty(JSON_PROPERTY_TEAM_CARE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TeamCareEnum getTeamCare() {
    return teamCare;
  }

  @JsonProperty(JSON_PROPERTY_TEAM_CARE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTeamCare(TeamCareEnum teamCare) {
    this.teamCare = teamCare;
  }

  public TransportDetails destination(Destination destination) {

    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Destination getDestination() {
    return destination;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(Destination destination) {
    this.destination = destination;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportDetails transportDetails = (TransportDetails)o;
    return Objects.equals(this.orientation, transportDetails.orientation) &&
        Objects.equals(this.teamCare, transportDetails.teamCare) &&
        Objects.equals(this.destination, transportDetails.destination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orientation, teamCare, destination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportDetails {\n");
    sb.append("    orientation: ")
        .append(toIndentedString(orientation))
        .append("\n");
    sb.append("    teamCare: ").append(toIndentedString(teamCare)).append("\n");
    sb.append("    destination: ")
        .append(toIndentedString(destination))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
