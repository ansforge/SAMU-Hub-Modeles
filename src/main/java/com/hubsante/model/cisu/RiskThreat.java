/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * RiskThreat
 */
@JsonPropertyOrder(
    {RiskThreat.JSON_PROPERTY_CODE, RiskThreat.JSON_PROPERTY_LABEL})
@JsonTypeName("riskThreat")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class RiskThreat {

  /**
   * A valoriser avec le code de la nomenclature associée
   */
  public enum CodeEnum {
    R01(String.valueOf("R01")),

    R02(String.valueOf("R02")),

    R03(String.valueOf("R03")),

    R04(String.valueOf("R04")),

    R05(String.valueOf("R05")),

    R06(String.valueOf("R06")),

    R07(String.valueOf("R07")),

    R08(String.valueOf("R08")),

    R09(String.valueOf("R09")),

    R10(String.valueOf("R10")),

    R11(String.valueOf("R11")),

    R12(String.valueOf("R12")),

    R13(String.valueOf("R13")),

    R14(String.valueOf("R14")),

    R15(String.valueOf("R15")),

    R16(String.valueOf("R16")),

    R17(String.valueOf("R17")),

    R18(String.valueOf("R18")),

    R19(String.valueOf("R19")),

    R20(String.valueOf("R20")),

    R21(String.valueOf("R21")),

    R22(String.valueOf("R22")),

    R23(String.valueOf("R23")),

    R24(String.valueOf("R24")),

    R25(String.valueOf("R25")),

    R26(String.valueOf("R26")),

    R27(String.valueOf("R27")),

    R28(String.valueOf("R28")),

    R29(String.valueOf("R29")),

    R30(String.valueOf("R30")),

    R31(String.valueOf("R31")),

    R32(String.valueOf("R32")),

    R33(String.valueOf("R33")),

    R34(String.valueOf("R34")),

    R35(String.valueOf("R35")),

    R36(String.valueOf("R36")),

    R37(String.valueOf("R37"));

    private String value;

    CodeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODE = "code";
  private CodeEnum code;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public RiskThreat() {}

  public RiskThreat code(CodeEnum code) {

    this.code = code;
    return this;
  }

  /**
   * A valoriser avec le code de la nomenclature associée
   * @return code
   **/
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CodeEnum getCode() {
    return code;
  }

  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(CodeEnum code) {
    this.code = code;
  }

  public RiskThreat label(String label) {

    this.label = label;
    return this;
  }

  /**
   * A valoriser avec le libellé de la nomenclature associée. Dans le cas où un
   *système n&#39;est pas en mesure de reconnaître un code, il peut choisir
   *d&#39;afficher le libellé qui est obligatoirement fourni avec le code.
   * @return label
   **/
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }

  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskThreat riskThreat = (RiskThreat)o;
    return Objects.equals(this.code, riskThreat.code) &&
        Objects.equals(this.label, riskThreat.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, label);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskThreat {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
