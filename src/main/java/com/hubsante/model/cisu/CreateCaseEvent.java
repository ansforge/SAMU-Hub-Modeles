/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hubsante.model.cisu;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hubsante.model.cisu.AdditionalInformation;
import com.hubsante.model.cisu.Alert;
import com.hubsante.model.cisu.Location;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateCaseEvent
 */
@JsonPropertyOrder({
        CreateCaseEvent.JSON_PROPERTY_CASE_ID,
        CreateCaseEvent.JSON_PROPERTY_SENDER_CASE_ID,
        CreateCaseEvent.JSON_PROPERTY_CREATED_AT,
        CreateCaseEvent.JSON_PROPERTY_INITIAL_ALERT,
        CreateCaseEvent.JSON_PROPERTY_CASE_LOCATION,
        CreateCaseEvent.JSON_PROPERTY_NEW_ALERT,
        CreateCaseEvent.JSON_PROPERTY_SEVERITY,
        CreateCaseEvent.JSON_PROPERTY_ADDITIONAL_INFORMATION,
        CreateCaseEvent.JSON_PROPERTY_FREETEXT
})
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-13T17:52:00.660+02:00[Europe/Paris]")
public class CreateCaseEvent {
    public static final String JSON_PROPERTY_CASE_ID = "caseId";
    private String caseId;

    public static final String JSON_PROPERTY_SENDER_CASE_ID = "senderCaseId";
    private String senderCaseId;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_INITIAL_ALERT = "initialAlert";
    private Alert initialAlert;

    public static final String JSON_PROPERTY_CASE_LOCATION = "caseLocation";
    private Location caseLocation;

    public static final String JSON_PROPERTY_NEW_ALERT = "newAlert";
    private List<Alert> newAlert;

    /**
     * [Non utilisé dans une première version car la définition et l&#39;usage restent à définir] Précise l&#39;urgence médicale :         EXTREME : Menace extrême pour la vie         SEVERE : Menace importante pour la vie         MODERATE - Menace possible pour la vie         MINOR : Peu ou pas de menace connue pour la vie         UNKNOWN : Niveau de menace inconnu Ce niveau de gravité est lié au Motif de Recours Medico-Secouriste associé à l&#39;appel.
     */
    public enum SeverityEnum {
        EXTREME("EXTREME"),

        SEVERE("SEVERE"),

        MODERATE("MODERATE"),

        MINOR("MINOR"),

        UNKNOWN("UNKNOWN");

        private String value;

        SeverityEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SeverityEnum fromValue(String value) {
            for (SeverityEnum b : SeverityEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SEVERITY = "severity";
    private SeverityEnum severity;

    public static final String JSON_PROPERTY_ADDITIONAL_INFORMATION = "additionalInformation";
    private AdditionalInformation additionalInformation;

    public static final String JSON_PROPERTY_FREETEXT = "freetext";
    private String freetext;

    public CreateCaseEvent() {
    }

    public CreateCaseEvent caseId(String caseId) {

        this.caseId = caseId;
        return this;
    }

    /**
     * Identifiant fonctionnel unique de l&#39;affaire et partagé entre tous les intervenants. Il doit pouvoir être généré de façon unique et décentralisée et ne présenter aucune ambiguïté. Il est généré par la force réceptrice de la primo-demande de secours et contient un identifiant de la source. Format : {SystèmeEmetteur}-{Date}-AF{Sequence} où : - {SystèmeEmetteur} est la clé de routage utilisée en majuscule (se référer au DST) - {Date} est la date du jour au format AAAMMJJ - {Sequence} sur 4 digits est choisie par le système émetteur de façon à rendre les affaires emises uniques - AF pour désigner à NexSIS que l&#39;on échange une affaire
     *
     * @return caseId
     **/
    @JsonProperty(JSON_PROPERTY_CASE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getCaseId() {
        return caseId;
    }


    @JsonProperty(JSON_PROPERTY_CASE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCaseId(String caseId) {
        this.caseId = caseId;
    }


    public CreateCaseEvent senderCaseId(String senderCaseId) {

        this.senderCaseId = senderCaseId;
        return this;
    }

    /**
     * Identifiant de l&#39;affaire dans le SI de l&#39;émetteur du message
     *
     * @return senderCaseId
     **/
    @JsonProperty(JSON_PROPERTY_SENDER_CASE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSenderCaseId() {
        return senderCaseId;
    }


    @JsonProperty(JSON_PROPERTY_SENDER_CASE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSenderCaseId(String senderCaseId) {
        this.senderCaseId = senderCaseId;
    }


    public CreateCaseEvent createdAt(OffsetDateTime createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * Groupe date heure de début de partage lié à la création de l&#39;affaire (et donc de génération du caseId). Il doit être renseigné à la fin du processus de la  création  de la première alerte. Lors de l&#39;ajout d&#39;alerte à une affaire ce champ ne doit pas être modifié.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. Le fuseau horaire pour UTC doit être représenté par &#39;-00:00&#39;
     *
     * @return createdAt
     **/
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }


    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    public CreateCaseEvent initialAlert(Alert initialAlert) {

        this.initialAlert = initialAlert;
        return this;
    }

    /**
     * Get initialAlert
     *
     * @return initialAlert
     **/
    @JsonProperty(JSON_PROPERTY_INITIAL_ALERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Alert getInitialAlert() {
        return initialAlert;
    }


    @JsonProperty(JSON_PROPERTY_INITIAL_ALERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInitialAlert(Alert initialAlert) {
        this.initialAlert = initialAlert;
    }


    public CreateCaseEvent caseLocation(Location caseLocation) {

        this.caseLocation = caseLocation;
        return this;
    }

    /**
     * Get caseLocation
     *
     * @return caseLocation
     **/
    @JsonProperty(JSON_PROPERTY_CASE_LOCATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Location getCaseLocation() {
        return caseLocation;
    }


    @JsonProperty(JSON_PROPERTY_CASE_LOCATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCaseLocation(Location caseLocation) {
        this.caseLocation = caseLocation;
    }


    public CreateCaseEvent newAlert(List<Alert> newAlert) {

        this.newAlert = newAlert;
        return this;
    }

    public CreateCaseEvent addNewAlertItem(Alert newAlertItem) {
        if (this.newAlert == null) {
            this.newAlert = new ArrayList<>();
        }
        this.newAlert.add(newAlertItem);
        return this;
    }

    /**
     * Get newAlert
     *
     * @return newAlert
     **/
    @JsonProperty(JSON_PROPERTY_NEW_ALERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Alert> getNewAlert() {
        return newAlert;
    }

    @JacksonXmlElementWrapper(useWrapping = false)

    @JsonProperty(JSON_PROPERTY_NEW_ALERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNewAlert(List<Alert> newAlert) {
        if (newAlert == null) {
            return;
        }
        if (this.newAlert == null) {
            this.newAlert = new ArrayList<>();
        }
        this.newAlert.addAll(newAlert);
    }


    public CreateCaseEvent severity(SeverityEnum severity) {

        this.severity = severity;
        return this;
    }

    /**
     * [Non utilisé dans une première version car la définition et l&#39;usage restent à définir] Précise l&#39;urgence médicale :         EXTREME : Menace extrême pour la vie         SEVERE : Menace importante pour la vie         MODERATE - Menace possible pour la vie         MINOR : Peu ou pas de menace connue pour la vie         UNKNOWN : Niveau de menace inconnu Ce niveau de gravité est lié au Motif de Recours Medico-Secouriste associé à l&#39;appel.
     *
     * @return severity
     **/
    @JsonProperty(JSON_PROPERTY_SEVERITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public SeverityEnum getSeverity() {
        return severity;
    }


    @JsonProperty(JSON_PROPERTY_SEVERITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSeverity(SeverityEnum severity) {
        this.severity = severity;
    }


    public CreateCaseEvent additionalInformation(AdditionalInformation additionalInformation) {

        this.additionalInformation = additionalInformation;
        return this;
    }

    /**
     * Get additionalInformation
     *
     * @return additionalInformation
     **/
    @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AdditionalInformation getAdditionalInformation() {
        return additionalInformation;
    }


    @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFORMATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAdditionalInformation(AdditionalInformation additionalInformation) {
        this.additionalInformation = additionalInformation;
    }


    public CreateCaseEvent freetext(String freetext) {

        this.freetext = freetext;
        return this;
    }

    /**
     * Texte libre permettant de donner des informations supplémentaires concernant l&#39;affaire
     *
     * @return freetext
     **/
    @JsonProperty(JSON_PROPERTY_FREETEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getFreetext() {
        return freetext;
    }


    @JsonProperty(JSON_PROPERTY_FREETEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFreetext(String freetext) {
        this.freetext = freetext;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCaseEvent createCaseEvent = (CreateCaseEvent) o;
        return Objects.equals(this.caseId, createCaseEvent.caseId) &&
                Objects.equals(this.senderCaseId, createCaseEvent.senderCaseId) &&
                Objects.equals(this.createdAt, createCaseEvent.createdAt) &&
                Objects.equals(this.initialAlert, createCaseEvent.initialAlert) &&
                Objects.equals(this.caseLocation, createCaseEvent.caseLocation) &&
                Objects.equals(this.newAlert, createCaseEvent.newAlert) &&
                Objects.equals(this.severity, createCaseEvent.severity) &&
                Objects.equals(this.additionalInformation, createCaseEvent.additionalInformation) &&
                Objects.equals(this.freetext, createCaseEvent.freetext);
    }

    @Override
    public int hashCode() {
        return Objects.hash(caseId
                , senderCaseId
                , createdAt
                , initialAlert
                , caseLocation
                , newAlert
                , severity
                , additionalInformation
                , freetext);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateCaseEvent {\n");
        sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
        sb.append("    senderCaseId: ").append(toIndentedString(senderCaseId)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    initialAlert: ").append(toIndentedString(initialAlert)).append("\n");
        sb.append("    caseLocation: ").append(toIndentedString(caseLocation)).append("\n");
        sb.append("    newAlert: ").append(toIndentedString(newAlert)).append("\n");
        sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
        sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
        sb.append("    freetext: ").append(toIndentedString(freetext)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
