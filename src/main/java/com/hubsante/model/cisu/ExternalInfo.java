/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hubsante.model.cisu;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ExternalInfo
 */
@JsonPropertyOrder({
        ExternalInfo.JSON_PROPERTY_FREETEXT,
        ExternalInfo.JSON_PROPERTY_TYPE,
        ExternalInfo.JSON_PROPERTY_URI
})
@JsonTypeName("externalInfo")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T12:09:36.642+01:00[Europe/Paris]")
public class ExternalInfo {
    public static final String JSON_PROPERTY_FREETEXT = "freetext";

    /**
     * Système fournissant le localisant :  NexSiS ou l&#39;ORG_ID (BAN, IGN, ...)
     */
    public enum FreetextEnum {
        BAN("BAN"),

        IGN("IGN"),

        NEXSIS("NexSIS");

        private String value;

        FreetextEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FreetextEnum fromValue(String value) {
            for (FreetextEnum b : FreetextEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    private String freetext;

    /**
     * Définition du type d&#39;objet dans le système Ex : SIG NexSIS / OSM ont plusieurs types de données -&gt; savoir du quel on parle (POI, tronçon de route, …) pour faciliter le filtre | Aussi table dans une base de données
     */
    public enum TypeEnum {
        MANUAL("MANUAL"),

        MAP("MAP"),

        OTHER("OTHER"),

        PHOTO("PHOTO"),

        WEBSIT("WEBSIT");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    private TypeEnum type;

    public static final String JSON_PROPERTY_URI = "uri";
    private String uri;

    public ExternalInfo() {
    }

    public ExternalInfo freetext(String freetext) {

        this.freetext = freetext;
        return this;
    }

    /**
     * Système fournissant le localisant :  NexSiS ou l&#39;ORG_ID (BAN, IGN, ...)
     *
     * @return freetext
     **/
    @JsonProperty(JSON_PROPERTY_FREETEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFreetext() {
        return freetext;
    }


    @JsonProperty(JSON_PROPERTY_FREETEXT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFreetext(String freetext) {
        this.freetext = freetext;
    }


    public ExternalInfo type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * Définition du type d&#39;objet dans le système Ex : SIG NexSIS / OSM ont plusieurs types de données -&gt; savoir du quel on parle (POI, tronçon de route, …) pour faciliter le filtre | Aussi table dans une base de données
     *
     * @return type
     **/
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TypeEnum getType() {
        return type;
    }


    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TypeEnum type) {
        this.type = type;
    }


    public ExternalInfo uri(String uri) {

        this.uri = uri;
        return this;
    }

    /**
     * Identifiant unique dans le type. Exemple : UUID d&#39;un ega
     *
     * @return uri
     **/
    @JsonProperty(JSON_PROPERTY_URI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getUri() {
        return uri;
    }


    @JsonProperty(JSON_PROPERTY_URI)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUri(String uri) {
        this.uri = uri;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalInfo externalInfo = (ExternalInfo) o;
        return Objects.equals(this.freetext, externalInfo.freetext) &&
                Objects.equals(this.type, externalInfo.type) &&
                Objects.equals(this.uri, externalInfo.uri);
    }

    @Override
    public int hashCode() {
        return Objects.hash(freetext
                , type
                , uri);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExternalInfo {\n");
        sb.append("    freetext: ").append(toIndentedString(freetext)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
