/**
 * Copyright © 2023 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.cisu.Patdestination;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * PatientPathway
 */
@JsonPropertyOrder({PatientPathway.JSON_PROPERTY_DECISIONTYPE,
                    PatientPathway.JSON_PROPERTY_ORIENTATION,
                    PatientPathway.JSON_PROPERTY_RTYPE_TRANSPORT,
                    PatientPathway.JSON_PROPERTY_TEAM_MEDICAL_LEVEL,
                    PatientPathway.JSON_PROPERTY_PATDESTINATION,
                    PatientPathway.JSON_PROPERTY_CARELEVEL})
@JsonTypeName("patientPathway")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class PatientPathway {
  public static final String JSON_PROPERTY_DECISIONTYPE = "decisiontype";
  private String decisiontype;

  public static final String JSON_PROPERTY_ORIENTATION = "orientation";
  private String orientation;

  public static final String JSON_PROPERTY_RTYPE_TRANSPORT = "rtypeTransport";
  private List<String> rtypeTransport;

  public static final String JSON_PROPERTY_TEAM_MEDICAL_LEVEL =
      "teamMedicalLevel";
  private String teamMedicalLevel;

  public static final String JSON_PROPERTY_PATDESTINATION = "patdestination";
  private Patdestination patdestination;

  /**
   * Gets or Sets carelevel
   */
  public enum CarelevelEnum {
    R1("R1"),

    R2("R2"),

    R3("R3"),

    R4("R4");

    private String value;

    CarelevelEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CarelevelEnum fromValue(String value) {
      for (CarelevelEnum b : CarelevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CARELEVEL = "carelevel";
  private CarelevelEnum carelevel;

  public PatientPathway() {}

  public PatientPathway decisiontype(String decisiontype) {

    this.decisiontype = decisiontype;
    return this;
  }

  /**
   * Type de décision prise
   * @return decisiontype
   **/
  @JsonProperty(JSON_PROPERTY_DECISIONTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDecisiontype() {
    return decisiontype;
  }

  @JsonProperty(JSON_PROPERTY_DECISIONTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecisiontype(String decisiontype) {
    this.decisiontype = decisiontype;
  }

  public PatientPathway orientation(String orientation) {

    this.orientation = orientation;
    return this;
  }

  /**
   * Décision(s) d&#39;orientation prise par le médecin régulateur
   * @return orientation
   **/
  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOrientation() {
    return orientation;
  }

  @JsonProperty(JSON_PROPERTY_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }

  public PatientPathway rtypeTransport(List<String> rtypeTransport) {

    this.rtypeTransport = rtypeTransport;
    return this;
  }

  public PatientPathway addRtypeTransportItem(String rtypeTransportItem) {
    if (this.rtypeTransport == null) {
      this.rtypeTransport = new ArrayList<>();
    }
    this.rtypeTransport.add(rtypeTransportItem);
    return this;
  }

  /**
   * Get rtypeTransport
   * @return rtypeTransport
   **/
  @JsonProperty(JSON_PROPERTY_RTYPE_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRtypeTransport() {
    return rtypeTransport;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_RTYPE_TRANSPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRtypeTransport(List<String> rtypeTransport) {
    if (rtypeTransport == null) {
      return;
    }
    if (this.rtypeTransport == null) {
      this.rtypeTransport = new ArrayList<>();
    }
    this.rtypeTransport.addAll(rtypeTransport);
  }

  public PatientPathway teamMedicalLevel(String teamMedicalLevel) {

    this.teamMedicalLevel = teamMedicalLevel;
    return this;
  }

  /**
   * Type d’équipe (médical, paramédicale, non médicale, standard, incomplete,
   *...)
   * @return teamMedicalLevel
   **/
  @JsonProperty(JSON_PROPERTY_TEAM_MEDICAL_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTeamMedicalLevel() {
    return teamMedicalLevel;
  }

  @JsonProperty(JSON_PROPERTY_TEAM_MEDICAL_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTeamMedicalLevel(String teamMedicalLevel) {
    this.teamMedicalLevel = teamMedicalLevel;
  }

  public PatientPathway patdestination(Patdestination patdestination) {

    this.patdestination = patdestination;
    return this;
  }

  /**
   * Get patdestination
   * @return patdestination
   **/
  @JsonProperty(JSON_PROPERTY_PATDESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Patdestination getPatdestination() {
    return patdestination;
  }

  @JsonProperty(JSON_PROPERTY_PATDESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPatdestination(Patdestination patdestination) {
    this.patdestination = patdestination;
  }

  public PatientPathway carelevel(CarelevelEnum carelevel) {

    this.carelevel = carelevel;
    return this;
  }

  /**
   * Get carelevel
   * @return carelevel
   **/
  @JsonProperty(JSON_PROPERTY_CARELEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CarelevelEnum getCarelevel() {
    return carelevel;
  }

  @JsonProperty(JSON_PROPERTY_CARELEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCarelevel(CarelevelEnum carelevel) {
    this.carelevel = carelevel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientPathway patientPathway = (PatientPathway)o;
    return Objects.equals(this.decisiontype, patientPathway.decisiontype) &&
        Objects.equals(this.orientation, patientPathway.orientation) &&
        Objects.equals(this.rtypeTransport, patientPathway.rtypeTransport) &&
        Objects.equals(this.teamMedicalLevel,
                       patientPathway.teamMedicalLevel) &&
        Objects.equals(this.patdestination, patientPathway.patdestination) &&
        Objects.equals(this.carelevel, patientPathway.carelevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decisiontype, orientation, rtypeTransport,
                        teamMedicalLevel, patdestination, carelevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientPathway {\n");
    sb.append("    decisiontype: ")
        .append(toIndentedString(decisiontype))
        .append("\n");
    sb.append("    orientation: ")
        .append(toIndentedString(orientation))
        .append("\n");
    sb.append("    rtypeTransport: ")
        .append(toIndentedString(rtypeTransport))
        .append("\n");
    sb.append("    teamMedicalLevel: ")
        .append(toIndentedString(teamMedicalLevel))
        .append("\n");
    sb.append("    patdestination: ")
        .append(toIndentedString(patdestination))
        .append("\n");
    sb.append("    carelevel: ")
        .append(toIndentedString(carelevel))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
