/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.cisu.Contact;
import com.hubsante.model.cisu.DetailedName;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Caller
 */
@JsonPropertyOrder(
    {Caller.JSON_PROPERTY_CALLER_CONTACT, Caller.JSON_PROPERTY_CALLBACK_CONTACT,
     Caller.JSON_PROPERTY_LANGUAGE, Caller.JSON_PROPERTY_TYPE,
     Caller.JSON_PROPERTY_COMMUNICATION, Caller.JSON_PROPERTY_FREETEXT,
     Caller.JSON_PROPERTY_DETAILED_NAME})
@JsonTypeName("caller")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Caller {
  public static final String JSON_PROPERTY_CALLER_CONTACT = "callerContact";
  private Contact callerContact;

  public static final String JSON_PROPERTY_CALLBACK_CONTACT = "callbackContact";
  private Contact callbackContact;

  /**
   * A valoriser avec la langue parlée par le requérant.  cf.nomenclature
   * associée.
   */
  public enum LanguageEnum {
    AA(String.valueOf("aa")),

    AB(String.valueOf("ab")),

    AE(String.valueOf("ae")),

    AF(String.valueOf("af")),

    AK(String.valueOf("ak")),

    AM(String.valueOf("am")),

    AN(String.valueOf("an")),

    AR(String.valueOf("ar")),

    AS(String.valueOf("as")),

    AV(String.valueOf("av")),

    AY(String.valueOf("ay")),

    AZ(String.valueOf("az")),

    BA(String.valueOf("ba")),

    BE(String.valueOf("be")),

    BG(String.valueOf("bg")),

    BI(String.valueOf("bi")),

    BM(String.valueOf("bm")),

    BN(String.valueOf("bn")),

    BO(String.valueOf("bo")),

    BR(String.valueOf("br")),

    BS(String.valueOf("bs")),

    CA(String.valueOf("ca")),

    CE(String.valueOf("ce")),

    CH(String.valueOf("ch")),

    CO(String.valueOf("co")),

    CR(String.valueOf("cr")),

    CS(String.valueOf("cs")),

    CU(String.valueOf("cu")),

    CV(String.valueOf("cv")),

    CY(String.valueOf("cy")),

    DA(String.valueOf("da")),

    DE(String.valueOf("de")),

    DV(String.valueOf("dv")),

    DZ(String.valueOf("dz")),

    EE(String.valueOf("ee")),

    EL(String.valueOf("el")),

    EN(String.valueOf("en")),

    EO(String.valueOf("eo")),

    ES(String.valueOf("es")),

    ET(String.valueOf("et")),

    EU(String.valueOf("eu")),

    FA(String.valueOf("fa")),

    FF(String.valueOf("ff")),

    FI(String.valueOf("fi")),

    FJ(String.valueOf("fj")),

    FO(String.valueOf("fo")),

    FR(String.valueOf("fr")),

    FY(String.valueOf("fy")),

    GA(String.valueOf("ga")),

    GD(String.valueOf("gd")),

    GL(String.valueOf("gl")),

    GN(String.valueOf("gn")),

    GU(String.valueOf("gu")),

    GV(String.valueOf("gv")),

    HA(String.valueOf("ha")),

    HE(String.valueOf("he")),

    HI(String.valueOf("hi")),

    HO(String.valueOf("ho")),

    HR(String.valueOf("hr")),

    HT(String.valueOf("ht")),

    HU(String.valueOf("hu")),

    HY(String.valueOf("hy")),

    HZ(String.valueOf("hz")),

    IA(String.valueOf("ia")),

    ID(String.valueOf("id")),

    IE(String.valueOf("ie")),

    IG(String.valueOf("ig")),

    II(String.valueOf("ii")),

    IK(String.valueOf("ik")),

    IO(String.valueOf("io")),

    IS(String.valueOf("is")),

    IT(String.valueOf("it")),

    IU(String.valueOf("iu")),

    JA(String.valueOf("ja")),

    JV(String.valueOf("jv")),

    KA(String.valueOf("ka")),

    KG(String.valueOf("kg")),

    KI(String.valueOf("ki")),

    KJ(String.valueOf("kj")),

    KK(String.valueOf("kk")),

    KL(String.valueOf("kl")),

    KM(String.valueOf("km")),

    KN(String.valueOf("kn")),

    KO(String.valueOf("ko")),

    KR(String.valueOf("kr")),

    KS(String.valueOf("ks")),

    KU(String.valueOf("ku")),

    KV(String.valueOf("kv")),

    KW(String.valueOf("kw")),

    KY(String.valueOf("ky")),

    LA(String.valueOf("la")),

    LB(String.valueOf("lb")),

    LG(String.valueOf("lg")),

    LI(String.valueOf("li")),

    LN(String.valueOf("ln")),

    LO(String.valueOf("lo")),

    LT(String.valueOf("lt")),

    LU(String.valueOf("lu")),

    LV(String.valueOf("lv")),

    MG(String.valueOf("mg")),

    MH(String.valueOf("mh")),

    MI(String.valueOf("mi")),

    MK(String.valueOf("mk")),

    ML(String.valueOf("ml")),

    MN(String.valueOf("mn")),

    MR(String.valueOf("mr")),

    MS(String.valueOf("ms")),

    MT(String.valueOf("mt")),

    MY(String.valueOf("my")),

    NA(String.valueOf("na")),

    NB(String.valueOf("nb")),

    ND(String.valueOf("nd")),

    NE(String.valueOf("ne")),

    NG(String.valueOf("ng")),

    NL(String.valueOf("nl")),

    NN(String.valueOf("nn")),

    NO(String.valueOf("no")),

    NR(String.valueOf("nr")),

    NV(String.valueOf("nv")),

    NY(String.valueOf("ny")),

    OC(String.valueOf("oc")),

    OJ(String.valueOf("oj")),

    OM(String.valueOf("om")),

    OR(String.valueOf("or")),

    OS(String.valueOf("os")),

    PA(String.valueOf("pa")),

    PI(String.valueOf("pi")),

    PL(String.valueOf("pl")),

    PS(String.valueOf("ps")),

    PT(String.valueOf("pt")),

    QU(String.valueOf("qu")),

    RM(String.valueOf("rm")),

    RN(String.valueOf("rn")),

    RO(String.valueOf("ro")),

    RU(String.valueOf("ru")),

    RW(String.valueOf("rw")),

    SA(String.valueOf("sa")),

    SC(String.valueOf("sc")),

    SD(String.valueOf("sd")),

    SE(String.valueOf("se")),

    SG(String.valueOf("sg")),

    SI(String.valueOf("si")),

    SK(String.valueOf("sk")),

    SL(String.valueOf("sl")),

    SM(String.valueOf("sm")),

    SN(String.valueOf("sn")),

    SO(String.valueOf("so")),

    SQ(String.valueOf("sq")),

    SR(String.valueOf("sr")),

    SS(String.valueOf("ss")),

    ST(String.valueOf("st")),

    SU(String.valueOf("su")),

    SV(String.valueOf("sv")),

    SW(String.valueOf("sw")),

    TA(String.valueOf("ta")),

    TE(String.valueOf("te")),

    TG(String.valueOf("tg")),

    TH(String.valueOf("th")),

    TI(String.valueOf("ti")),

    TK(String.valueOf("tk")),

    TL(String.valueOf("tl")),

    TN(String.valueOf("tn")),

    TO(String.valueOf("to")),

    TR(String.valueOf("tr")),

    TS(String.valueOf("ts")),

    TT(String.valueOf("tt")),

    TW(String.valueOf("tw")),

    TY(String.valueOf("ty")),

    UG(String.valueOf("ug")),

    UK(String.valueOf("uk")),

    UR(String.valueOf("ur")),

    UZ(String.valueOf("uz")),

    VE(String.valueOf("ve")),

    VI(String.valueOf("vi")),

    VO(String.valueOf("vo")),

    WA(String.valueOf("wa")),

    WO(String.valueOf("wo")),

    XH(String.valueOf("xh")),

    YI(String.valueOf("yi")),

    YO(String.valueOf("yo")),

    ZA(String.valueOf("za")),

    ZH(String.valueOf("zh")),

    ZU(String.valueOf("zu"));

    private String value;

    LanguageEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private LanguageEnum language;

  /**
   * A valoriser avec la relation du requérant avec l&#39;incident / le patient
   * / la victime. cf. nomenclature associée.
   */
  public enum TypeEnum {
    SUJET(String.valueOf("SUJET")),

    FAMILLE(String.valueOf("FAMILLE")),

    TIERS(String.valueOf("TIERS")),

    POMPIER(String.valueOf("POMPIER")),

    AMBULANC(String.valueOf("AMBULANC")),

    AMBULANC_AASC(String.valueOf("AMBULANC.AASC")),

    AMBULANC_AUTRESEC(String.valueOf("AMBULANC.AUTRESEC")),

    SECOUR(String.valueOf("SECOUR")),

    MED(String.valueOf("MED")),

    MED_MEDSOS(String.valueOf("MED.MEDSOS")),

    MED_MRL(String.valueOf("MED.MRL")),

    MED_EFFML(String.valueOf("MED.EFFML")),

    SANTE(String.valueOf("SANTE")),

    SANTE_INF(String.valueOf("SANTE.INF")),

    SANTE_AIDESOIN(String.valueOf("SANTE.AIDESOIN")),

    SANTE_SF(String.valueOf("SANTE.SF")),

    SANTE_AIDEDOM(String.valueOf("SANTE.AIDEDOM")),

    SANTE_PHARMA(String.valueOf("SANTE.PHARMA")),

    SANTE_DENTISTE(String.valueOf("SANTE.DENTISTE")),

    SANTE_LABO(String.valueOf("SANTE.LABO")),

    FDO_MILI(String.valueOf("FDO-MILI")),

    FDO_MILI_POL(String.valueOf("FDO-MILI.POL")),

    FDO_MILI_GENDARM(String.valueOf("FDO-MILI.GENDARM")),

    FDO_MILI_MILI(String.valueOf("FDO-MILI.MILI")),

    ADM_TUTL(String.valueOf("ADM-TUTL")),

    VIP(String.valueOf("VIP")),

    OBJCONNC(String.valueOf("OBJCONNC")),

    AUTRE(String.valueOf("AUTRE")),

    INCONNU(String.valueOf("INCONNU"));

    private String value;

    TypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * A valoriser avec la nature des éventuelles difficultés de communication
   * rencontrées par le requérant.  cf.nomenclature associée.
   */
  public enum CommunicationEnum {
    AUCUNE(String.valueOf("AUCUNE")),

    MUET(String.valueOf("MUET")),

    VISION(String.valueOf("VISION")),

    LANGUE(String.valueOf("LANGUE")),

    PANIQUE(String.valueOf("PANIQUE")),

    HOSTILE(String.valueOf("HOSTILE")),

    AGITE(String.valueOf("AGITE")),

    AUTRE(String.valueOf("AUTRE")),

    IMPOSS(String.valueOf("IMPOSS"));

    private String value;

    CommunicationEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CommunicationEnum fromValue(String value) {
      for (CommunicationEnum b : CommunicationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COMMUNICATION = "communication";
  private CommunicationEnum communication;

  public static final String JSON_PROPERTY_FREETEXT = "freetext";
  private String freetext;

  public static final String JSON_PROPERTY_DETAILED_NAME = "detailedName";
  private DetailedName detailedName;

  public Caller() {}

  public Caller callerContact(Contact callerContact) {

    this.callerContact = callerContact;
    return this;
  }

  /**
   * Get callerContact
   * @return callerContact
   **/
  @JsonProperty(JSON_PROPERTY_CALLER_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Contact getCallerContact() {
    return callerContact;
  }

  @JsonProperty(JSON_PROPERTY_CALLER_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallerContact(Contact callerContact) {
    this.callerContact = callerContact;
  }

  public Caller callbackContact(Contact callbackContact) {

    this.callbackContact = callbackContact;
    return this;
  }

  /**
   * Get callbackContact
   * @return callbackContact
   **/
  @JsonProperty(JSON_PROPERTY_CALLBACK_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Contact getCallbackContact() {
    return callbackContact;
  }

  @JsonProperty(JSON_PROPERTY_CALLBACK_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallbackContact(Contact callbackContact) {
    this.callbackContact = callbackContact;
  }

  public Caller language(LanguageEnum language) {

    this.language = language;
    return this;
  }

  /**
   * A valoriser avec la langue parlée par le requérant.  cf.nomenclature
   *associée.
   * @return language
   **/
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LanguageEnum getLanguage() {
    return language;
  }

  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public Caller type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * A valoriser avec la relation du requérant avec l&#39;incident / le patient
   * / la victime. cf. nomenclature associée.
   * @return type
   **/
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Caller communication(CommunicationEnum communication) {

    this.communication = communication;
    return this;
  }

  /**
   * A valoriser avec la nature des éventuelles difficultés de communication
   *rencontrées par le requérant.  cf.nomenclature associée.
   * @return communication
   **/
  @JsonProperty(JSON_PROPERTY_COMMUNICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommunicationEnum getCommunication() {
    return communication;
  }

  @JsonProperty(JSON_PROPERTY_COMMUNICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommunication(CommunicationEnum communication) {
    this.communication = communication;
  }

  public Caller freetext(String freetext) {

    this.freetext = freetext;
    return this;
  }

  /**
   * Champ libre qui permet de compléter les informations spécifiquement liées
   *au requérant.
   * @return freetext
   **/
  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFreetext() {
    return freetext;
  }

  @JsonProperty(JSON_PROPERTY_FREETEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreetext(String freetext) {
    this.freetext = freetext;
  }

  public Caller detailedName(DetailedName detailedName) {

    this.detailedName = detailedName;
    return this;
  }

  /**
   * Get detailedName
   * @return detailedName
   **/
  @JsonProperty(JSON_PROPERTY_DETAILED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DetailedName getDetailedName() {
    return detailedName;
  }

  @JsonProperty(JSON_PROPERTY_DETAILED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetailedName(DetailedName detailedName) {
    this.detailedName = detailedName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Caller caller = (Caller)o;
    return Objects.equals(this.callerContact, caller.callerContact) &&
        Objects.equals(this.callbackContact, caller.callbackContact) &&
        Objects.equals(this.language, caller.language) &&
        Objects.equals(this.type, caller.type) &&
        Objects.equals(this.communication, caller.communication) &&
        Objects.equals(this.freetext, caller.freetext) &&
        Objects.equals(this.detailedName, caller.detailedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerContact, callbackContact, language, type,
                        communication, freetext, detailedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Caller {\n");
    sb.append("    callerContact: ")
        .append(toIndentedString(callerContact))
        .append("\n");
    sb.append("    callbackContact: ")
        .append(toIndentedString(callbackContact))
        .append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    communication: ")
        .append(toIndentedString(communication))
        .append("\n");
    sb.append("    freetext: ").append(toIndentedString(freetext)).append("\n");
    sb.append("    detailedName: ")
        .append(toIndentedString(detailedName))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
