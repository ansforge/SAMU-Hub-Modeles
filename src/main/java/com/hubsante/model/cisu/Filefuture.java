/**
 * Copyright © 2023 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Filefuture
 */
@JsonPropertyOrder(
    {Filefuture.JSON_PROPERTY_FILESTATUS, Filefuture.JSON_PROPERTY_FILETYPE})
@JsonTypeName("filefuture")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Filefuture {

  /**
   * cf. cycle SI SAMU uniquement (si applicable) : échanger l&#39;état du
   * dossier si le cycle de vie du dossier est implémenté de manière conforme au
   * cycle de vie du dossier SI-SAMU
   */
  public enum FilestatusEnum {
    NOUVEAU_("Nouveau "),

    ACTIF_("Actif "),

    VALID_("Validé "),

    CL_TUR_("Clôturé "),

    CLASS_("Classé ");

    private String value;

    FilestatusEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FilestatusEnum fromValue(String value) {
      for (FilestatusEnum b : FilestatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILESTATUS = "filestatus";
  private FilestatusEnum filestatus;

  public static final String JSON_PROPERTY_FILETYPE = "filetype";
  private String filetype;

  public Filefuture() {}

  public Filefuture filestatus(FilestatusEnum filestatus) {

    this.filestatus = filestatus;
    return this;
  }

  /**
   * cf. cycle SI SAMU uniquement (si applicable) : échanger l&#39;état du
   *dossier si le cycle de vie du dossier est implémenté de manière conforme au
   *cycle de vie du dossier SI-SAMU
   * @return filestatus
   **/
  @JsonProperty(JSON_PROPERTY_FILESTATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilestatusEnum getFilestatus() {
    return filestatus;
  }

  @JsonProperty(JSON_PROPERTY_FILESTATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilestatus(FilestatusEnum filestatus) {
    this.filestatus = filestatus;
  }

  public Filefuture filetype(String filetype) {

    this.filetype = filetype;
    return this;
  }

  /**
   * D/DR/DRM si cycle SI-SAMU implémenté
   * @return filetype
   **/
  @JsonProperty(JSON_PROPERTY_FILETYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFiletype() {
    return filetype;
  }

  @JsonProperty(JSON_PROPERTY_FILETYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiletype(String filetype) {
    this.filetype = filetype;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filefuture filefuture = (Filefuture)o;
    return Objects.equals(this.filestatus, filefuture.filestatus) &&
        Objects.equals(this.filetype, filefuture.filetype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filestatus, filetype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filefuture {\n");
    sb.append("    filestatus: ")
        .append(toIndentedString(filestatus))
        .append("\n");
    sb.append("    filetype: ").append(toIndentedString(filetype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
