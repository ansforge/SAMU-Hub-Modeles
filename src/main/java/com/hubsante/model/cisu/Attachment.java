/**
 * Copyright © 2023 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.cisu;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Attachment
 */
@JsonPropertyOrder(
    {Attachment.JSON_PROPERTY_DESCRIPTION, Attachment.JSON_PROPERTY_MIME_TYPE,
     Attachment.JSON_PROPERTY_SIZE, Attachment.JSON_PROPERTY_U_R_I,
     Attachment.JSON_PROPERTY_DEREF_U_R_I, Attachment.JSON_PROPERTY_DIGEST})
@JsonTypeName("attachment")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Attachment {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<Object> description = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private JsonNullable<Object> mimeType = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public static final String JSON_PROPERTY_U_R_I = "URI";
  private String URI;

  public static final String JSON_PROPERTY_DEREF_U_R_I = "derefURI";
  private JsonNullable<Object> derefURI = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_DIGEST = "digest";
  private JsonNullable<Object> digest = JsonNullable.<Object>of(null);

  public Attachment() {}

  public Attachment description(Object description) {
    this.description = JsonNullable.<Object>of(description);

    return this;
  }

  /**
   * Décrit la ressource en précisant le type et le contenu, tels que «carte» ou
   *«photo»
   * @return description
   **/
  @JsonIgnore

  public Object getDescription() {
    return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDescription_JsonNullable() {
    return description;
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)

  public void setDescription(Object description) {
    this.description = JsonNullable.<Object>of(description);
  }

  public Attachment mimeType(Object mimeType) {
    this.mimeType = JsonNullable.<Object>of(mimeType);

    return this;
  }

  /**
   * L&#39;identifiant du type MIME de contenu et sous-type décrivant la
   *ressource
   * @return mimeType
   **/
  @JsonIgnore

  public Object getMimeType() {
    return mimeType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMimeType_JsonNullable() {
    return mimeType;
  }

  @JsonProperty(JSON_PROPERTY_MIME_TYPE)

  public void setMimeType(Object mimeType) {
    this.mimeType = JsonNullable.<Object>of(mimeType);
  }

  public Attachment size(Integer size) {

    this.size = size;
    return this;
  }

  /**
   * Taille approximative de la ressource en kO
   * @return size
   **/
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSize() {
    return size;
  }

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Integer size) {
    this.size = size;
  }

  public Attachment URI(String URI) {

    this.URI = URI;
    return this;
  }

  /**
   * Une URI, généralement une URL, qui permet d&#39;atteindre la ressource sur
   *Internet ou sur un réseau privé Nous suggérons d&#39;employer le format
   *suivant de regex
   *(https?|ftp|file)://([\\w-]+(\\.[\\w-]+)*)(/[\\w\\-\\.]*)*_/?(\\?[^\\s]*)?
   * @return URI
   **/
  @JsonProperty(JSON_PROPERTY_U_R_I)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getURI() {
    return URI;
  }

  @JsonProperty(JSON_PROPERTY_U_R_I)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setURI(String URI) {
    this.URI = URI;
  }

  public Attachment derefURI(Object derefURI) {
    this.derefURI = JsonNullable.<Object>of(derefURI);

    return this;
  }

  /**
   * Peut être utilisé à la place de l&#39;élément &#39;URI&#39; pour envoyer la
   *ressource encodée en base64 pour éviter des problèmes de transcodage (sur
   *des double quotes qui casseraient le message, …)
   * @return derefURI
   **/
  @JsonIgnore

  public Object getDerefURI() {
    return derefURI.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEREF_U_R_I)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDerefURI_JsonNullable() {
    return derefURI;
  }

  @JsonProperty(JSON_PROPERTY_DEREF_U_R_I)

  public void setDerefURI(Object derefURI) {
    this.derefURI = JsonNullable.<Object>of(derefURI);
  }

  public Attachment digest(Object digest) {
    this.digest = JsonNullable.<Object>of(digest);

    return this;
  }

  /**
   * Hash de la ressource pour confirmer la réception de la bonne ressource La
   *ressource est hashée avec le protocole SHA-256
   * @return digest
   **/
  @JsonIgnore

  public Object getDigest() {
    return digest.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDigest_JsonNullable() {
    return digest;
  }

  @JsonProperty(JSON_PROPERTY_DIGEST)

  public void setDigest(Object digest) {
    this.digest = JsonNullable.<Object>of(digest);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attachment attachment = (Attachment)o;
    return equalsNullable(this.description, attachment.description) &&
        equalsNullable(this.mimeType, attachment.mimeType) &&
        Objects.equals(this.size, attachment.size) &&
        Objects.equals(this.URI, attachment.URI) &&
        equalsNullable(this.derefURI, attachment.derefURI) &&
        equalsNullable(this.digest, attachment.digest);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a,
                                            JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() &&
                      b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(description),
                        hashCodeNullable(mimeType), size, URI,
                        hashCodeNullable(derefURI), hashCodeNullable(digest));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attachment {\n");
    sb.append("    description: ")
        .append(toIndentedString(description))
        .append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    URI: ").append(toIndentedString(URI)).append("\n");
    sb.append("    derefURI: ").append(toIndentedString(derefURI)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
