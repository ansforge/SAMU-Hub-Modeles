/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.emsi;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.emsi.Position;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Mission
 */
@JsonPropertyOrder(
    {Mission.JSON_PROPERTY_T_Y_P_E, Mission.JSON_PROPERTY_F_R_E_E_T_E_X_T,
     Mission.JSON_PROPERTY_I_D, Mission.JSON_PROPERTY_O_R_G_I_D,
     Mission.JSON_PROPERTY_N_A_M_E, Mission.JSON_PROPERTY_S_T_A_T_U_S,
     Mission.JSON_PROPERTY_S_T_A_R_T_T_I_M_E,
     Mission.JSON_PROPERTY_E_N_D_T_I_M_E,
     Mission.JSON_PROPERTY_R_E_S_O_U_R_C_E_I_D,
     Mission.JSON_PROPERTY_P_A_R_E_N_T_M_I_S_S_I_O_N_I_D,
     Mission.JSON_PROPERTY_C_H_I_L_D_M_I_S_S_I_O_N_I_D,
     Mission.JSON_PROPERTY_M_A_I_N_M_I_S_S_I_O_N_I_D,
     Mission.JSON_PROPERTY_P_O_S_I_T_I_O_N,
     Mission.JSON_PROPERTY_P_R_I_O_R_I_T_Y})
@JsonTypeName("mission")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

@JsonIgnoreProperties(ignoreUnknown = true)
public class Mission {

  /**
   * Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir
   * souhaité à partir de la combinaison du code ACTOR et du code TYPE.
   * &#x3D;&gt; La table de transcodage permettant d&#39;identifier les
   * concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie
   * en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;.
   * Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le
   * code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une
   * mission décrivant les opérations en cours : - reprendre la nomenclature
   * EMSI pour caractériser la mission en cours.
   */
  public enum TYPEEnum {
    C2("C2"),

    CBRN("CBRN"),

    FF("FF"),

    FSTT("FSTT"),

    GEN("GEN"),

    INT("INT"),

    MAC("MAC"),

    MIL("MIL"),

    NET("NET"),

    OPR("OPR"),

    POL("POL"),

    REC("REC"),

    RSC("RSC"),

    SAV("SAV"),

    SCS("SCS"),

    SOC("SOC"),

    C2_DEBRIF("C2/DEBRIF"),

    C2_DNRSKA("C2/DNRSKA"),

    C2_INASSM("C2/INASSM"),

    C2_OIC("C2/OIC"),

    C2_POA("C2/POA"),

    C2_THRTAS("C2/THRTAS"),

    CBRN_CBRNCH("CBRN/CBRNCH"),

    CBRN_CBRNDC("CBRN/CBRNDC"),

    CBRN_NTRCH("CBRN/NTRCH"),

    CBRN_NUCWS("CBRN/NUCWS"),

    FF_IN("FF/IN"),

    FF_OA("FF/OA"),

    FF_SALVAG("FF/SALVAG"),

    FF_STR("FF/STR"),

    FF_TRP("FF/TRP"),

    FSTT_DI("FSTT/DI"),

    FSTT_RRHAZ("FSTT/RRHAZ"),

    FSTT_TA("FSTT/TA"),

    GEN_AIRLAU("GEN/AIRLAU"),

    GEN_ASSMBL("GEN/ASSMBL"),

    GEN_CRWDCT("GEN/CRWDCT"),

    GEN_DEMO("GEN/DEMO"),

    GEN_DEPLOY("GEN/DEPLOY"),

    GEN_DSTRBT("GEN/DSTRBT"),

    GEN_FINANC("GEN/FINANC"),

    GEN_MARKNG("GEN/MARKNG"),

    GEN_MOVE("GEN/MOVE"),

    GEN_RECVRN("GEN/RECVRN"),

    GEN_RECVRY("GEN/RECVRY"),

    GEN_REDPLN("GEN/REDPLN"),

    GEN_REORGN("GEN/REORGN"),

    GEN_REPAIR("GEN/REPAIR"),

    GEN_RESPLN("GEN/RESPLN"),

    GEN_RESTNG("GEN/RESTNG"),

    GEN_RETIRE("GEN/RETIRE"),

    GEN_RLFPLC("GEN/RLFPLC"),

    GEN_RNDZVS("GEN/RNDZVS"),

    GEN_SCNMNG("GEN/SCNMNG"),

    GEN_SECRNG("GEN/SECRNG"),

    GEN_STNGUP("GEN/STNGUP"),

    GEN_SUPRTN("GEN/SUPRTN"),

    GEN_TRNSPN("GEN/TRNSPN"),

    INT_BIOSMP("INT/BIOSMP"),

    INT_CHMSMP("INT/CHMSMP"),

    INT_IDENT("INT/IDENT"),

    INT_ILLUMN("INT/ILLUMN"),

    INT_LOCTNG("INT/LOCTNG"),

    INT_NUCSMP("INT/NUCSMP"),

    INT_OBSRNG("INT/OBSRNG"),

    INT_PLUMOD("INT/PLUMOD"),

    INT_PTRLNG("INT/PTRLNG"),

    INT_RECCE("INT/RECCE"),

    INT_SRVMET("INT/SRVMET"),

    INT_SRVSEN("INT/SRVSEN"),

    INT_WITNSN("INT/WITNSN"),

    MAC_AII("MAC/AII"),

    MAC_COL("MAC/COL"),

    MIL_BCESC("MIL/BCESC"),

    MIL_BLOCKN("MIL/BLOCKN"),

    MIL_BOMBNG("MIL/BOMBNG"),

    MIL_CAPTUR("MIL/CAPTUR"),

    MIL_CTRATK("MIL/CTRATK"),

    MIL_DEFEND("MIL/DEFEND"),

    MIL_DISENG("MIL/DISENG"),

    MIL_DIVRSN("MIL/DIVRSN"),

    MIL_DLBATK("MIL/DLBATK"),

    MIL_DSRPTN("MIL/DSRPTN"),

    MIL_ENVLPN("MIL/ENVLPN"),

    MIL_FIX("MIL/FIX"),

    MIL_HARASS("MIL/HARASS"),

    MIL_HIDE("MIL/HIDE"),

    MIL_HLDDEF("MIL/HLDDEF"),

    MIL_HLDOFF("MIL/HLDOFF"),

    MIL_INFLTN("MIL/INFLTN"),

    MIL_INTCPN("MIL/INTCPN"),

    MIL_INTDCT("MIL/INTDCT"),

    MIL_MASFOR("MIL/MASFOR"),

    MIL_MIL("MIL/MIL"),

    MIL_WPNFIR("MIL/WPNFIR"),

    NET_COMDEA("NET/COMDEA"),

    NET_DATTRF("NET/DATTRF"),

    NET_NETJAM("NET/NETJAM"),

    NET_NETSEI("NET/NETSEI"),

    NET_SGNC("NET/SGNC"),

    NET_SGNLE("NET/SGNLE"),

    POL_NTRCOM("POL/NTRCOM"),

    POL_NTREXP("POL/NTREXP"),

    POL_SCNMNG("POL/SCNMNG"),

    POL_SCNPRS("POL/SCNPRS"),

    POL_SHELTR("POL/SHELTR"),

    POL_SUSHOS("POL/SUSHOS"),

    POL_WITDRL("POL/WITDRL"),

    REC_CLROBS("REC/CLROBS"),

    REC_COMACT("REC/COMACT"),

    REC_COMRES("REC/COMRES"),

    REC_CONSTN("REC/CONSTN"),

    REC_ENGCN("REC/ENGCN"),

    REC_ENGCNN("REC/ENGCNN"),

    REC_PROCUR("REC/PROCUR"),

    REC_PRVACC("REC/PRVACC"),

    REC_PRVAGR("REC/PRVAGR"),

    REC_PRVBDD("REC/PRVBDD"),

    REC_PRVCMP("REC/PRVCMP"),

    REC_PRVCNS("REC/PRVCNS"),

    REC_PRVDCN("REC/PRVDCN"),

    REC_PRVEDU("REC/PRVEDU"),

    REC_PRVHLT("REC/PRVHLT"),

    REC_PRVHSN("REC/PRVHSN"),

    REC_PRVINF("REC/PRVINF"),

    REC_PRVLND("REC/PRVLND"),

    REC_PRVRPR("REC/PRVRPR"),

    REC_PRVSCY("REC/PRVSCY"),

    REC_PRVSHL("REC/PRVSHL"),

    REC_PRVSTG("REC/PRVSTG"),

    REC_PRVTRS("REC/PRVTRS"),

    REC_PSO("REC/PSO"),

    REC_SPLLDB("REC/SPLLDB"),

    REC_SPLWAT("REC/SPLWAT"),

    REC_UTILTY("REC/UTILTY"),

    REC_WATER("REC/WATER"),

    RSC_COVERN("RSC/COVERN"),

    RSC_FRFGTN("RSC/FRFGTN"),

    RSC_MEDEVC("RSC/MEDEVC"),

    RSC_SAR("RSC/SAR"),

    SAV_AR("SAV/AR"),

    SAV_ASC("SAV/ASC"),

    SAV_RHD("SAV/RHD"),

    SAV_RTA("SAV/RTA"),

    SAV_SARCSL("SAV/SARCSL"),

    SAV_SARHHA("SAV/SARHHA"),

    SAV_SRW("SAV/SRW"),

    SAV_USAR("SAV/USAR"),

    SAV_UW("SAV/UW"),

    SCS_EDU("SCS/EDU"),

    SOC_CNDCNF("SOC/CNDCNF"),

    SOC_CNDMED("SOC/CNDMED"),

    SOC_CNDRCR("SOC/CNDRCR"),

    SOC_CNDSCL("SOC/CNDSCL"),

    SOC_CNDSPT("SOC/CNDSPT"),

    SOC_ISSMDA("SOC/ISSMDA"),

    SOC_ISSMDD("SOC/ISSMDD"),

    SOC_ISSPRS("SOC/ISSPRS"),

    SOC_MN("SOC/MN"),

    SOC_PUBMDA("SOC/PUBMDA"),

    SOC_PUBMDD("SOC/PUBMDD"),

    SOC_PUBPRS("SOC/PUBPRS");

    private String value;

    TYPEEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TYPEEnum fromValue(String value) {
      for (TYPEEnum b : TYPEEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_T_Y_P_E = "TYPE";
  private TYPEEnum TYPE;

  public static final String JSON_PROPERTY_F_R_E_E_T_E_X_T = "FREETEXT";
  private String FREETEXT;

  public static final String JSON_PROPERTY_I_D = "ID";
  private String ID;

  public static final String JSON_PROPERTY_O_R_G_I_D = "ORG_ID";
  private String ORG_ID;

  public static final String JSON_PROPERTY_N_A_M_E = "NAME";
  private String NAME;

  /**
   * Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au
   * sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD
   * : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier
   * (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la
   * valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn)
   * spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est
   * pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le
   * degré d&#39;avancement de la mission via ce champ. - PAU : événement
   * arrêté, en pause pour métier, pas de besoin supplémentaire - COM :
   * événement terminé pour le métier (COMplete) Le status de la mission et
   * celui des RESSOURCE associées doit être cohérent et transcodable avec un
   * status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de
   * réponse à demande de concours, le champ doit être valorisé à
   * \&quot;NST\&quot;
   */
  public enum STATUSEnum {
    ABO("ABO"),

    NST("NST"),

    CANCLD("CANCLD"),

    COM("COM"),

    IPR("IPR"),

    PAU("PAU");

    private String value;

    STATUSEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static STATUSEnum fromValue(String value) {
      for (STATUSEnum b : STATUSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_S_T_A_T_U_S = "STATUS";
  private STATUSEnum STATUS;

  public static final String JSON_PROPERTY_S_T_A_R_T_T_I_M_E = "START_TIME";
  private OffsetDateTime START_TIME;

  public static final String JSON_PROPERTY_E_N_D_T_I_M_E = "END_TIME";
  private OffsetDateTime END_TIME;

  public static final String JSON_PROPERTY_R_E_S_O_U_R_C_E_I_D = "RESOURCE_ID";
  private List<String> RESOURCE_ID;

  public static final String JSON_PROPERTY_P_A_R_E_N_T_M_I_S_S_I_O_N_I_D =
      "PARENT_MISSION_ID";
  private List<String> PARENT_MISSION_ID;

  public static final String JSON_PROPERTY_C_H_I_L_D_M_I_S_S_I_O_N_I_D =
      "CHILD_MISSION_ID";
  private List<String> CHILD_MISSION_ID;

  public static final String JSON_PROPERTY_M_A_I_N_M_I_S_S_I_O_N_I_D =
      "MAIN_MISSION_ID";
  private String MAIN_MISSION_ID;

  public static final String JSON_PROPERTY_P_O_S_I_T_I_O_N = "POSITION";
  private Position POSITION;

  /**
   * Indique une échelle de priorité pour la demande de concours. Dans le cadre
   * du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ
   * peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre
   * d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis
   * ni interprété.
   */
  public enum PRIORITYEnum {
    _0("0"),

    _1("1"),

    _2("2"),

    _3("3"),

    _4("4"),

    _5("5");

    private String value;

    PRIORITYEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PRIORITYEnum fromValue(String value) {
      for (PRIORITYEnum b : PRIORITYEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_P_R_I_O_R_I_T_Y = "PRIORITY";
  private PRIORITYEnum PRIORITY;

  public Mission() {}

  public Mission TYPE(TYPEEnum TYPE) {

    this.TYPE = TYPE;
    return this;
  }

  /**
   * Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir
   *souhaité à partir de la combinaison du code ACTOR et du code TYPE.
   *&#x3D;&gt; La table de transcodage permettant d&#39;identifier les
   *concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie
   *en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;.
   *Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le
   *code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une
   *mission décrivant les opérations en cours : - reprendre la nomenclature EMSI
   *pour caractériser la mission en cours.
   * @return TYPE
   **/
  @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TYPEEnum getTYPE() {
    return TYPE;
  }

  @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTYPE(TYPEEnum TYPE) {
    this.TYPE = TYPE;
  }

  public Mission FREETEXT(String FREETEXT) {

    this.FREETEXT = FREETEXT;
    return this;
  }

  /**
   * Contient des commentaires relatifs aux objectifs et  moyens sollicités dans
   *le cadre de la demande de concours. Les équipements supplémentaires
   *souhaités ou le nom/ prénom des patients à prendre en charge peuvent être
   *explicitement indiqués ici.
   * @return FREETEXT
   **/
  @JsonProperty(JSON_PROPERTY_F_R_E_E_T_E_X_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFREETEXT() {
    return FREETEXT;
  }

  @JsonProperty(JSON_PROPERTY_F_R_E_E_T_E_X_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFREETEXT(String FREETEXT) {
    this.FREETEXT = FREETEXT;
  }

  public Mission ID(String ID) {

    this.ID = ID;
    return this;
  }

  /**
   * Contient un identifiant de demande de concours unique. Cet identifiant sera
   *réutilisable par le partenaire pour répondre à cette demande. Identifiant
   *unique de la mission dans le système du partenaire la conduisant.
   * @return ID
   **/
  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getID() {
    return ID;
  }

  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setID(String ID) {
    this.ID = ID;
  }

  public Mission ORG_ID(String ORG_ID) {

    this.ORG_ID = ORG_ID;
    return this;
  }

  /**
   * Indique l&#39;organisation du partenaire concerné par la Demande de
   *Concours (voir DSF 8.4). Le code CRRA ou le code du SIS peut être utilisé.
   *Indique l&#39;organisation du service réalisant la mission. Dans le cas
   *d&#39;une réponse, c&#39;est l&#39;organisation du concourant qui doit être
   *indiquée. Se référer au DSF pour la structure normée des organisations Le
   *format est le suivant {pays}:{domaine}:{code
   *département}:{organisation}:{structure interne}*:{unité fonctionnelle}*.
   *identique à &lt;CONTEXT&gt;&lt;ORIGIN&gt;&lt;ORG_ID&gt;
   * @return ORG_ID
   **/
  @JsonProperty(JSON_PROPERTY_O_R_G_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getORGID() {
    return ORG_ID;
  }

  @JsonProperty(JSON_PROPERTY_O_R_G_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setORGID(String ORG_ID) {
    this.ORG_ID = ORG_ID;
  }

  public Mission NAME(String NAME) {

    this.NAME = NAME;
    return this;
  }

  /**
   * Le nom de la mission est construit à partir de l&#39;expression régulière
   *suivante :
   *\&quot;#DEMANDE_CONCOURS#\&quot;{libelle_cadre_conventionnel}\&quot;#\&quot;{code_cadre_conventionnel}\&quot;#\&quot;
   *où le code_cadre_conventionnel est issue d&#39;une nomenclature CISU-Cadre
   *Conventionnel (A Venir) NB : ce champ est détourné par rapport au standard
   *EMSI pour permettre l&#39;expression d&#39;une demande de concours et
   *indiquer le cadre conventionnel dans lequel elle est effectuée. Pour une
   *réponse à demande de concours : - Le nom de la mission est construit à
   *partir de l&#39;expression régulière suivante :
   *\&quot;#REPONSE_DEMANDE_CONCOURS#\&quot;{code_reponse}\&quot;#\&quot; où le
   *code_reponse peut prendre les valeurs ACCEPTE, REFUS, PARTIELLE, DIVERGENTE
   *- sinon libre
   * @return NAME
   **/
  @JsonProperty(JSON_PROPERTY_N_A_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNAME() {
    return NAME;
  }

  @JsonProperty(JSON_PROPERTY_N_A_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNAME(String NAME) {
    this.NAME = NAME;
  }

  public Mission STATUS(STATUSEnum STATUS) {

    this.STATUS = STATUS;
    return this;
  }

  /**
   * Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au
   *sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD
   *: mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier
   *(Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la
   *valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn)
   *spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est
   *pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le
   *degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté,
   *en pause pour métier, pas de besoin supplémentaire - COM : événement terminé
   *pour le métier (COMplete) Le status de la mission et celui des RESSOURCE
   *associées doit être cohérent et transcodable avec un status ANTARES (voir
   *DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de
   *concours, le champ doit être valorisé à \&quot;NST\&quot;
   * @return STATUS
   **/
  @JsonProperty(JSON_PROPERTY_S_T_A_T_U_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public STATUSEnum getSTATUS() {
    return STATUS;
  }

  @JsonProperty(JSON_PROPERTY_S_T_A_T_U_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSTATUS(STATUSEnum STATUS) {
    this.STATUS = STATUS;
  }

  public Mission START_TIME(OffsetDateTime START_TIME) {

    this.START_TIME = START_TIME;
    return this;
  }

  /**
   * - Dans le cadre d&#39;une réponse à Demande de Concours Horraire cible pour
   *l&#39;arrivée sur les lieux décrites (peut diverger de l&#39;horaire
   *demandé) - Dans le cadre d&#39;une mission décrivant les opérations en cours
   *: Horaire effectif de début de la mission
   * @return START_TIME
   **/
  @JsonProperty(JSON_PROPERTY_S_T_A_R_T_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getSTARTTIME() {
    return START_TIME;
  }

  @JsonProperty(JSON_PROPERTY_S_T_A_R_T_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSTARTTIME(OffsetDateTime START_TIME) {
    this.START_TIME = START_TIME;
  }

  public Mission END_TIME(OffsetDateTime END_TIME) {

    this.END_TIME = END_TIME;
    return this;
  }

  /**
   * A valoriser selon la catégorie de mission : - Dans le cadre d&#39;une
   *mission de réponse à demande de concours : ne pas renseigner - Dans le cadre
   *d&#39;une mission décrivant les opérations en cours :  Si c&#39;est un
   *déplacement, l&#39;heure d&#39;arrivée, si c&#39;est une prise en charge
   *patient/victime, la fin de la prise en charge.
   * @return END_TIME
   **/
  @JsonProperty(JSON_PROPERTY_E_N_D_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getENDTIME() {
    return END_TIME;
  }

  @JsonProperty(JSON_PROPERTY_E_N_D_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setENDTIME(OffsetDateTime END_TIME) {
    this.END_TIME = END_TIME;
  }

  public Mission RESOURCE_ID(List<String> RESOURCE_ID) {

    this.RESOURCE_ID = RESOURCE_ID;
    return this;
  }

  public Mission addRESOURCEIDItem(String RESOURCE_IDItem) {
    if (this.RESOURCE_ID == null) {
      this.RESOURCE_ID = new ArrayList<>();
    }
    this.RESOURCE_ID.add(RESOURCE_IDItem);
    return this;
  }

  /**
   * Get RESOURCE_ID
   * @return RESOURCE_ID
   **/
  @JsonProperty(JSON_PROPERTY_R_E_S_O_U_R_C_E_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRESOURCEID() {
    return RESOURCE_ID;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_R_E_S_O_U_R_C_E_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRESOURCEID(List<String> RESOURCE_ID) {
    if (RESOURCE_ID == null) {
      return;
    }
    if (this.RESOURCE_ID == null) {
      this.RESOURCE_ID = new ArrayList<>();
    }
    this.RESOURCE_ID.addAll(RESOURCE_ID);
  }

  public Mission PARENT_MISSION_ID(List<String> PARENT_MISSION_ID) {

    this.PARENT_MISSION_ID = PARENT_MISSION_ID;
    return this;
  }

  public Mission addPARENTMISSIONIDItem(String PARENT_MISSION_IDItem) {
    if (this.PARENT_MISSION_ID == null) {
      this.PARENT_MISSION_ID = new ArrayList<>();
    }
    this.PARENT_MISSION_ID.add(PARENT_MISSION_IDItem);
    return this;
  }

  /**
   * Get PARENT_MISSION_ID
   * @return PARENT_MISSION_ID
   **/
  @JsonProperty(JSON_PROPERTY_P_A_R_E_N_T_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPARENTMISSIONID() {
    return PARENT_MISSION_ID;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_P_A_R_E_N_T_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPARENTMISSIONID(List<String> PARENT_MISSION_ID) {
    if (PARENT_MISSION_ID == null) {
      return;
    }
    if (this.PARENT_MISSION_ID == null) {
      this.PARENT_MISSION_ID = new ArrayList<>();
    }
    this.PARENT_MISSION_ID.addAll(PARENT_MISSION_ID);
  }

  public Mission CHILD_MISSION_ID(List<String> CHILD_MISSION_ID) {

    this.CHILD_MISSION_ID = CHILD_MISSION_ID;
    return this;
  }

  public Mission addCHILDMISSIONIDItem(String CHILD_MISSION_IDItem) {
    if (this.CHILD_MISSION_ID == null) {
      this.CHILD_MISSION_ID = new ArrayList<>();
    }
    this.CHILD_MISSION_ID.add(CHILD_MISSION_IDItem);
    return this;
  }

  /**
   * Get CHILD_MISSION_ID
   * @return CHILD_MISSION_ID
   **/
  @JsonProperty(JSON_PROPERTY_C_H_I_L_D_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCHILDMISSIONID() {
    return CHILD_MISSION_ID;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_C_H_I_L_D_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCHILDMISSIONID(List<String> CHILD_MISSION_ID) {
    if (CHILD_MISSION_ID == null) {
      return;
    }
    if (this.CHILD_MISSION_ID == null) {
      this.CHILD_MISSION_ID = new ArrayList<>();
    }
    this.CHILD_MISSION_ID.addAll(CHILD_MISSION_ID);
  }

  public Mission MAIN_MISSION_ID(String MAIN_MISSION_ID) {

    this.MAIN_MISSION_ID = MAIN_MISSION_ID;
    return this;
  }

  /**
   * - Dans le cas d&#39;une mission générique de réponse à demande de concours,
   *indiquer l&#39;ID de la mission générique utilisée pour modéliser la demande
   *de concours - Dans le cas d&#39;une mission déclenchée dans le cadre
   *d&#39;une réponse à demande de concours, l&#39;ID de la mission générique de
   *réponse peut être utilisée dans ce champ pour indiquer qu&#39;elle est liée
   *à une réponse
   * @return MAIN_MISSION_ID
   **/
  @JsonProperty(JSON_PROPERTY_M_A_I_N_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMAINMISSIONID() {
    return MAIN_MISSION_ID;
  }

  @JsonProperty(JSON_PROPERTY_M_A_I_N_M_I_S_S_I_O_N_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMAINMISSIONID(String MAIN_MISSION_ID) {
    this.MAIN_MISSION_ID = MAIN_MISSION_ID;
  }

  public Mission POSITION(Position POSITION) {

    this.POSITION = POSITION;
    return this;
  }

  /**
   * Get POSITION
   * @return POSITION
   **/
  @JsonProperty(JSON_PROPERTY_P_O_S_I_T_I_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Position getPOSITION() {
    return POSITION;
  }

  @JsonProperty(JSON_PROPERTY_P_O_S_I_T_I_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPOSITION(Position POSITION) {
    this.POSITION = POSITION;
  }

  public Mission PRIORITY(PRIORITYEnum PRIORITY) {

    this.PRIORITY = PRIORITY;
    return this;
  }

  /**
   * Indique une échelle de priorité pour la demande de concours. Dans le cadre
   *du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ
   *peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un
   *échange des opérations, optionnel. Le champ peut ne pas être émis ni
   *interprété.
   * @return PRIORITY
   **/
  @JsonProperty(JSON_PROPERTY_P_R_I_O_R_I_T_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PRIORITYEnum getPRIORITY() {
    return PRIORITY;
  }

  @JsonProperty(JSON_PROPERTY_P_R_I_O_R_I_T_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPRIORITY(PRIORITYEnum PRIORITY) {
    this.PRIORITY = PRIORITY;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mission mission = (Mission)o;
    return Objects.equals(this.TYPE, mission.TYPE) &&
        Objects.equals(this.FREETEXT, mission.FREETEXT) &&
        Objects.equals(this.ID, mission.ID) &&
        Objects.equals(this.ORG_ID, mission.ORG_ID) &&
        Objects.equals(this.NAME, mission.NAME) &&
        Objects.equals(this.STATUS, mission.STATUS) &&
        Objects.equals(this.START_TIME, mission.START_TIME) &&
        Objects.equals(this.END_TIME, mission.END_TIME) &&
        Objects.equals(this.RESOURCE_ID, mission.RESOURCE_ID) &&
        Objects.equals(this.PARENT_MISSION_ID, mission.PARENT_MISSION_ID) &&
        Objects.equals(this.CHILD_MISSION_ID, mission.CHILD_MISSION_ID) &&
        Objects.equals(this.MAIN_MISSION_ID, mission.MAIN_MISSION_ID) &&
        Objects.equals(this.POSITION, mission.POSITION) &&
        Objects.equals(this.PRIORITY, mission.PRIORITY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(TYPE, FREETEXT, ID, ORG_ID, NAME, STATUS, START_TIME,
                        END_TIME, RESOURCE_ID, PARENT_MISSION_ID,
                        CHILD_MISSION_ID, MAIN_MISSION_ID, POSITION, PRIORITY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mission {\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("    FREETEXT: ").append(toIndentedString(FREETEXT)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    ORG_ID: ").append(toIndentedString(ORG_ID)).append("\n");
    sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
    sb.append("    STATUS: ").append(toIndentedString(STATUS)).append("\n");
    sb.append("    START_TIME: ")
        .append(toIndentedString(START_TIME))
        .append("\n");
    sb.append("    END_TIME: ").append(toIndentedString(END_TIME)).append("\n");
    sb.append("    RESOURCE_ID: ")
        .append(toIndentedString(RESOURCE_ID))
        .append("\n");
    sb.append("    PARENT_MISSION_ID: ")
        .append(toIndentedString(PARENT_MISSION_ID))
        .append("\n");
    sb.append("    CHILD_MISSION_ID: ")
        .append(toIndentedString(CHILD_MISSION_ID))
        .append("\n");
    sb.append("    MAIN_MISSION_ID: ")
        .append(toIndentedString(MAIN_MISSION_ID))
        .append("\n");
    sb.append("    POSITION: ").append(toIndentedString(POSITION)).append("\n");
    sb.append("    PRIORITY: ").append(toIndentedString(PRIORITY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
