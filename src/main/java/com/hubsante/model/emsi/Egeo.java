/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.emsi;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.hubsante.model.emsi.Position;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Egeo
 */
@JsonPropertyOrder({Egeo.JSON_PROPERTY_D_A_T_I_M_E, Egeo.JSON_PROPERTY_T_Y_P_E,
                    Egeo.JSON_PROPERTY_W_E_A_T_H_E_R,
                    Egeo.JSON_PROPERTY_F_R_E_E_T_E_X_T,
                    Egeo.JSON_PROPERTY_P_O_S_I_T_I_O_N})
@JsonTypeName("egeo")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Egeo {
  public static final String JSON_PROPERTY_D_A_T_I_M_E = "DATIME";
  private OffsetDateTime DATIME;

  /**
   * Optionnel La localisation de l&#39;affaire est transmise en amont dans un
   * message RC-EDA et le lieu souhaité pour l&#39;intervention est
   * systématiquement reprécisé dans un objet MISSION. A constituer depuis
   * ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\
   * plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par
   * type différents
   */
  public enum TYPEEnum {
    AIR(String.valueOf("AIR")),

    CMB(String.valueOf("CMB")),

    DGR(String.valueOf("DGR")),

    FLAME(String.valueOf("FLAME")),

    GEN(String.valueOf("GEN")),

    PLUME(String.valueOf("PLUME")),

    SMOKE(String.valueOf("SMOKE")),

    VULN(String.valueOf("VULN")),

    AIR_COR(String.valueOf("AIR/COR")),

    AIR_FLDZ(String.valueOf("AIR/FLDZ")),

    AIR_LZ(String.valueOf("AIR/LZ")),

    AIR_NOFLZN(String.valueOf("AIR/NOFLZN")),

    AIR_PZ(String.valueOf("AIR/PZ")),

    AIR_UAVASP(String.valueOf("AIR/UAVASP")),

    CMB_CZ(String.valueOf("CMB/CZ")),

    CMB_DNGR(String.valueOf("CMB/DNGR")),

    CMB_EXTZN(String.valueOf("CMB/EXTZN")),

    CMB_IMPTPT(String.valueOf("CMB/IMPTPT")),

    DGR_BIO(String.valueOf("DGR/BIO")),

    DGR_BOMB(String.valueOf("DGR/BOMB")),

    DGR_CBRNHZ(String.valueOf("DGR/CBRNHZ")),

    DGR_CBRNRSD(String.valueOf("DGR/CBRNRSD")),

    DGR_CHM(String.valueOf("DGR/CHM")),

    DGR_HZD(String.valueOf("DGR/HZD")),

    DGR_MIND(String.valueOf("DGR/MIND")),

    DGR_NGA(String.valueOf("DGR/NGA")),

    DGR_NGACIV(String.valueOf("DGR/NGACIV")),

    DGR_NUKCNL(String.valueOf("DGR/NUKCNL")),

    DGR_OBSGEN(String.valueOf("DGR/OBSGEN")),

    DGR_PRHBAR(String.valueOf("DGR/PRHBAR")),

    DGR_RAD(String.valueOf("DGR/RAD")),

    DGR_RADCLD(String.valueOf("DGR/RADCLD")),

    DGR_RSTR(String.valueOf("DGR/RSTR")),

    DGR_SGA(String.valueOf("DGR/SGA")),

    DGR_SITKIL(String.valueOf("DGR/SITKIL")),

    DGR_UNXOD(String.valueOf("DGR/UNXOD")),

    GEN_AOR(String.valueOf("GEN/AOR")),

    GEN_ASYGEN(String.valueOf("GEN/ASYGEN")),

    GEN_ASYSPL(String.valueOf("GEN/ASYSPL")),

    GEN_BDYOR(String.valueOf("GEN/BDYOR")),

    GEN_BDYPOA(String.valueOf("GEN/BDYPOA")),

    GEN_BDYPT(String.valueOf("GEN/BDYPT")),

    GEN_CKPGEN(String.valueOf("GEN/CKPGEN")),

    GEN_CNTPTL(String.valueOf("GEN/CNTPTL")),

    GEN_COLDZ(String.valueOf("GEN/COLDZ")),

    GEN_COMCKP(String.valueOf("GEN/COMCKP")),

    GEN_COMLOW(String.valueOf("GEN/COMLOW")),

    GEN_COMMZ(String.valueOf("GEN/COMMZ")),

    GEN_COMUP(String.valueOf("GEN/COMUP")),

    GEN_CONTAR(String.valueOf("GEN/CONTAR")),

    GEN_CORDON(String.valueOf("GEN/CORDON")),

    GEN_CRDPNT(String.valueOf("GEN/CRDPNT")),

    GEN_DIVRT(String.valueOf("GEN/DIVRT")),

    GEN_DROPPT(String.valueOf("GEN/DROPPT")),

    GEN_ENTPT(String.valueOf("GEN/ENTPT")),

    GEN_EVENT(String.valueOf("GEN/EVENT")),

    GEN_EXITPT(String.valueOf("GEN/EXITPT")),

    GEN_FWCTPT(String.valueOf("GEN/FWCTPT")),

    GEN_HOTZ(String.valueOf("GEN/HOTZ")),

    GEN_INCGRD(String.valueOf("GEN/INCGRD")),

    GEN_LA(String.valueOf("GEN/LA")),

    GEN_LIMARE(String.valueOf("GEN/LIMARE")),

    GEN_LOCAT(String.valueOf("GEN/LOCAT")),

    GEN_MSR(String.valueOf("GEN/MSR")),

    GEN_PSSGPT(String.valueOf("GEN/PSSGPT")),

    GEN_PTINT(String.valueOf("GEN/PTINT")),

    GEN_RCNSAR(String.valueOf("GEN/RCNSAR")),

    GEN_RNDZPT(String.valueOf("GEN/RNDZPT")),

    GEN_ROUTE(String.valueOf("GEN/ROUTE")),

    GEN_SAFERT(String.valueOf("GEN/SAFERT")),

    GEN_SAFZ(String.valueOf("GEN/SAFZ")),

    GEN_SARPNT(String.valueOf("GEN/SARPNT")),

    GEN_SEARAR(String.valueOf("GEN/SEARAR")),

    GEN_SPRISK(String.valueOf("GEN/SPRISK")),

    GEN_STRTPT(String.valueOf("GEN/STRTPT")),

    GEN_SUPARE(String.valueOf("GEN/SUPARE")),

    GEN_SUPPT(String.valueOf("GEN/SUPPT")),

    GEN_TRSTRT(String.valueOf("GEN/TRSTRT")),

    GEN_WARMZ(String.valueOf("GEN/WARMZ"));

    private String value;

    TYPEEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TYPEEnum fromValue(String value) {
      for (TYPEEnum b : TYPEEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_T_Y_P_E = "TYPE";
  private TYPEEnum TYPE;

  /**
   * Optionnel La localisation de l&#39;affaire est transmise en amont dans un
   * message RC-EDA et le lieu souhaité pour l&#39;intervention est
   * systématiquement reprécisé dans un objet MISSION
   */
  public enum WEATHEREnum {
    HUM(String.valueOf("HUM")),

    ICY(String.valueOf("ICY")),

    TDS(String.valueOf("TDS")),

    TMP(String.valueOf("TMP")),

    VIS(String.valueOf("VIS")),

    WDS(String.valueOf("WDS")),

    WIN(String.valueOf("WIN")),

    HUM_CORECT(String.valueOf("HUM/CORECT")),

    HUM_DRZLE(String.valueOf("HUM/DRZLE")),

    HUM_FOG(String.valueOf("HUM/FOG")),

    HUM_RAIN(String.valueOf("HUM/RAIN")),

    HUM_RAINSR(String.valueOf("HUM/RAINSR")),

    HUM_THSTRN(String.valueOf("HUM/THSTRN")),

    ICY_BLWSNW(String.valueOf("ICY/BLWSNW")),

    ICY_CLRICE(String.valueOf("ICY/CLRICE")),

    ICY_CORECT(String.valueOf("ICY/CORECT")),

    ICY_FDRZLE(String.valueOf("ICY/FDRZLE")),

    ICY_FRAIN(String.valueOf("ICY/FRAIN")),

    ICY_FRZFOG(String.valueOf("ICY/FRZFOG")),

    ICY_HAIL(String.valueOf("ICY/HAIL")),

    ICY_ICECRY(String.valueOf("ICY/ICECRY")),

    ICY_ICEPLT(String.valueOf("ICY/ICEPLT")),

    ICY_MIXICE(String.valueOf("ICY/MIXICE")),

    ICY_RIMICE(String.valueOf("ICY/RIMICE")),

    ICY_SLEET(String.valueOf("ICY/SLEET")),

    ICY_SNOW(String.valueOf("ICY/SNOW")),

    ICY_SNWGRN(String.valueOf("ICY/SNWGRN")),

    ICY_SNWSHR(String.valueOf("ICY/SNWSHR")),

    TDS_CORECT(String.valueOf("TDS/CORECT")),

    TDS_LGTNNG(String.valueOf("TDS/LGTNNG")),

    TDS_THST(String.valueOf("TDS/THST")),

    VIS_CORECT(String.valueOf("VIS/CORECT")),

    VIS_HAZE(String.valueOf("VIS/HAZE")),

    VIS_SMOKE(String.valueOf("VIS/SMOKE")),

    WIN_CORECT(String.valueOf("WIN/CORECT")),

    WIN_CYCL(String.valueOf("WIN/CYCL")),

    WIN_DSTDVL(String.valueOf("WIN/DSTDVL")),

    WIN_DSTSND(String.valueOf("WIN/DSTSND")),

    WIN_DSTSTR(String.valueOf("WIN/DSTSTR")),

    WIN_FNLCLD(String.valueOf("WIN/FNLCLD")),

    WIN_HURR(String.valueOf("WIN/HURR")),

    WIN_SNDSTR(String.valueOf("WIN/SNDSTR")),

    WIN_STORM(String.valueOf("WIN/STORM")),

    WIN_TORN(String.valueOf("WIN/TORN")),

    WIN_TRST(String.valueOf("WIN/TRST")),

    WIN_TYPH(String.valueOf("WIN/TYPH")),

    WIN_WHIR(String.valueOf("WIN/WHIR")),

    WIN_WTRSPT(String.valueOf("WIN/WTRSPT"));

    private String value;

    WEATHEREnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WEATHEREnum fromValue(String value) {
      for (WEATHEREnum b : WEATHEREnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_W_E_A_T_H_E_R = "WEATHER";
  private List<WEATHEREnum> WEATHER = new ArrayList<>();

  public static final String JSON_PROPERTY_F_R_E_E_T_E_X_T = "FREETEXT";
  private String FREETEXT;

  public static final String JSON_PROPERTY_P_O_S_I_T_I_O_N = "POSITION";
  private Position POSITION;

  public Egeo() {}

  public Egeo DATIME(OffsetDateTime DATIME) {

    this.DATIME = DATIME;
    return this;
  }

  /**
   * Optionnel La localisation de l&#39;affaire est transmise en amont dans un
   *message RC-EDA et le lieu souhaité pour l&#39;intervention est
   *systématiquement reprécisé dans un objet MISSION
   * @return DATIME
   **/
  @JsonProperty(JSON_PROPERTY_D_A_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDATIME() {
    return DATIME;
  }

  @JsonProperty(JSON_PROPERTY_D_A_T_I_M_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDATIME(OffsetDateTime DATIME) {
    this.DATIME = DATIME;
  }

  public Egeo TYPE(TYPEEnum TYPE) {

    this.TYPE = TYPE;
    return this;
  }

  /**
   * Optionnel La localisation de l&#39;affaire est transmise en amont dans un
   *message RC-EDA et le lieu souhaité pour l&#39;intervention est
   *systématiquement reprécisé dans un objet MISSION. A constituer depuis
   *ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\
   *plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type
   *différents
   * @return TYPE
   **/
  @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TYPEEnum getTYPE() {
    return TYPE;
  }

  @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTYPE(TYPEEnum TYPE) {
    this.TYPE = TYPE;
  }

  public Egeo WEATHER(List<WEATHEREnum> WEATHER) {

    this.WEATHER = WEATHER;
    return this;
  }

  public Egeo addwEATHERItem(WEATHEREnum WEATHERItem) {
    if (this.WEATHER == null) {
      this.WEATHER = new ArrayList<>();
    }
    this.WEATHER.add(WEATHERItem);
    return this;
  }

  /**
   * Get WEATHER
   * @return WEATHER
   **/
  @JsonProperty(JSON_PROPERTY_W_E_A_T_H_E_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WEATHEREnum> getWEATHER() {
    return WEATHER;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_W_E_A_T_H_E_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWEATHER(List<WEATHEREnum> WEATHER) {
    if (WEATHER == null) {
      return;
    }
    if (this.WEATHER == null) {
      this.WEATHER = new ArrayList<>();
    }
    this.WEATHER.addAll(WEATHER);
  }

  public Egeo FREETEXT(String FREETEXT) {

    this.FREETEXT = FREETEXT;
    return this;
  }

  /**
   * Optionnel La localisation de l&#39;affaire est transmise en amont dans un
   *message RC-EDA et le lieu souhaité pour l&#39;intervention est
   *systématiquement reprécisé dans un objet MISSION
   * @return FREETEXT
   **/
  @JsonProperty(JSON_PROPERTY_F_R_E_E_T_E_X_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFREETEXT() {
    return FREETEXT;
  }

  @JsonProperty(JSON_PROPERTY_F_R_E_E_T_E_X_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFREETEXT(String FREETEXT) {
    this.FREETEXT = FREETEXT;
  }

  public Egeo POSITION(Position POSITION) {

    this.POSITION = POSITION;
    return this;
  }

  /**
   * Get POSITION
   * @return POSITION
   **/
  @JsonProperty(JSON_PROPERTY_P_O_S_I_T_I_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Position getPOSITION() {
    return POSITION;
  }

  @JsonProperty(JSON_PROPERTY_P_O_S_I_T_I_O_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPOSITION(Position POSITION) {
    this.POSITION = POSITION;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Egeo egeo = (Egeo)o;
    return Objects.equals(this.DATIME, egeo.DATIME) &&
        Objects.equals(this.TYPE, egeo.TYPE) &&
        Objects.equals(this.WEATHER, egeo.WEATHER) &&
        Objects.equals(this.FREETEXT, egeo.FREETEXT) &&
        Objects.equals(this.POSITION, egeo.POSITION);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DATIME, TYPE, WEATHER, FREETEXT, POSITION);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Egeo {\n");
    sb.append("    DATIME: ").append(toIndentedString(DATIME)).append("\n");
    sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
    sb.append("    WEATHER: ").append(toIndentedString(WEATHER)).append("\n");
    sb.append("    FREETEXT: ").append(toIndentedString(FREETEXT)).append("\n");
    sb.append("    POSITION: ").append(toIndentedString(POSITION)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
