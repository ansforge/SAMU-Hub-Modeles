/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hubsante.model.emsi;

import java.util.Objects;
import java.util.Arrays;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonTypeName;
    import com.fasterxml.jackson.annotation.JsonValue;
    import java.math.BigDecimal;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import com.fasterxml.jackson.annotation.JsonTypeName;

        /**
* PositionRgeo
*/
    @JsonPropertyOrder({
        PositionRgeo.JSON_PROPERTY_L_O_C_I_D,
        PositionRgeo.JSON_PROPERTY_T_Y_P_E,
        PositionRgeo.JSON_PROPERTY_L_A_T,
        PositionRgeo.JSON_PROPERTY_L_O_N_G,
        PositionRgeo.JSON_PROPERTY_H_E_I_G_H_T
    })
            @JsonTypeName("positionRgeo")
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T12:10:46.052+01:00[Europe/Paris]")
public class PositionRgeo {
        public static final String JSON_PROPERTY_L_O_C_I_D = "LOC_ID";
            private String LOC_ID;

              /**
   * Dans le cadre de l&#39;interface LRM NexSIS, seul le libellé POINT doit obligatoirement être interprétable par les deux partenaires. Cf. Nomenclature EMSI - POSITION pour plus de détails
   */
  public enum TYPEEnum {
    POINT("POINT"),
    
    CIRCLE("CIRCLE"),
    
    SURFACE("SURFACE"),
    
    GRID("GRID"),
    
    POLYGON("POLYGON"),
    
    ELLIPSE_("ELLIPSE ");

    private String value;

    TYPEEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TYPEEnum fromValue(String value) {
      for (TYPEEnum b : TYPEEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

        public static final String JSON_PROPERTY_T_Y_P_E = "TYPE";
            private TYPEEnum TYPE;

        public static final String JSON_PROPERTY_L_A_T = "LAT";
            private BigDecimal LAT;

        public static final String JSON_PROPERTY_L_O_N_G = "LONG";
            private BigDecimal LONG;

        public static final String JSON_PROPERTY_H_E_I_G_H_T = "HEIGHT";
            private BigDecimal HEIGHT;

public PositionRgeo() {
}

        public PositionRgeo LOC_ID(String LOC_ID) {
        
        this.LOC_ID = LOC_ID;
        return this;
        }

    /**
        * Lorsque la localisation du lieu d&#39;intervention souhaité est identique à celle d&#39;une position de l&#39;affaire partagée dans le message RC-EDA, le champ MISSION.RGEO.POSITION.LOC_ID doit être alimenté valorisé comme le champ eventLocation.locId du message RC-EDA envoyé en amont
    * @return LOC_ID
    **/
      @JsonProperty(JSON_PROPERTY_L_O_C_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLOCID() {
        return LOC_ID;
    }


          @JsonProperty(JSON_PROPERTY_L_O_C_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLOCID(String LOC_ID) {
                this.LOC_ID = LOC_ID;
        }


        public PositionRgeo TYPE(TYPEEnum TYPE) {
        
        this.TYPE = TYPE;
        return this;
        }

    /**
        * Dans le cadre de l&#39;interface LRM NexSIS, seul le libellé POINT doit obligatoirement être interprétable par les deux partenaires. Cf. Nomenclature EMSI - POSITION pour plus de détails
    * @return TYPE
    **/
      @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TYPEEnum getTYPE() {
        return TYPE;
    }


          @JsonProperty(JSON_PROPERTY_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTYPE(TYPEEnum TYPE) {
                this.TYPE = TYPE;
        }


        public PositionRgeo LAT(BigDecimal LAT) {
        
        this.LAT = LAT;
        return this;
        }

    /**
        * Dans le cas où aucun LOC_ID n&#39;est transféré, permet de localiser l&#39;affaire pour la demande de concours
    * @return LAT
    **/
      @JsonProperty(JSON_PROPERTY_L_A_T)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public BigDecimal getLAT() {
        return LAT;
    }


          @JsonProperty(JSON_PROPERTY_L_A_T)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLAT(BigDecimal LAT) {
                this.LAT = LAT;
        }


        public PositionRgeo LONG(BigDecimal LONG) {
        
        this.LONG = LONG;
        return this;
        }

    /**
        * Dans le cas où aucun LOC_ID n&#39;est transféré, permet de localiser l&#39;affaire pour la demande de concours
    * @return LONG
    **/
      @JsonProperty(JSON_PROPERTY_L_O_N_G)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public BigDecimal getLONG() {
        return LONG;
    }


          @JsonProperty(JSON_PROPERTY_L_O_N_G)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLONG(BigDecimal LONG) {
                this.LONG = LONG;
        }


        public PositionRgeo HEIGHT(BigDecimal HEIGHT) {
        
        this.HEIGHT = HEIGHT;
        return this;
        }

    /**
        * Get HEIGHT
    * @return HEIGHT
    **/
      @JsonProperty(JSON_PROPERTY_H_E_I_G_H_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getHEIGHT() {
        return HEIGHT;
    }


          @JsonProperty(JSON_PROPERTY_H_E_I_G_H_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHEIGHT(BigDecimal HEIGHT) {
                this.HEIGHT = HEIGHT;
        }

@Override
public boolean equals(Object o) {
    if (this == o) {
    return true;
    }
    if (o == null || getClass() != o.getClass()) {
    return false;
    }
        PositionRgeo positionRgeo = (PositionRgeo) o;
        return Objects.equals(this.LOC_ID, positionRgeo.LOC_ID) &&
        Objects.equals(this.TYPE, positionRgeo.TYPE) &&
        Objects.equals(this.LAT, positionRgeo.LAT) &&
        Objects.equals(this.LONG, positionRgeo.LONG) &&
        Objects.equals(this.HEIGHT, positionRgeo.HEIGHT);
}

    @Override
    public int hashCode() {
        return Objects.hash(LOC_ID
            , TYPE
            , LAT
            , LONG
            , HEIGHT);
    }

    @Override
    public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionRgeo {\n");
        sb.append("    LOC_ID: ").append(toIndentedString(LOC_ID)).append("\n");
        sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
        sb.append("    LAT: ").append(toIndentedString(LAT)).append("\n");
        sb.append("    LONG: ").append(toIndentedString(LONG)).append("\n");
        sb.append("    HEIGHT: ").append(toIndentedString(HEIGHT)).append("\n");
    sb.append("}");
    return sb.toString();
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
    if (o == null) {
    return "null";
    }
    return o.toString().replace("\n", "\n    ");
    }

    }
