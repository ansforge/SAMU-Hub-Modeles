/**
 * Copyright Â© 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.emsi;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Etype
 */
@JsonPropertyOrder(
    {Etype.JSON_PROPERTY_C_A_T_E_G_O_R_Y, Etype.JSON_PROPERTY_A_C_T_O_R,
     Etype.JSON_PROPERTY_L_O_C_T_Y_P_E, Etype.JSON_PROPERTY_E_N_V})
@JsonTypeName("etype")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Etype {
  public static final String JSON_PROPERTY_C_A_T_E_G_O_R_Y = "CATEGORY";
  private List<String> CATEGORY = new ArrayList<>();

  public static final String JSON_PROPERTY_A_C_T_O_R = "ACTOR";
  private List<String> ACTOR = new ArrayList<>();

  public static final String JSON_PROPERTY_L_O_C_T_Y_P_E = "LOCTYPE";
  private List<String> LOCTYPE = new ArrayList<>();

  public static final String JSON_PROPERTY_E_N_V = "ENV";
  private String ENV;

  public Etype() {}

  public Etype CATEGORY(List<String> CATEGORY) {

    this.CATEGORY = CATEGORY;
    return this;
  }

  public Etype addCATEGORYItem(String CATEGORYItem) {
    if (this.CATEGORY == null) {
      this.CATEGORY = new ArrayList<>();
    }
    this.CATEGORY.add(CATEGORYItem);
    return this;
  }

  /**
   * Get CATEGORY
   * @return CATEGORY
   **/
  @JsonProperty(JSON_PROPERTY_C_A_T_E_G_O_R_Y)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getCATEGORY() {
    return CATEGORY;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_C_A_T_E_G_O_R_Y)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCATEGORY(List<String> CATEGORY) {
    if (CATEGORY == null) {
      return;
    }
    if (this.CATEGORY == null) {
      this.CATEGORY = new ArrayList<>();
    }
    this.CATEGORY.addAll(CATEGORY);
  }

  public Etype ACTOR(List<String> ACTOR) {

    this.ACTOR = ACTOR;
    return this;
  }

  public Etype addACTORItem(String ACTORItem) {
    if (this.ACTOR == null) {
      this.ACTOR = new ArrayList<>();
    }
    this.ACTOR.add(ACTORItem);
    return this;
  }

  /**
   * Get ACTOR
   * @return ACTOR
   **/
  @JsonProperty(JSON_PROPERTY_A_C_T_O_R)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getACTOR() {
    return ACTOR;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_A_C_T_O_R)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setACTOR(List<String> ACTOR) {
    if (ACTOR == null) {
      return;
    }
    if (this.ACTOR == null) {
      this.ACTOR = new ArrayList<>();
    }
    this.ACTOR.addAll(ACTOR);
  }

  public Etype LOCTYPE(List<String> LOCTYPE) {

    this.LOCTYPE = LOCTYPE;
    return this;
  }

  public Etype addLOCTYPEItem(String LOCTYPEItem) {
    if (this.LOCTYPE == null) {
      this.LOCTYPE = new ArrayList<>();
    }
    this.LOCTYPE.add(LOCTYPEItem);
    return this;
  }

  /**
   * Get LOCTYPE
   * @return LOCTYPE
   **/
  @JsonProperty(JSON_PROPERTY_L_O_C_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getLOCTYPE() {
    return LOCTYPE;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_L_O_C_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLOCTYPE(List<String> LOCTYPE) {
    if (LOCTYPE == null) {
      return;
    }
    if (this.LOCTYPE == null) {
      this.LOCTYPE = new ArrayList<>();
    }
    this.LOCTYPE.addAll(LOCTYPE);
  }

  public Etype ENV(String ENV) {

    this.ENV = ENV;
    return this;
  }

  /**
   * Optionnel
   * @return ENV
   **/
  @JsonProperty(JSON_PROPERTY_E_N_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getENV() {
    return ENV;
  }

  @JsonProperty(JSON_PROPERTY_E_N_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setENV(String ENV) {
    this.ENV = ENV;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Etype etype = (Etype)o;
    return Objects.equals(this.CATEGORY, etype.CATEGORY) &&
        Objects.equals(this.ACTOR, etype.ACTOR) &&
        Objects.equals(this.LOCTYPE, etype.LOCTYPE) &&
        Objects.equals(this.ENV, etype.ENV);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CATEGORY, ACTOR, LOCTYPE, ENV);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Etype {\n");
    sb.append("    CATEGORY: ").append(toIndentedString(CATEGORY)).append("\n");
    sb.append("    ACTOR: ").append(toIndentedString(ACTOR)).append("\n");
    sb.append("    LOCTYPE: ").append(toIndentedString(LOCTYPE)).append("\n");
    sb.append("    ENV: ").append(toIndentedString(ENV)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
