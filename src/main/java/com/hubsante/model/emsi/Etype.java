/**
 * Copyright © 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.emsi;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Etype
 */
@JsonPropertyOrder(
    {Etype.JSON_PROPERTY_C_A_T_E_G_O_R_Y, Etype.JSON_PROPERTY_A_C_T_O_R,
     Etype.JSON_PROPERTY_L_O_C_T_Y_P_E, Etype.JSON_PROPERTY_E_N_V})
@JsonTypeName("etype")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Etype {

  /**
   * Le champ peut ne pas être interprété ou renseigné avec une valeur comme
   * &#39;UKN&#39; &#x3D; &#39;UNKOWN&#39; A constituer depuis
   * ref_mapping_EMSI&lt;ETYPE&gt;&lt;CATEGORY&gt;_NEXSIS
   */
  public enum CATEGORYEnum {
    ASB(String.valueOf("ASB")),

    ASR(String.valueOf("ASR")),

    EXP(String.valueOf("EXP")),

    FIR(String.valueOf("FIR")),

    FLD(String.valueOf("FLD")),

    GND(String.valueOf("GND")),

    HLT(String.valueOf("HLT")),

    POL(String.valueOf("POL")),

    PSW(String.valueOf("PSW")),

    TRP(String.valueOf("TRP")),

    ASB_ABV(String.valueOf("ASB/ABV")),

    ASR_ATM(String.valueOf("ASR/ATM")),

    ASR_HGT(String.valueOf("ASR/HGT")),

    ASR_ICE(String.valueOf("ASR/ICE")),

    ASR_MAR(String.valueOf("ASR/MAR")),

    ASR_SIL(String.valueOf("ASR/SIL")),

    ASR_TRP(String.valueOf("ASR/TRP")),

    ASR_UDG(String.valueOf("ASR/UDG")),

    ASR_WAT(String.valueOf("ASR/WAT")),

    EXP_AER(String.valueOf("EXP/AER")),

    EXP_AMM(String.valueOf("EXP/AMM")),

    EXP_BLEVE(String.valueOf("EXP/BLEVE")),

    EXP_CHM(String.valueOf("EXP/CHM")),

    EXP_CYL(String.valueOf("EXP/CYL")),

    EXP_DST(String.valueOf("EXP/DST")),

    EXP_FRW(String.valueOf("EXP/FRW")),

    EXP_GAS(String.valueOf("EXP/GAS")),

    EXP_HGHFLM(String.valueOf("EXP/HGHFLM")),

    EXP_HPP(String.valueOf("EXP/HPP")),

    EXP_IMP(String.valueOf("EXP/IMP")),

    EXP_LPG(String.valueOf("EXP/LPG")),

    EXP_NUK(String.valueOf("EXP/NUK")),

    EXP_PRD(String.valueOf("EXP/PRD")),

    EXP_UKN(String.valueOf("EXP/UKN")),

    FIR_CLA(String.valueOf("FIR/CLA")),

    FIR_CLB(String.valueOf("FIR/CLB")),

    FIR_CLC(String.valueOf("FIR/CLC")),

    FIR_CLD(String.valueOf("FIR/CLD")),

    FIR_UKN(String.valueOf("FIR/UKN")),

    FLD_FLS(String.valueOf("FLD/FLS")),

    FLD_PLN(String.valueOf("FLD/PLN")),

    FLD_TID(String.valueOf("FLD/TID")),

    GND_AVL(String.valueOf("GND/AVL")),

    GND_EQK(String.valueOf("GND/EQK")),

    GND_GEY(String.valueOf("GND/GEY")),

    GND_LDS(String.valueOf("GND/LDS")),

    GND_MUD(String.valueOf("GND/MUD")),

    GND_SUB(String.valueOf("GND/SUB")),

    GND_VUL(String.valueOf("GND/VUL")),

    HLT_EPI(String.valueOf("HLT/EPI")),

    HLT_FMN(String.valueOf("HLT/FMN")),

    HLT_NDS(String.valueOf("HLT/NDS")),

    POL_BIO(String.valueOf("POL/BIO")),

    POL_CHM(String.valueOf("POL/CHM")),

    POL_NUK(String.valueOf("POL/NUK")),

    POL_RAD(String.valueOf("POL/RAD")),

    PSW_ALM(String.valueOf("PSW/ALM")),

    PSW_ASY(String.valueOf("PSW/ASY")),

    PSW_DEM(String.valueOf("PSW/DEM")),

    PSW_IMM(String.valueOf("PSW/IMM")),

    PSW_MEV(String.valueOf("PSW/MEV")),

    PSW_MIS(String.valueOf("PSW/MIS")),

    PSW_PKG(String.valueOf("PSW/PKG")),

    PSW_PRO(String.valueOf("PSW/PRO")),

    PSW_PRSUIT(String.valueOf("PSW/PRSUIT")),

    PSW_RIOT(String.valueOf("PSW/RIOT")),

    PSW_SUS(String.valueOf("PSW/SUS")),

    PSW_WNG(String.valueOf("PSW/WNG")),

    TRP_BRK(String.valueOf("TRP/BRK")),

    TRP_COL(String.valueOf("TRP/COL")),

    TRP_CRS(String.valueOf("TRP/CRS"));

    private String value;

    CATEGORYEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CATEGORYEnum fromValue(String value) {
      for (CATEGORYEnum b : CATEGORYEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_C_A_T_E_G_O_R_Y = "CATEGORY";
  private List<CATEGORYEnum> CATEGORY = new ArrayList<>();

  /**
   * Dans de futures versions de NexSIS, les demandes de concours seront
   * diffusées à plusieurs partenaires. Seul le système de la force concernée
   * par la demande de concours devra répondre effectivement à la demande. Ce
   * système de la force concernée sera identifié comme le
   * \&quot;concourant\&quot; à la demande de concours. Le libellé du champ
   * ACTOR permet d&#39;identifier le concourant souhaité dans la demande de
   * concours. Pour les premières implémentations du contrat d&#39;interface
   * 15-18, il n&#39;y a pas de nécessité pour les systèmes récepteurs de
   * filtrer les demandes de concours reçues via le Hub Santé. Le champ MISSION
   * TYPE permet en complément d&#39;identifier l&#39;effet à obtenir souhaité à
   * partir de la combinaison du code ACTOR et du code TYPE. Le transcodage
   * entre ces deux nomenclature est décrit dans l&#39;annexe \&quot;Référentiel
   * Effets à Obtenir - correspondance EMSI\&quot;
   */
  public enum ACTOREnum {
    ANI(String.valueOf("ANI")),

    BEV(String.valueOf("BEV")),

    PPL(String.valueOf("PPL")),

    VEH(String.valueOf("VEH")),

    ANI_CON(String.valueOf("ANI/CON")),

    ANI_DEA(String.valueOf("ANI/DEA")),

    ANI_DGR(String.valueOf("ANI/DGR")),

    ANI_FRM(String.valueOf("ANI/FRM")),

    ANI_HRD(String.valueOf("ANI/HRD")),

    ANI_INJ(String.valueOf("ANI/INJ")),

    ANI_LIV(String.valueOf("ANI/LIV")),

    ANI_PET(String.valueOf("ANI/PET")),

    ANI_PRO(String.valueOf("ANI/PRO")),

    ANI_SPC(String.valueOf("ANI/SPC")),

    ANI_WLD(String.valueOf("ANI/WLD")),

    BEV_ASR(String.valueOf("BEV/ASR")),

    BEV_IND(String.valueOf("BEV/IND")),

    BEV_NRES(String.valueOf("BEV/NRES")),

    BEV_OFF(String.valueOf("BEV/OFF")),

    BEV_OTH(String.valueOf("BEV/OTH")),

    BEV_RESDW(String.valueOf("BEV/RESDW")),

    BEV_RESIN(String.valueOf("BEV/RESIN")),

    BEV_RESINT(String.valueOf("BEV/RESINT")),

    BEV_RESOTH(String.valueOf("BEV/RESOTH")),

    BEV_SHP(String.valueOf("BEV/SHP")),

    PPL_1(String.valueOf("PPL/1")),

    PPL_ADU(String.valueOf("PPL/ADU")),

    PPL_CHD(String.valueOf("PPL/CHD")),

    PPL_CNT(String.valueOf("PPL/CNT")),

    PPL_DED(String.valueOf("PPL/DED")),

    PPL_EVC(String.valueOf("PPL/EVC")),

    PPL_GND(String.valueOf("PPL/GND")),

    PPL_GRP(String.valueOf("PPL/GRP")),

    PPL_HST(String.valueOf("PPL/HST")),

    PPL_INT(String.valueOf("PPL/INT")),

    PPL_OTH(String.valueOf("PPL/OTH")),

    PPL_PRS(String.valueOf("PPL/PRS")),

    PPL_SNS(String.valueOf("PPL/SNS")),

    PPL_VIO(String.valueOf("PPL/VIO")),

    PPL_VLN(String.valueOf("PPL/VLN")),

    PPL_WTN(String.valueOf("PPL/WTN")),

    PPL_CHD_BAB(String.valueOf("PPL/CHD/BAB")),

    PPL_CHD_CHILD(String.valueOf("PPL/CHD/CHILD")),

    PPL_CHD_INF(String.valueOf("PPL/CHD/INF")),

    PPL_CHD_YOUTH(String.valueOf("PPL/CHD/YOUTH")),

    PPL_GND_FML(String.valueOf("PPL/GND/FML")),

    PPL_GND_MAL(String.valueOf("PPL/GND/MAL")),

    PPL_GND_UND(String.valueOf("PPL/GND/UND")),

    PPL_HST_PCF(String.valueOf("PPL/HST/PCF")),

    PPL_HST_SUI(String.valueOf("PPL/HST/SUI")),

    PPL_HST_THT(String.valueOf("PPL/HST/THT")),

    PPL_HST_WPN(String.valueOf("PPL/HST/WPN")),

    PPL_PRS_CST(String.valueOf("PPL/PRS/CST")),

    PPL_PRS_ESC(String.valueOf("PPL/PRS/ESC")),

    PPL_PRS_HGS(String.valueOf("PPL/PRS/HGS")),

    PPL_SNS_ETH(String.valueOf("PPL/SNS/ETH")),

    PPL_SNS_FOR(String.valueOf("PPL/SNS/FOR")),

    PPL_SNS_LAN(String.valueOf("PPL/SNS/LAN")),

    PPL_SNS_REL(String.valueOf("PPL/SNS/REL")),

    PPL_SNS_VIP(String.valueOf("PPL/SNS/VIP")),

    PPL_VLN_BLD(String.valueOf("PPL/VLN/BLD")),

    PPL_VLN_DEF(String.valueOf("PPL/VLN/DEF")),

    PPL_VLN_DSB(String.valueOf("PPL/VLN/DSB")),

    PPL_VLN_ELD(String.valueOf("PPL/VLN/ELD")),

    PPL_VLN_INJ(String.valueOf("PPL/VLN/INJ")),

    PPL_VLN_LDF(String.valueOf("PPL/VLN/LDF")),

    PPL_VLN_OBS(String.valueOf("PPL/VLN/OBS")),

    PPL_VLN_PAT(String.valueOf("PPL/VLN/PAT")),

    PPL_VLN_PGN(String.valueOf("PPL/VLN/PGN")),

    PPL_VLN_SLFPRS(String.valueOf("PPL/VLN/SLFPRS")),

    PPL_VLN_UNC(String.valueOf("PPL/VLN/UNC")),

    VEH_AIR(String.valueOf("VEH/AIR")),

    VEH_ANI(String.valueOf("VEH/ANI")),

    VEH_BIC(String.valueOf("VEH/BIC")),

    VEH_CAR(String.valueOf("VEH/CAR")),

    VEH_EMG(String.valueOf("VEH/EMG")),

    VEH_MBK(String.valueOf("VEH/MBK")),

    VEH_MIL(String.valueOf("VEH/MIL")),

    VEH_OTH(String.valueOf("VEH/OTH")),

    VEH_TRK(String.valueOf("VEH/TRK")),

    VEH_TRN(String.valueOf("VEH/TRN")),

    VEH_VES(String.valueOf("VEH/VES")),

    VEH_AIR_ARM(String.valueOf("VEH/AIR/ARM")),

    VEH_AIR_FLBA(String.valueOf("VEH/AIR/FLBA")),

    VEH_AIR_FRG(String.valueOf("VEH/AIR/FRG")),

    VEH_AIR_FXBA(String.valueOf("VEH/AIR/FXBA")),

    VEH_AIR_GLD(String.valueOf("VEH/AIR/GLD")),

    VEH_AIR_HEL(String.valueOf("VEH/AIR/HEL")),

    VEH_AIR_HVY(String.valueOf("VEH/AIR/HVY")),

    VEH_AIR_JET(String.valueOf("VEH/AIR/JET")),

    VEH_AIR_LGT(String.valueOf("VEH/AIR/LGT")),

    VEH_AIR_MIL(String.valueOf("VEH/AIR/MIL")),

    VEH_AIR_ORD(String.valueOf("VEH/AIR/ORD")),

    VEH_AIR_OTH(String.valueOf("VEH/AIR/OTH")),

    VEH_AIR_PAS(String.valueOf("VEH/AIR/PAS")),

    VEH_AIR_PRBA(String.valueOf("VEH/AIR/PRBA")),

    VEH_AIR_PST(String.valueOf("VEH/AIR/PST")),

    VEH_AIR_RKT(String.valueOf("VEH/AIR/RKT")),

    VEH_AIR_SEA(String.valueOf("VEH/AIR/SEA")),

    VEH_AIR_SNO(String.valueOf("VEH/AIR/SNO")),

    VEH_AIR_TNK(String.valueOf("VEH/AIR/TNK")),

    VEH_AIR_UAV(String.valueOf("VEH/AIR/UAV")),

    VEH_AIR_ULG(String.valueOf("VEH/AIR/ULG")),

    VEH_OTH_HIL(String.valueOf("VEH/OTH/HIL")),

    VEH_OTH_SNO(String.valueOf("VEH/OTH/SNO")),

    VEH_TRK_ART(String.valueOf("VEH/TRK/ART")),

    VEH_TRK_EXC(String.valueOf("VEH/TRK/EXC")),

    VEH_TRK_HZD(String.valueOf("VEH/TRK/HZD")),

    VEH_TRK_NHZ(String.valueOf("VEH/TRK/NHZ")),

    VEH_TRK_NUK(String.valueOf("VEH/TRK/NUK")),

    VEH_TRK_REF(String.valueOf("VEH/TRK/REF")),

    VEH_TRK_UND(String.valueOf("VEH/TRK/UND")),

    VEH_TRN_3_RL(String.valueOf("VEH/TRN/3RL")),

    VEH_TRN_DSL(String.valueOf("VEH/TRN/DSL")),

    VEH_TRN_HZD(String.valueOf("VEH/TRN/HZD")),

    VEH_TRN_LOC(String.valueOf("VEH/TRN/LOC")),

    VEH_TRN_NHZ(String.valueOf("VEH/TRN/NHZ")),

    VEH_TRN_NUK(String.valueOf("VEH/TRN/NUK")),

    VEH_TRN_OVH(String.valueOf("VEH/TRN/OVH")),

    VEH_TRN_PAS(String.valueOf("VEH/TRN/PAS")),

    VEH_TRN_REF(String.valueOf("VEH/TRN/REF")),

    VEH_TRN_STM(String.valueOf("VEH/TRN/STM")),

    VEH_TRN_TRM(String.valueOf("VEH/TRN/TRM")),

    VEH_TRN_UDG(String.valueOf("VEH/TRN/UDG")),

    VEH_TRN_UND(String.valueOf("VEH/TRN/UND")),

    VEH_TRN_VIP(String.valueOf("VEH/TRN/VIP")),

    VEH_TRN_VLT(String.valueOf("VEH/TRN/VLT")),

    VEH_VES_AMB(String.valueOf("VEH/VES/AMB")),

    VEH_VES_BOT(String.valueOf("VEH/VES/BOT")),

    VEH_VES_CNO(String.valueOf("VEH/VES/CNO")),

    VEH_VES_CRG(String.valueOf("VEH/VES/CRG")),

    VEH_VES_DSL(String.valueOf("VEH/VES/DSL")),

    VEH_VES_FLO(String.valueOf("VEH/VES/FLO")),

    VEH_VES_FRY(String.valueOf("VEH/VES/FRY")),

    VEH_VES_HOV(String.valueOf("VEH/VES/HOV")),

    VEH_VES_HZD(String.valueOf("VEH/VES/HZD")),

    VEH_VES_JSK(String.valueOf("VEH/VES/JSK")),

    VEH_VES_LEI(String.valueOf("VEH/VES/LEI")),

    VEH_VES_LIS(String.valueOf("VEH/VES/LIS")),

    VEH_VES_MIL(String.valueOf("VEH/VES/MIL")),

    VEH_VES_MPW(String.valueOf("VEH/VES/MPW")),

    VEH_VES_NHZ(String.valueOf("VEH/VES/NHZ")),

    VEH_VES_NUK(String.valueOf("VEH/VES/NUK")),

    VEH_VES_PAS(String.valueOf("VEH/VES/PAS")),

    VEH_VES_POL(String.valueOf("VEH/VES/POL")),

    VEH_VES_PTL(String.valueOf("VEH/VES/PTL")),

    VEH_VES_RSC(String.valueOf("VEH/VES/RSC")),

    VEH_VES_SAI(String.valueOf("VEH/VES/SAI")),

    VEH_VES_SBM(String.valueOf("VEH/VES/SBM")),

    VEH_VES_SINK(String.valueOf("VEH/VES/SINK")),

    VEH_VES_SPC(String.valueOf("VEH/VES/SPC")),

    VEH_VES_STE(String.valueOf("VEH/VES/STE")),

    VEH_VES_SUNK(String.valueOf("VEH/VES/SUNK")),

    VEH_VES_UNM(String.valueOf("VEH/VES/UNM"));

    private String value;

    ACTOREnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ACTOREnum fromValue(String value) {
      for (ACTOREnum b : ACTOREnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_A_C_T_O_R = "ACTOR";
  private List<ACTOREnum> ACTOR = new ArrayList<>();

  public static final String JSON_PROPERTY_L_O_C_T_Y_P_E = "LOCTYPE";
  private List<String> LOCTYPE = new ArrayList<>();

  /**
   * Optionnel
   */
  public enum ENVEnum {
    CDIS(String.valueOf("CDIS")),

    DIS(String.valueOf("DIS")),

    TER(String.valueOf("TER")),

    CDIS_RIOT(String.valueOf("CDIS/RIOT")),

    DIS_CBRN(String.valueOf("DIS/CBRN")),

    DIS_ERTHQK(String.valueOf("DIS/ERTHQK")),

    DIS_FIRE(String.valueOf("DIS/FIRE")),

    DIS_FLOOD(String.valueOf("DIS/FLOOD")),

    DIS_INDHAZ(String.valueOf("DIS/INDHAZ")),

    DIS_LNDSLD(String.valueOf("DIS/LNDSLD")),

    DIS_PWROUT(String.valueOf("DIS/PWROUT")),

    DIS_RADCNT(String.valueOf("DIS/RADCNT")),

    DIS_SNOW(String.valueOf("DIS/SNOW")),

    DIS_STCLPS(String.valueOf("DIS/STCLPS")),

    DIS_STORM(String.valueOf("DIS/STORM")),

    DIS_TRSPRT(String.valueOf("DIS/TRSPRT")),

    DIS_TSNAMI(String.valueOf("DIS/TSNAMI"));

    private String value;

    ENVEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ENVEnum fromValue(String value) {
      for (ENVEnum b : ENVEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_E_N_V = "ENV";
  private ENVEnum ENV;

  public Etype() {}

  public Etype CATEGORY(List<CATEGORYEnum> CATEGORY) {

    this.CATEGORY = CATEGORY;
    return this;
  }

  public Etype addcATEGORYItem(CATEGORYEnum CATEGORYItem) {
    if (this.CATEGORY == null) {
      this.CATEGORY = new ArrayList<>();
    }
    this.CATEGORY.add(CATEGORYItem);
    return this;
  }

  /**
   * Get CATEGORY
   * @return CATEGORY
   **/
  @JsonProperty(JSON_PROPERTY_C_A_T_E_G_O_R_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CATEGORYEnum> getCATEGORY() {
    return CATEGORY;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_C_A_T_E_G_O_R_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCATEGORY(List<CATEGORYEnum> CATEGORY) {
    if (CATEGORY == null) {
      return;
    }
    if (this.CATEGORY == null) {
      this.CATEGORY = new ArrayList<>();
    }
    this.CATEGORY.addAll(CATEGORY);
  }

  public Etype ACTOR(List<ACTOREnum> ACTOR) {

    this.ACTOR = ACTOR;
    return this;
  }

  public Etype addaCTORItem(ACTOREnum ACTORItem) {
    if (this.ACTOR == null) {
      this.ACTOR = new ArrayList<>();
    }
    this.ACTOR.add(ACTORItem);
    return this;
  }

  /**
   * Get ACTOR
   * @return ACTOR
   **/
  @JsonProperty(JSON_PROPERTY_A_C_T_O_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ACTOREnum> getACTOR() {
    return ACTOR;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_A_C_T_O_R)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setACTOR(List<ACTOREnum> ACTOR) {
    if (ACTOR == null) {
      return;
    }
    if (this.ACTOR == null) {
      this.ACTOR = new ArrayList<>();
    }
    this.ACTOR.addAll(ACTOR);
  }

  public Etype LOCTYPE(List<String> LOCTYPE) {

    this.LOCTYPE = LOCTYPE;
    return this;
  }

  public Etype addlOCTYPEItem(String LOCTYPEItem) {
    if (this.LOCTYPE == null) {
      this.LOCTYPE = new ArrayList<>();
    }
    this.LOCTYPE.add(LOCTYPEItem);
    return this;
  }

  /**
   * Get LOCTYPE
   * @return LOCTYPE
   **/
  @JsonProperty(JSON_PROPERTY_L_O_C_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLOCTYPE() {
    return LOCTYPE;
  }

  @JacksonXmlElementWrapper(useWrapping = false)

  @JsonProperty(JSON_PROPERTY_L_O_C_T_Y_P_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLOCTYPE(List<String> LOCTYPE) {
    if (LOCTYPE == null) {
      return;
    }
    if (this.LOCTYPE == null) {
      this.LOCTYPE = new ArrayList<>();
    }
    this.LOCTYPE.addAll(LOCTYPE);
  }

  public Etype ENV(ENVEnum ENV) {

    this.ENV = ENV;
    return this;
  }

  /**
   * Optionnel
   * @return ENV
   **/
  @JsonProperty(JSON_PROPERTY_E_N_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ENVEnum getENV() {
    return ENV;
  }

  @JsonProperty(JSON_PROPERTY_E_N_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setENV(ENVEnum ENV) {
    this.ENV = ENV;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Etype etype = (Etype)o;
    return Objects.equals(this.CATEGORY, etype.CATEGORY) &&
        Objects.equals(this.ACTOR, etype.ACTOR) &&
        Objects.equals(this.LOCTYPE, etype.LOCTYPE) &&
        Objects.equals(this.ENV, etype.ENV);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CATEGORY, ACTOR, LOCTYPE, ENV);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Etype {\n");
    sb.append("    CATEGORY: ").append(toIndentedString(CATEGORY)).append("\n");
    sb.append("    ACTOR: ").append(toIndentedString(ACTOR)).append("\n");
    sb.append("    LOCTYPE: ").append(toIndentedString(LOCTYPE)).append("\n");
    sb.append("    ENV: ").append(toIndentedString(ENV)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
