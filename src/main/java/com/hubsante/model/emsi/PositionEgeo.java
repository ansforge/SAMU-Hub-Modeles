/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hubsante.model.emsi;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hubsante.model.emsi.Coord;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.dataformat.xml.annotation.*;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PositionEgeo
 */
@JsonPropertyOrder({
        PositionEgeo.JSON_PROPERTY_L_O_C_I_D,
        PositionEgeo.JSON_PROPERTY_N_A_M_E,
        PositionEgeo.JSON_PROPERTY_T_Y_P_E,
        PositionEgeo.JSON_PROPERTY_H_E_I_G_H_T_R_O_L_E,
        PositionEgeo.JSON_PROPERTY_C_O_O_R_D_S_Y_S,
        PositionEgeo.JSON_PROPERTY_C_O_O_R_D,
        PositionEgeo.JSON_PROPERTY_A_D_D_R_E_S_S
})
@JsonTypeName("positionEgeo")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T11:29:35.594+01:00[Europe/Paris]")
public class PositionEgeo {
    public static final String JSON_PROPERTY_L_O_C_I_D = "LOC_ID";
    private String LOC_ID;

    public static final String JSON_PROPERTY_N_A_M_E = "NAME";
    private String NAME;

    public static final String JSON_PROPERTY_T_Y_P_E = "TYPE";
    private String TYPE;

    public static final String JSON_PROPERTY_H_E_I_G_H_T_R_O_L_E = "HEIGHT_ROLE";
    private String HEIGHT_ROLE;

    public static final String JSON_PROPERTY_C_O_O_R_D_S_Y_S = "COORDSYS";
    private String COORDSYS;

    public static final String JSON_PROPERTY_C_O_O_R_D = "COORD";
    private List<Coord> COORD;

    public static final String JSON_PROPERTY_A_D_D_R_E_S_S = "ADDRESS";
    private List<String> ADDRESS;

    public PositionEgeo() {
    }

    public PositionEgeo LOC_ID(String LOC_ID) {

        this.LOC_ID = LOC_ID;
        return this;
    }

    /**
     * Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété. La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION
     *
     * @return LOC_ID
     **/
    @JsonProperty(JSON_PROPERTY_L_O_C_I_D)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getLOCID() {
        return LOC_ID;
    }


    @JsonProperty(JSON_PROPERTY_L_O_C_I_D)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLOCID(String LOC_ID) {
        this.LOC_ID = LOC_ID;
    }


    public PositionEgeo NAME(String NAME) {

        this.NAME = NAME;
        return this;
    }

    /**
     * Optionnel, non utilisé par NexSIS nom de lieu
     *
     * @return NAME
     **/
    @JsonProperty(JSON_PROPERTY_N_A_M_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getNAME() {
        return NAME;
    }


    @JsonProperty(JSON_PROPERTY_N_A_M_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNAME(String NAME) {
        this.NAME = NAME;
    }


    public PositionEgeo TYPE(String TYPE) {

        this.TYPE = TYPE;
        return this;
    }

    /**
     * Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété. La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION
     *
     * @return TYPE
     **/
    @JsonProperty(JSON_PROPERTY_T_Y_P_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getTYPE() {
        return TYPE;
    }


    @JsonProperty(JSON_PROPERTY_T_Y_P_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTYPE(String TYPE) {
        this.TYPE = TYPE;
    }


    public PositionEgeo HEIGHT_ROLE(String HEIGHT_ROLE) {

        this.HEIGHT_ROLE = HEIGHT_ROLE;
        return this;
    }

    /**
     * Optionnel
     *
     * @return HEIGHT_ROLE
     **/
    @JsonProperty(JSON_PROPERTY_H_E_I_G_H_T_R_O_L_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getHEIGHTROLE() {
        return HEIGHT_ROLE;
    }


    @JsonProperty(JSON_PROPERTY_H_E_I_G_H_T_R_O_L_E)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHEIGHTROLE(String HEIGHT_ROLE) {
        this.HEIGHT_ROLE = HEIGHT_ROLE;
    }


    public PositionEgeo COORDSYS(String COORDSYS) {

        this.COORDSYS = COORDSYS;
        return this;
    }

    /**
     * Optionnel
     *
     * @return COORDSYS
     **/
    @JsonProperty(JSON_PROPERTY_C_O_O_R_D_S_Y_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCOORDSYS() {
        return COORDSYS;
    }


    @JsonProperty(JSON_PROPERTY_C_O_O_R_D_S_Y_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCOORDSYS(String COORDSYS) {
        this.COORDSYS = COORDSYS;
    }


    public PositionEgeo COORD(List<Coord> COORD) {

        this.COORD = COORD;
        return this;
    }

    public PositionEgeo addCOORDItem(Coord COORDItem) {
        if (this.COORD == null) {
            this.COORD = new ArrayList<>();
        }
        this.COORD.add(COORDItem);
        return this;
    }

    /**
     * Get COORD
     *
     * @return COORD
     **/
    @JsonProperty(JSON_PROPERTY_C_O_O_R_D)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Coord> getCOORD() {
        return COORD;
    }

    @JacksonXmlElementWrapper(useWrapping = false)

    @JsonProperty(JSON_PROPERTY_C_O_O_R_D)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCOORD(List<Coord> COORD) {
        if (COORD == null) {
            return;
        }
        if (this.COORD == null) {
            this.COORD = new ArrayList<>();
        }
        this.COORD.addAll(COORD);
    }


    public PositionEgeo ADDRESS(List<String> ADDRESS) {

        this.ADDRESS = ADDRESS;
        return this;
    }

    public PositionEgeo addADDRESSItem(String ADDRESSItem) {
        if (this.ADDRESS == null) {
            this.ADDRESS = new ArrayList<>();
        }
        this.ADDRESS.add(ADDRESSItem);
        return this;
    }

    /**
     * Get ADDRESS
     *
     * @return ADDRESS
     **/
    @JsonProperty(JSON_PROPERTY_A_D_D_R_E_S_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getADDRESS() {
        return ADDRESS;
    }

    @JacksonXmlElementWrapper(useWrapping = false)

    @JsonProperty(JSON_PROPERTY_A_D_D_R_E_S_S)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setADDRESS(List<String> ADDRESS) {
        if (ADDRESS == null) {
            return;
        }
        if (this.ADDRESS == null) {
            this.ADDRESS = new ArrayList<>();
        }
        this.ADDRESS.addAll(ADDRESS);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PositionEgeo positionEgeo = (PositionEgeo) o;
        return Objects.equals(this.LOC_ID, positionEgeo.LOC_ID) &&
                Objects.equals(this.NAME, positionEgeo.NAME) &&
                Objects.equals(this.TYPE, positionEgeo.TYPE) &&
                Objects.equals(this.HEIGHT_ROLE, positionEgeo.HEIGHT_ROLE) &&
                Objects.equals(this.COORDSYS, positionEgeo.COORDSYS) &&
                Objects.equals(this.COORD, positionEgeo.COORD) &&
                Objects.equals(this.ADDRESS, positionEgeo.ADDRESS);
    }

    @Override
    public int hashCode() {
        return Objects.hash(LOC_ID
                , NAME
                , TYPE
                , HEIGHT_ROLE
                , COORDSYS
                , COORD
                , ADDRESS);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PositionEgeo {\n");
        sb.append("    LOC_ID: ").append(toIndentedString(LOC_ID)).append("\n");
        sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
        sb.append("    TYPE: ").append(toIndentedString(TYPE)).append("\n");
        sb.append("    HEIGHT_ROLE: ").append(toIndentedString(HEIGHT_ROLE)).append("\n");
        sb.append("    COORDSYS: ").append(toIndentedString(COORDSYS)).append("\n");
        sb.append("    COORD: ").append(toIndentedString(COORD)).append("\n");
        sb.append("    ADDRESS: ").append(toIndentedString(ADDRESS)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
