/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.rpis;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Destination
 */
@JsonPropertyOrder({Destination.JSON_PROPERTY_DESTINATION_COUNTRY,
                    Destination.JSON_PROPERTY_DESTINATION_CATEGORY,
                    Destination.JSON_PROPERTY_HEALTHCARE_TYPE,
                    Destination.JSON_PROPERTY_FINESS})
@JsonTypeName("destination")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Destination {

  /**
   * A valoriser par le code de la nomenclature associée
   */
  public enum DestinationCountryEnum {
    AF("AF"),

    AX("AX"),

    AL("AL"),

    DZ("DZ"),

    AS("AS"),

    AD("AD"),

    AO("AO"),

    AI("AI"),

    AQ("AQ"),

    AG("AG"),

    AR("AR"),

    AM("AM"),

    AW("AW"),

    AU("AU"),

    AT("AT"),

    AZ("AZ"),

    BS("BS"),

    BH("BH"),

    BD("BD"),

    BB("BB"),

    BY("BY"),

    BE("BE"),

    BZ("BZ"),

    BJ("BJ"),

    BM("BM"),

    BT("BT"),

    BO("BO"),

    BA("BA"),

    BW("BW"),

    BV("BV"),

    BR("BR"),

    IO("IO"),

    BN("BN"),

    BG("BG"),

    BF("BF"),

    BI("BI"),

    CV("CV"),

    KH("KH"),

    CM("CM"),

    CA("CA"),

    KY("KY"),

    CF("CF"),

    TD("TD"),

    CL("CL"),

    CN("CN"),

    CX("CX"),

    CC("CC"),

    CO("CO"),

    KM("KM"),

    CG("CG"),

    CK("CK"),

    CR("CR"),

    CI("CI"),

    HR("HR"),

    CU("CU"),

    CW("CW"),

    CY("CY"),

    CZ("CZ"),

    DK("DK"),

    DJ("DJ"),

    DM("DM"),

    DO("DO"),

    EC("EC"),

    EG("EG"),

    SV("SV"),

    GQ("GQ"),

    ER("ER"),

    EE("EE"),

    SZ("SZ"),

    ET("ET"),

    FK("FK"),

    FO("FO"),

    FJ("FJ"),

    FI("FI"),

    FR("FR"),

    GF("GF"),

    PF("PF"),

    TF("TF"),

    GA("GA"),

    GM("GM"),

    GE("GE"),

    DE("DE"),

    GH("GH"),

    GI("GI"),

    GR("GR"),

    GL("GL"),

    GD("GD"),

    GP("GP"),

    GU("GU"),

    GT("GT"),

    GG("GG"),

    GN("GN"),

    GW("GW"),

    GY("GY"),

    HT("HT"),

    HM("HM"),

    VA("VA"),

    HN("HN"),

    HK("HK"),

    HU("HU"),

    IS("IS"),

    IN("IN"),

    ID("ID"),

    IR("IR"),

    IQ("IQ"),

    IE("IE"),

    IM("IM"),

    IL("IL"),

    IT("IT"),

    JM("JM"),

    JP("JP"),

    JE("JE"),

    JO("JO"),

    KZ("KZ"),

    KE("KE"),

    KI("KI"),

    KP("KP"),

    KW("KW"),

    KG("KG"),

    LA("LA"),

    LV("LV"),

    LB("LB"),

    LS("LS"),

    LR("LR"),

    LY("LY"),

    LI("LI"),

    LT("LT"),

    LU("LU"),

    MO("MO"),

    MG("MG"),

    MW("MW"),

    MY("MY"),

    MV("MV"),

    ML("ML"),

    MT("MT"),

    MH("MH"),

    MQ("MQ"),

    MR("MR"),

    MU("MU"),

    YT("YT"),

    MX("MX"),

    FM("FM"),

    MC("MC"),

    MN("MN"),

    ME("ME"),

    MS("MS"),

    MA("MA"),

    MZ("MZ"),

    MM("MM"),

    NA("NA"),

    NR("NR"),

    NP("NP"),

    NL("NL"),

    NC("NC"),

    NZ("NZ"),

    NI("NI"),

    NE("NE"),

    NG("NG"),

    NU("NU"),

    NF("NF"),

    MK("MK"),

    MP("MP"),

    NO("NO"),

    OM("OM"),

    PK("PK"),

    PW("PW"),

    PA("PA"),

    PG("PG"),

    PY("PY"),

    PE("PE"),

    PH("PH"),

    PN("PN"),

    PL("PL"),

    PT("PT"),

    PR("PR"),

    QA("QA"),

    RE("RE"),

    RO("RO"),

    RU("RU"),

    RW("RW"),

    BL("BL"),

    KN("KN"),

    LC("LC"),

    MF("MF"),

    PM("PM"),

    VC("VC"),

    WS("WS"),

    SM("SM"),

    ST("ST"),

    SA("SA"),

    SN("SN"),

    RS("RS"),

    SC("SC"),

    SL("SL"),

    SG("SG"),

    SX("SX"),

    SK("SK"),

    SI("SI"),

    SB("SB"),

    SO("SO"),

    ZA("ZA"),

    GS("GS"),

    SS("SS"),

    ES("ES"),

    LK("LK"),

    SD("SD"),

    SR("SR"),

    SJ("SJ"),

    SE("SE"),

    CH("CH"),

    SY("SY"),

    TJ("TJ"),

    TH("TH"),

    TL("TL"),

    TG("TG"),

    TK("TK"),

    TO("TO"),

    TT("TT"),

    TN("TN"),

    TR("TR"),

    TM("TM"),

    TC("TC"),

    TV("TV"),

    UG("UG"),

    UA("UA"),

    AE("AE"),

    GB("GB"),

    US("US"),

    UM("UM"),

    UY("UY"),

    UZ("UZ"),

    VU("VU"),

    VE("VE"),

    VN("VN"),

    VG("VG"),

    VI("VI"),

    WF("WF"),

    EH("EH"),

    YE("YE"),

    ZM("ZM"),

    ZW("ZW");

    private String value;

    DestinationCountryEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DestinationCountryEnum fromValue(String value) {
      for (DestinationCountryEnum b : DestinationCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DESTINATION_COUNTRY =
      "destinationCountry";
  private DestinationCountryEnum destinationCountry;

  public static final String JSON_PROPERTY_DESTINATION_CATEGORY =
      "destinationCategory";
  private String destinationCategory;

  public static final String JSON_PROPERTY_HEALTHCARE_TYPE = "healthcareType";
  private String healthcareType;

  public static final String JSON_PROPERTY_FINESS = "finess";
  private String finess;

  public Destination() {}

  public Destination
  destinationCountry(DestinationCountryEnum destinationCountry) {

    this.destinationCountry = destinationCountry;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature associée
   * @return destinationCountry
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DestinationCountryEnum getDestinationCountry() {
    return destinationCountry;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCountry(DestinationCountryEnum destinationCountry) {
    this.destinationCountry = destinationCountry;
  }

  public Destination destinationCategory(String destinationCategory) {

    this.destinationCategory = destinationCategory;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature associée
   * @return destinationCategory
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationCategory() {
    return destinationCategory;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCategory(String destinationCategory) {
    this.destinationCategory = destinationCategory;
  }

  public Destination healthcareType(String healthcareType) {

    this.healthcareType = healthcareType;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature ActiviteOperationnelle (à
   *venir).
   * @return healthcareType
   **/
  @JsonProperty(JSON_PROPERTY_HEALTHCARE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHealthcareType() {
    return healthcareType;
  }

  @JsonProperty(JSON_PROPERTY_HEALTHCARE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcareType(String healthcareType) {
    this.healthcareType = healthcareType;
  }

  public Destination finess(String finess) {

    this.finess = finess;
    return this;
  }

  /**
   * FINESS géographique de l’établissement de destination (9 chiffres)
   * @return finess
   **/
  @JsonProperty(JSON_PROPERTY_FINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFiness() {
    return finess;
  }

  @JsonProperty(JSON_PROPERTY_FINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiness(String finess) {
    this.finess = finess;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Destination destination = (Destination)o;
    return Objects.equals(this.destinationCountry,
                          destination.destinationCountry) &&
        Objects.equals(this.destinationCategory,
                       destination.destinationCategory) &&
        Objects.equals(this.healthcareType, destination.healthcareType) &&
        Objects.equals(this.finess, destination.finess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationCountry, destinationCategory, healthcareType,
                        finess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Destination {\n");
    sb.append("    destinationCountry: ")
        .append(toIndentedString(destinationCountry))
        .append("\n");
    sb.append("    destinationCategory: ")
        .append(toIndentedString(destinationCategory))
        .append("\n");
    sb.append("    healthcareType: ")
        .append(toIndentedString(healthcareType))
        .append("\n");
    sb.append("    finess: ").append(toIndentedString(finess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
