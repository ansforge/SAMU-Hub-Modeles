/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.rpis;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Destination
 */
@JsonPropertyOrder({Destination.JSON_PROPERTY_DESTINATION_COUNTRY,
                    Destination.JSON_PROPERTY_DESTINATION_CATEGORY,
                    Destination.JSON_PROPERTY_HEALTHCARE_TYPE,
                    Destination.JSON_PROPERTY_FINESS})
@JsonTypeName("destination")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Destination {

  /**
   * A valoriser par le code de la nomenclature associée
   */
  public enum DestinationCountryEnum {
    AF(String.valueOf("AF")),

    AX(String.valueOf("AX")),

    AL(String.valueOf("AL")),

    DZ(String.valueOf("DZ")),

    AS(String.valueOf("AS")),

    AD(String.valueOf("AD")),

    AO(String.valueOf("AO")),

    AI(String.valueOf("AI")),

    AQ(String.valueOf("AQ")),

    AG(String.valueOf("AG")),

    AR(String.valueOf("AR")),

    AM(String.valueOf("AM")),

    AW(String.valueOf("AW")),

    AU(String.valueOf("AU")),

    AT(String.valueOf("AT")),

    AZ(String.valueOf("AZ")),

    BS(String.valueOf("BS")),

    BH(String.valueOf("BH")),

    BD(String.valueOf("BD")),

    BB(String.valueOf("BB")),

    BY(String.valueOf("BY")),

    BE(String.valueOf("BE")),

    BZ(String.valueOf("BZ")),

    BJ(String.valueOf("BJ")),

    BM(String.valueOf("BM")),

    BT(String.valueOf("BT")),

    BO(String.valueOf("BO")),

    BA(String.valueOf("BA")),

    BW(String.valueOf("BW")),

    BV(String.valueOf("BV")),

    BR(String.valueOf("BR")),

    IO(String.valueOf("IO")),

    BN(String.valueOf("BN")),

    BG(String.valueOf("BG")),

    BF(String.valueOf("BF")),

    BI(String.valueOf("BI")),

    CV(String.valueOf("CV")),

    KH(String.valueOf("KH")),

    CM(String.valueOf("CM")),

    CA(String.valueOf("CA")),

    KY(String.valueOf("KY")),

    CF(String.valueOf("CF")),

    TD(String.valueOf("TD")),

    CL(String.valueOf("CL")),

    CN(String.valueOf("CN")),

    CX(String.valueOf("CX")),

    CC(String.valueOf("CC")),

    CO(String.valueOf("CO")),

    KM(String.valueOf("KM")),

    CG(String.valueOf("CG")),

    CK(String.valueOf("CK")),

    CR(String.valueOf("CR")),

    CI(String.valueOf("CI")),

    HR(String.valueOf("HR")),

    CU(String.valueOf("CU")),

    CW(String.valueOf("CW")),

    CY(String.valueOf("CY")),

    CZ(String.valueOf("CZ")),

    DK(String.valueOf("DK")),

    DJ(String.valueOf("DJ")),

    DM(String.valueOf("DM")),

    DO(String.valueOf("DO")),

    EC(String.valueOf("EC")),

    EG(String.valueOf("EG")),

    SV(String.valueOf("SV")),

    GQ(String.valueOf("GQ")),

    ER(String.valueOf("ER")),

    EE(String.valueOf("EE")),

    SZ(String.valueOf("SZ")),

    ET(String.valueOf("ET")),

    FK(String.valueOf("FK")),

    FO(String.valueOf("FO")),

    FJ(String.valueOf("FJ")),

    FI(String.valueOf("FI")),

    FR(String.valueOf("FR")),

    GF(String.valueOf("GF")),

    PF(String.valueOf("PF")),

    TF(String.valueOf("TF")),

    GA(String.valueOf("GA")),

    GM(String.valueOf("GM")),

    GE(String.valueOf("GE")),

    DE(String.valueOf("DE")),

    GH(String.valueOf("GH")),

    GI(String.valueOf("GI")),

    GR(String.valueOf("GR")),

    GL(String.valueOf("GL")),

    GD(String.valueOf("GD")),

    GP(String.valueOf("GP")),

    GU(String.valueOf("GU")),

    GT(String.valueOf("GT")),

    GG(String.valueOf("GG")),

    GN(String.valueOf("GN")),

    GW(String.valueOf("GW")),

    GY(String.valueOf("GY")),

    HT(String.valueOf("HT")),

    HM(String.valueOf("HM")),

    VA(String.valueOf("VA")),

    HN(String.valueOf("HN")),

    HK(String.valueOf("HK")),

    HU(String.valueOf("HU")),

    IS(String.valueOf("IS")),

    IN(String.valueOf("IN")),

    ID(String.valueOf("ID")),

    IR(String.valueOf("IR")),

    IQ(String.valueOf("IQ")),

    IE(String.valueOf("IE")),

    IM(String.valueOf("IM")),

    IL(String.valueOf("IL")),

    IT(String.valueOf("IT")),

    JM(String.valueOf("JM")),

    JP(String.valueOf("JP")),

    JE(String.valueOf("JE")),

    JO(String.valueOf("JO")),

    KZ(String.valueOf("KZ")),

    KE(String.valueOf("KE")),

    KI(String.valueOf("KI")),

    KP(String.valueOf("KP")),

    KW(String.valueOf("KW")),

    KG(String.valueOf("KG")),

    LA(String.valueOf("LA")),

    LV(String.valueOf("LV")),

    LB(String.valueOf("LB")),

    LS(String.valueOf("LS")),

    LR(String.valueOf("LR")),

    LY(String.valueOf("LY")),

    LI(String.valueOf("LI")),

    LT(String.valueOf("LT")),

    LU(String.valueOf("LU")),

    MO(String.valueOf("MO")),

    MG(String.valueOf("MG")),

    MW(String.valueOf("MW")),

    MY(String.valueOf("MY")),

    MV(String.valueOf("MV")),

    ML(String.valueOf("ML")),

    MT(String.valueOf("MT")),

    MH(String.valueOf("MH")),

    MQ(String.valueOf("MQ")),

    MR(String.valueOf("MR")),

    MU(String.valueOf("MU")),

    YT(String.valueOf("YT")),

    MX(String.valueOf("MX")),

    FM(String.valueOf("FM")),

    MC(String.valueOf("MC")),

    MN(String.valueOf("MN")),

    ME(String.valueOf("ME")),

    MS(String.valueOf("MS")),

    MA(String.valueOf("MA")),

    MZ(String.valueOf("MZ")),

    MM(String.valueOf("MM")),

    NA(String.valueOf("NA")),

    NR(String.valueOf("NR")),

    NP(String.valueOf("NP")),

    NL(String.valueOf("NL")),

    NC(String.valueOf("NC")),

    NZ(String.valueOf("NZ")),

    NI(String.valueOf("NI")),

    NE(String.valueOf("NE")),

    NG(String.valueOf("NG")),

    NU(String.valueOf("NU")),

    NF(String.valueOf("NF")),

    MK(String.valueOf("MK")),

    MP(String.valueOf("MP")),

    NO(String.valueOf("NO")),

    OM(String.valueOf("OM")),

    PK(String.valueOf("PK")),

    PW(String.valueOf("PW")),

    PA(String.valueOf("PA")),

    PG(String.valueOf("PG")),

    PY(String.valueOf("PY")),

    PE(String.valueOf("PE")),

    PH(String.valueOf("PH")),

    PN(String.valueOf("PN")),

    PL(String.valueOf("PL")),

    PT(String.valueOf("PT")),

    PR(String.valueOf("PR")),

    QA(String.valueOf("QA")),

    RE(String.valueOf("RE")),

    RO(String.valueOf("RO")),

    RU(String.valueOf("RU")),

    RW(String.valueOf("RW")),

    BL(String.valueOf("BL")),

    KN(String.valueOf("KN")),

    LC(String.valueOf("LC")),

    MF(String.valueOf("MF")),

    PM(String.valueOf("PM")),

    VC(String.valueOf("VC")),

    WS(String.valueOf("WS")),

    SM(String.valueOf("SM")),

    ST(String.valueOf("ST")),

    SA(String.valueOf("SA")),

    SN(String.valueOf("SN")),

    RS(String.valueOf("RS")),

    SC(String.valueOf("SC")),

    SL(String.valueOf("SL")),

    SG(String.valueOf("SG")),

    SX(String.valueOf("SX")),

    SK(String.valueOf("SK")),

    SI(String.valueOf("SI")),

    SB(String.valueOf("SB")),

    SO(String.valueOf("SO")),

    ZA(String.valueOf("ZA")),

    GS(String.valueOf("GS")),

    SS(String.valueOf("SS")),

    ES(String.valueOf("ES")),

    LK(String.valueOf("LK")),

    SD(String.valueOf("SD")),

    SR(String.valueOf("SR")),

    SJ(String.valueOf("SJ")),

    SE(String.valueOf("SE")),

    CH(String.valueOf("CH")),

    SY(String.valueOf("SY")),

    TJ(String.valueOf("TJ")),

    TH(String.valueOf("TH")),

    TL(String.valueOf("TL")),

    TG(String.valueOf("TG")),

    TK(String.valueOf("TK")),

    TO(String.valueOf("TO")),

    TT(String.valueOf("TT")),

    TN(String.valueOf("TN")),

    TR(String.valueOf("TR")),

    TM(String.valueOf("TM")),

    TC(String.valueOf("TC")),

    TV(String.valueOf("TV")),

    UG(String.valueOf("UG")),

    UA(String.valueOf("UA")),

    AE(String.valueOf("AE")),

    GB(String.valueOf("GB")),

    US(String.valueOf("US")),

    UM(String.valueOf("UM")),

    UY(String.valueOf("UY")),

    UZ(String.valueOf("UZ")),

    VU(String.valueOf("VU")),

    VE(String.valueOf("VE")),

    VN(String.valueOf("VN")),

    VG(String.valueOf("VG")),

    VI(String.valueOf("VI")),

    WF(String.valueOf("WF")),

    EH(String.valueOf("EH")),

    YE(String.valueOf("YE")),

    ZM(String.valueOf("ZM")),

    ZW(String.valueOf("ZW"));

    private String value;

    DestinationCountryEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DestinationCountryEnum fromValue(String value) {
      for (DestinationCountryEnum b : DestinationCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DESTINATION_COUNTRY =
      "destinationCountry";
  private DestinationCountryEnum destinationCountry;

  public static final String JSON_PROPERTY_DESTINATION_CATEGORY =
      "destinationCategory";
  private String destinationCategory;

  public static final String JSON_PROPERTY_HEALTHCARE_TYPE = "healthcareType";
  private String healthcareType;

  public static final String JSON_PROPERTY_FINESS = "finess";
  private String finess;

  public Destination() {}

  public Destination
  destinationCountry(DestinationCountryEnum destinationCountry) {

    this.destinationCountry = destinationCountry;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature associée
   * @return destinationCountry
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DestinationCountryEnum getDestinationCountry() {
    return destinationCountry;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCountry(DestinationCountryEnum destinationCountry) {
    this.destinationCountry = destinationCountry;
  }

  public Destination destinationCategory(String destinationCategory) {

    this.destinationCategory = destinationCategory;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature associée
   * @return destinationCategory
   **/
  @JsonProperty(JSON_PROPERTY_DESTINATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationCategory() {
    return destinationCategory;
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationCategory(String destinationCategory) {
    this.destinationCategory = destinationCategory;
  }

  public Destination healthcareType(String healthcareType) {

    this.healthcareType = healthcareType;
    return this;
  }

  /**
   * A valoriser par le code de la nomenclature ActiviteOperationnelle (à
   *venir).
   * @return healthcareType
   **/
  @JsonProperty(JSON_PROPERTY_HEALTHCARE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHealthcareType() {
    return healthcareType;
  }

  @JsonProperty(JSON_PROPERTY_HEALTHCARE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcareType(String healthcareType) {
    this.healthcareType = healthcareType;
  }

  public Destination finess(String finess) {

    this.finess = finess;
    return this;
  }

  /**
   * FINESS géographique de l’établissement de destination (9 chiffres)
   * @return finess
   **/
  @JsonProperty(JSON_PROPERTY_FINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFiness() {
    return finess;
  }

  @JsonProperty(JSON_PROPERTY_FINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiness(String finess) {
    this.finess = finess;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Destination destination = (Destination)o;
    return Objects.equals(this.destinationCountry,
                          destination.destinationCountry) &&
        Objects.equals(this.destinationCategory,
                       destination.destinationCategory) &&
        Objects.equals(this.healthcareType, destination.healthcareType) &&
        Objects.equals(this.finess, destination.finess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationCountry, destinationCategory, healthcareType,
                        finess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Destination {\n");
    sb.append("    destinationCountry: ")
        .append(toIndentedString(destinationCountry))
        .append("\n");
    sb.append("    destinationCategory: ")
        .append(toIndentedString(destinationCategory))
        .append("\n");
    sb.append("    healthcareType: ")
        .append(toIndentedString(healthcareType))
        .append("\n");
    sb.append("    finess: ").append(toIndentedString(finess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
