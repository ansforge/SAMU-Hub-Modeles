/**
 * Copyright © 2023-2025 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

package com.hubsante.model.rpis;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import java.util.Arrays;
import java.util.Arrays;
import java.util.Objects;

/**
 * Decision
 */
@JsonPropertyOrder({Decision.JSON_PROPERTY_RESOURCE_TYPE,
                    Decision.JSON_PROPERTY_VEHICLE_TYPE,
                    Decision.JSON_PROPERTY_MEDICAL_LEVEL})
@JsonTypeName("decision")
@JsonInclude(JsonInclude.Include.NON_EMPTY)

public class Decision {

  /**
   * Précise le type de moyen engagé dans l&#39;intervention (SMUR, TSU, HOSPIT,
   * etc.).  A valoriser par un code de la nomenclature SI-SAMU-TYPE_MOYEN.
   */
  public enum ResourceTypeEnum {
    SMUR(String.valueOf("SMUR")),

    SMUR_ADULT(String.valueOf("SMUR.ADULT")),

    SMUR_PED(String.valueOf("SMUR.PED")),

    SMUR_UMH_S(String.valueOf("SMUR.UMH-S")),

    SMUR_CUMP(String.valueOf("SMUR.CUMP")),

    HOSPIT(String.valueOf("HOSPIT")),

    LIBERAL(String.valueOf("LIBERAL")),

    LIBERAL_MG(String.valueOf("LIBERAL.MG")),

    LIBERAL_PHARM(String.valueOf("LIBERAL.PHARM")),

    LIBERAL_INF(String.valueOf("LIBERAL.INF")),

    LIBERAL_KINE(String.valueOf("LIBERAL.KINE")),

    LIBERAL_SOS(String.valueOf("LIBERAL.SOS")),

    LIBERAL_MMG(String.valueOf("LIBERAL.MMG")),

    LIBERAL_MSPD(String.valueOf("LIBERAL.MSPD")),

    LIBERAL_MCS(String.valueOf("LIBERAL.MCS")),

    LIBERAL_SPEMED(String.valueOf("LIBERAL.SPEMED")),

    LIBERAL_DENT(String.valueOf("LIBERAL.DENT")),

    LIBERAL_LABO(String.valueOf("LIBERAL.LABO")),

    LIBERAL_AUTREPRO(String.valueOf("LIBERAL.AUTREPRO")),

    TSU_(String.valueOf("TSU ")),

    SIS(String.valueOf("SIS")),

    SIS_MEDSP(String.valueOf("SIS.MEDSP")),

    SIS_ISP(String.valueOf("SIS.ISP")),

    SIS_SP(String.valueOf("SIS.SP")),

    AASC(String.valueOf("AASC")),

    FDO(String.valueOf("FDO")),

    FDO_PN(String.valueOf("FDO.PN")),

    FDO_GEND(String.valueOf("FDO.GEND")),

    FDO_PM(String.valueOf("FDO.PM")),

    FDO_DOUANES(String.valueOf("FDO.DOUANES")),

    AUTRE(String.valueOf("AUTRE")),

    AUTRE_ADM(String.valueOf("AUTRE.ADM")),

    AUTRE_DAE(String.valueOf("AUTRE.DAE")),

    AUTRE_AUTRE(String.valueOf("AUTRE.AUTRE"));

    private String value;

    ResourceTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  private ResourceTypeEnum resourceType;

  /**
   * Précise le type de véhicule terrestre / aérien / maritime engagé dans
   * l&#39;intervention. A valoriser par un code de la nomenclature
   * SI-SAMU-TYPE_VECTEUR.
   */
  public enum VehicleTypeEnum {
    AASC(String.valueOf("AASC")),

    AASC_VLSC(String.valueOf("AASC.VLSC")),

    AASC_VPSP(String.valueOf("AASC.VPSP")),

    AASC_AUTRESC(String.valueOf("AASC.AUTRESC")),

    AUTREVEC(String.valueOf("AUTREVEC")),

    AUTREVEC_APIED(String.valueOf("AUTREVEC.APIED")),

    AUTREVEC_AVION(String.valueOf("AUTREVEC.AVION")),

    AUTREVEC_PERSO(String.valueOf("AUTREVEC.PERSO")),

    AUTREVEC_TAXI(String.valueOf("AUTREVEC.TAXI")),

    AUTREVEC_TRAIN(String.valueOf("AUTREVEC.TRAIN")),

    AUTREVEC_TRANSP(String.valueOf("AUTREVEC.TRANSP")),

    AUTREVEC_AUTRE(String.valueOf("AUTREVEC.AUTRE")),

    AUTREVEC_AUTRETRA(String.valueOf("AUTREVEC.AUTRETRA")),

    FSI(String.valueOf("FSI")),

    FSI_HELIFSI(String.valueOf("FSI.HELIFSI")),

    FSI_VLFSI(String.valueOf("FSI.VLFSI")),

    FSI_FFSI(String.valueOf("FSI.FFSI")),

    FSI_VHFSI(String.valueOf("FSI.VHFSI")),

    LIB(String.valueOf("LIB")),

    LIB_MEDV(String.valueOf("LIB.MEDV")),

    LIB_INF(String.valueOf("LIB.INF")),

    LIB_AUTREPRO(String.valueOf("LIB.AUTREPRO")),

    SIS(String.valueOf("SIS")),

    SIS_DRAGON(String.valueOf("SIS.DRAGON")),

    SIS_AVSC(String.valueOf("SIS.AVSC")),

    SIS_FEUSIS(String.valueOf("SIS.FEUSIS")),

    SIS_GRIMP(String.valueOf("SIS.GRIMP")),

    SIS_NAVISIS(String.valueOf("SIS.NAVISIS")),

    SIS_PCSIS(String.valueOf("SIS.PCSIS")),

    SIS_SRSIS(String.valueOf("SIS.SRSIS")),

    SIS_VCH(String.valueOf("SIS.VCH")),

    SIS_VLCG(String.valueOf("SIS.VLCG")),

    SIS_VLISP(String.valueOf("SIS.VLISP")),

    SIS_VLMSP(String.valueOf("SIS.VLMSP")),

    SIS_VLSIS(String.valueOf("SIS.VLSIS")),

    SIS_VPL(String.valueOf("SIS.VPL")),

    SIS_VPMA(String.valueOf("SIS.VPMA")),

    SIS_VR(String.valueOf("SIS.VR")),

    SIS_VSAV(String.valueOf("SIS.VSAV")),

    SIS_MOYSSE(String.valueOf("SIS.MOYSSE")),

    SIS_AUTRESIS(String.valueOf("SIS.AUTRESIS")),

    SMUR(String.valueOf("SMUR")),

    SMUR_VLM(String.valueOf("SMUR.VLM")),

    SMUR_VL(String.valueOf("SMUR.VL")),

    SMUR_PSM1(String.valueOf("SMUR.PSM1")),

    SMUR_PSM2(String.valueOf("SMUR.PSM2")),

    SMUR_PSM3(String.valueOf("SMUR.PSM3")),

    SMUR_PSMP(String.valueOf("SMUR.PSMP")),

    SMUR_VPC(String.valueOf("SMUR.VPC")),

    SMUR_AR(String.valueOf("SMUR.AR")),

    SMUR_AR_BAR(String.valueOf("SMUR.AR-BAR")),

    SMUR_AR_PED(String.valueOf("SMUR.AR-PED")),

    SMUR_HELISMUR(String.valueOf("SMUR.HELISMUR")),

    SMUR_HELISAN(String.valueOf("SMUR.HELISAN")),

    SMUR_AVSMUR(String.valueOf("SMUR.AVSMUR")),

    SMUR_AVSAN(String.valueOf("SMUR.AVSAN")),

    SMUR_NAVISMUR(String.valueOf("SMUR.NAVISMUR")),

    TSU(String.valueOf("TSU")),

    TSU_VSL(String.valueOf("TSU.VSL")),

    TSU_AMB_GV(String.valueOf("TSU.AMB-GV")),

    TSU_AMB_PV(String.valueOf("TSU.AMB-PV")),

    TSU_AMB_BAR(String.valueOf("TSU.AMB-BAR")),

    TSU_AMB(String.valueOf("TSU.AMB"));

    private String value;

    VehicleTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VehicleTypeEnum fromValue(String value) {
      for (VehicleTypeEnum b : VehicleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VEHICLE_TYPE = "vehicleType";
  private VehicleTypeEnum vehicleType;

  /**
   * Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code
   * de la nomenclature SI-SAMU-NIVSOIN.
   */
  public enum MedicalLevelEnum {
    MED(String.valueOf("MED")),

    PARAMED(String.valueOf("PARAMED")),

    SECOURS(String.valueOf("SECOURS")),

    SANS(String.valueOf("SANS"));

    private String value;

    MedicalLevelEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MedicalLevelEnum fromValue(String value) {
      for (MedicalLevelEnum b : MedicalLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MEDICAL_LEVEL = "medicalLevel";
  private MedicalLevelEnum medicalLevel;

  public Decision() {}

  public Decision resourceType(ResourceTypeEnum resourceType) {

    this.resourceType = resourceType;
    return this;
  }

  /**
   * Précise le type de moyen engagé dans l&#39;intervention (SMUR, TSU, HOSPIT,
   *etc.).  A valoriser par un code de la nomenclature SI-SAMU-TYPE_MOYEN.
   * @return resourceType
   **/
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

  public Decision vehicleType(VehicleTypeEnum vehicleType) {

    this.vehicleType = vehicleType;
    return this;
  }

  /**
   * Précise le type de véhicule terrestre / aérien / maritime engagé dans
   *l&#39;intervention. A valoriser par un code de la nomenclature
   *SI-SAMU-TYPE_VECTEUR.
   * @return vehicleType
   **/
  @JsonProperty(JSON_PROPERTY_VEHICLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VehicleTypeEnum getVehicleType() {
    return vehicleType;
  }

  @JsonProperty(JSON_PROPERTY_VEHICLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVehicleType(VehicleTypeEnum vehicleType) {
    this.vehicleType = vehicleType;
  }

  public Decision medicalLevel(MedicalLevelEnum medicalLevel) {

    this.medicalLevel = medicalLevel;
    return this;
  }

  /**
   * Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code
   *de la nomenclature SI-SAMU-NIVSOIN.
   * @return medicalLevel
   **/
  @JsonProperty(JSON_PROPERTY_MEDICAL_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MedicalLevelEnum getMedicalLevel() {
    return medicalLevel;
  }

  @JsonProperty(JSON_PROPERTY_MEDICAL_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedicalLevel(MedicalLevelEnum medicalLevel) {
    this.medicalLevel = medicalLevel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision)o;
    return Objects.equals(this.resourceType, decision.resourceType) &&
        Objects.equals(this.vehicleType, decision.vehicleType) &&
        Objects.equals(this.medicalLevel, decision.medicalLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceType, vehicleType, medicalLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    resourceType: ")
        .append(toIndentedString(resourceType))
        .append("\n");
    sb.append("    vehicleType: ")
        .append(toIndentedString(vehicleType))
        .append("\n");
    sb.append("    medicalLevel: ")
        .append(toIndentedString(medicalLevel))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
