/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// CaseDetails
    /// </summary>
    [DataContract(Name = "caseDetails")]
    public partial class CaseDetails : IEquatable<CaseDetails>, IValidatableObject
    {
        /// <summary>
        /// Décrit le type de professionnel médical à qui le dossier est attribué : médecin généraliste, médecin urgentiste etc.
        /// </summary>
        /// <value>Décrit le type de professionnel médical à qui le dossier est attribué : médecin généraliste, médecin urgentiste etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributionEnum
        {
            /// <summary>
            /// Enum DRM for value: DRM
            /// </summary>
            [EnumMember(Value = "DRM")]
            DRM = 1,

            /// <summary>
            /// Enum DRMMRU for value: DRMMRU
            /// </summary>
            [EnumMember(Value = "DRMMRU")]
            DRMMRU = 2,

            /// <summary>
            /// Enum MU for value: MU
            /// </summary>
            [EnumMember(Value = "MU")]
            MU = 3,

            /// <summary>
            /// Enum DENT for value: DENT
            /// </summary>
            [EnumMember(Value = "DENT")]
            DENT = 4,

            /// <summary>
            /// Enum GERIA for value: GERIA
            /// </summary>
            [EnumMember(Value = "GERIA")]
            GERIA = 5,

            /// <summary>
            /// Enum PEDIA for value: PEDIA
            /// </summary>
            [EnumMember(Value = "PEDIA")]
            PEDIA = 6,

            /// <summary>
            /// Enum PSY for value: PSY
            /// </summary>
            [EnumMember(Value = "PSY")]
            PSY = 7,

            /// <summary>
            /// Enum TOXICOL for value: TOXICOL
            /// </summary>
            [EnumMember(Value = "TOXICOL")]
            TOXICOL = 8,

            /// <summary>
            /// Enum INDISPMU for value: INDISPMU
            /// </summary>
            [EnumMember(Value = "INDISPMU")]
            INDISPMU = 9,

            /// <summary>
            /// Enum SSE for value: SSE
            /// </summary>
            [EnumMember(Value = "SSE")]
            SSE = 10,

            /// <summary>
            /// Enum PLANBLAN for value: PLANBLAN
            /// </summary>
            [EnumMember(Value = "PLANBLAN")]
            PLANBLAN = 11,

            /// <summary>
            /// Enum PCSAMU for value: PCSAMU
            /// </summary>
            [EnumMember(Value = "PCSAMU")]
            PCSAMU = 12,

            /// <summary>
            /// Enum DRMMRL for value: DRMMRL
            /// </summary>
            [EnumMember(Value = "DRMMRL")]
            DRMMRL = 13,

            /// <summary>
            /// Enum MG for value: MG
            /// </summary>
            [EnumMember(Value = "MG")]
            MG = 14,

            /// <summary>
            /// Enum INDISPMG for value: INDISPMG
            /// </summary>
            [EnumMember(Value = "INDISPMG")]
            INDISPMG = 15,

            /// <summary>
            /// Enum ABSML for value: ABSML
            /// </summary>
            [EnumMember(Value = "ABSML")]
            ABSML = 16,

            /// <summary>
            /// Enum DR for value: DR
            /// </summary>
            [EnumMember(Value = "DR")]
            DR = 17,

            /// <summary>
            /// Enum DREG for value: DREG
            /// </summary>
            [EnumMember(Value = "DREG")]
            DREG = 18,

            /// <summary>
            /// Enum DRARM for value: DRARM
            /// </summary>
            [EnumMember(Value = "DRARM")]
            DRARM = 19,

            /// <summary>
            /// Enum DRMED for value: DRMED
            /// </summary>
            [EnumMember(Value = "DRMED")]
            DRMED = 20,

            /// <summary>
            /// Enum DRPHARMA for value: DRPHARMA
            /// </summary>
            [EnumMember(Value = "DRPHARMA")]
            DRPHARMA = 21,

            /// <summary>
            /// Enum DRDENT for value: DRDENT
            /// </summary>
            [EnumMember(Value = "DRDENT")]
            DRDENT = 22,

            /// <summary>
            /// Enum DRINFO for value: DRINFO
            /// </summary>
            [EnumMember(Value = "DRINFO")]
            DRINFO = 23,

            /// <summary>
            /// Enum DOSSIS for value: DOS-SIS
            /// </summary>
            [EnumMember(Value = "DOS-SIS")]
            DOSSIS = 24,

            /// <summary>
            /// Enum DOSFDO for value: DOS-FDO
            /// </summary>
            [EnumMember(Value = "DOS-FDO")]
            DOSFDO = 25,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 26,

            /// <summary>
            /// Enum DMALV for value: D-MALV
            /// </summary>
            [EnumMember(Value = "D-MALV")]
            DMALV = 27,

            /// <summary>
            /// Enum ERR for value: ERR
            /// </summary>
            [EnumMember(Value = "ERR")]
            ERR = 28,

            /// <summary>
            /// Enum NRP for value: NRP
            /// </summary>
            [EnumMember(Value = "NRP")]
            NRP = 29,

            /// <summary>
            /// Enum MALV for value: MALV
            /// </summary>
            [EnumMember(Value = "MALV")]
            MALV = 30,

            /// <summary>
            /// Enum FAX for value: FAX
            /// </summary>
            [EnumMember(Value = "FAX")]
            FAX = 31,

            /// <summary>
            /// Enum ITERATIF for value: ITERATIF
            /// </summary>
            [EnumMember(Value = "ITERATIF")]
            ITERATIF = 32,

            /// <summary>
            /// Enum DIDENT for value: D-IDENT
            /// </summary>
            [EnumMember(Value = "D-IDENT")]
            DIDENT = 33,

            /// <summary>
            /// Enum ADMIN for value: ADMIN
            /// </summary>
            [EnumMember(Value = "ADMIN")]
            ADMIN = 34,

            /// <summary>
            /// Enum PERSO for value: PERSO
            /// </summary>
            [EnumMember(Value = "PERSO")]
            PERSO = 35,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 36
        }


        /// <summary>
        /// Décrit le type de professionnel médical à qui le dossier est attribué : médecin généraliste, médecin urgentiste etc.
        /// </summary>
        /// <value>Décrit le type de professionnel médical à qui le dossier est attribué : médecin généraliste, médecin urgentiste etc.</value>
        /// <example>example.json#/qualification/details/attribution</example>
        [DataMember(Name = "attribution", EmitDefaultValue = false)]
        public AttributionEnum? Attribution { get; set; }
        /// <summary>
        /// Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3
        /// </summary>
        /// <value>Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum P0 for value: P0
            /// </summary>
            [EnumMember(Value = "P0")]
            P0 = 1,

            /// <summary>
            /// Enum P1 for value: P1
            /// </summary>
            [EnumMember(Value = "P1")]
            P1 = 2,

            /// <summary>
            /// Enum P2 for value: P2
            /// </summary>
            [EnumMember(Value = "P2")]
            P2 = 3,

            /// <summary>
            /// Enum P3 for value: P3
            /// </summary>
            [EnumMember(Value = "P3")]
            P3 = 4,

            /// <summary>
            /// Enum NR for value: NR
            /// </summary>
            [EnumMember(Value = "NR")]
            NR = 5
        }


        /// <summary>
        /// Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3
        /// </summary>
        /// <value>Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3</value>
        /// <example>example.json#/qualification/details/priority</example>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Décrit le niveau de soins global du dossier identifié au cours de l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins différents pour chaque patient, on indique ici le niveau le plus grave. cf.nomenclature associée.
        /// </summary>
        /// <value>Décrit le niveau de soins global du dossier identifié au cours de l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins différents pour chaque patient, on indique ici le niveau le plus grave. cf.nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CareLevelEnum
        {
            /// <summary>
            /// Enum R1 for value: R1
            /// </summary>
            [EnumMember(Value = "R1")]
            R1 = 1,

            /// <summary>
            /// Enum R2 for value: R2
            /// </summary>
            [EnumMember(Value = "R2")]
            R2 = 2,

            /// <summary>
            /// Enum R3 for value: R3
            /// </summary>
            [EnumMember(Value = "R3")]
            R3 = 3,

            /// <summary>
            /// Enum R4 for value: R4
            /// </summary>
            [EnumMember(Value = "R4")]
            R4 = 4
        }


        /// <summary>
        /// Décrit le niveau de soins global du dossier identifié au cours de l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins différents pour chaque patient, on indique ici le niveau le plus grave. cf.nomenclature associée.
        /// </summary>
        /// <value>Décrit le niveau de soins global du dossier identifié au cours de l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins différents pour chaque patient, on indique ici le niveau le plus grave. cf.nomenclature associée.</value>
        /// <example>example.json#/qualification/details/careLevel</example>
        [DataMember(Name = "careLevel", EmitDefaultValue = false)]
        public CareLevelEnum? CareLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CaseDetails" /> class.
        /// </summary>
        /// <param name="attribution">Décrit le type de professionnel médical à qui le dossier est attribué : médecin généraliste, médecin urgentiste etc..</param>
        /// <param name="priority">Décrit la priorité de régulation médicale du dossier : P0, P1, P2, P3.</param>
        /// <param name="careLevel">Décrit le niveau de soins global du dossier identifié au cours de l&#39;acte de régulation médicale : s&#39;il y a plusieurs niveaux de soins différents pour chaque patient, on indique ici le niveau le plus grave. cf.nomenclature associée..</param>
        public CaseDetails(AttributionEnum? attribution = default(AttributionEnum?), PriorityEnum? priority = default(PriorityEnum?), CareLevelEnum? careLevel = default(CareLevelEnum?))
        {
            this.Attribution = attribution;
            this.Priority = priority;
            this.CareLevel = careLevel;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CaseDetails {\n");
            sb.Append("  Attribution: ").Append(Attribution).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  CareLevel: ").Append(CareLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CaseDetails);
        }

        /// <summary>
        /// Returns true if CaseDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CaseDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaseDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attribution == input.Attribution ||
                    this.Attribution.Equals(input.Attribution)
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.CareLevel == input.CareLevel ||
                    this.CareLevel.Equals(input.CareLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Attribution.GetHashCode();
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.CareLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
