/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Hypothesis
    /// </summary>
    [DataContract(Name = "hypothesis")]
    public partial class Hypothesis : IEquatable<Hypothesis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hypothesis" /> class.
        /// </summary>
        /// <param name="mainDiagnosis">mainDiagnosis.</param>
        /// <param name="otherDiagnosis">otherDiagnosis.</param>
        public Hypothesis(MainDiagnosis mainDiagnosis = default(MainDiagnosis), List<OtherDiagnosis> otherDiagnosis = default(List<OtherDiagnosis>))
        {
            this.MainDiagnosis = mainDiagnosis;
            this.OtherDiagnosis = otherDiagnosis;
        }

        /// <summary>
        /// Gets or Sets MainDiagnosis
        /// </summary>
        [DataMember(Name = "mainDiagnosis", EmitDefaultValue = false)]
        public MainDiagnosis MainDiagnosis { get; set; }

        /// <summary>
        /// Gets or Sets OtherDiagnosis
        /// </summary>
        [DataMember(Name = "otherDiagnosis", EmitDefaultValue = false)]
        public List<OtherDiagnosis> OtherDiagnosis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Hypothesis {\n");
            sb.Append("  MainDiagnosis: ").Append(MainDiagnosis).Append("\n");
            sb.Append("  OtherDiagnosis: ").Append(OtherDiagnosis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Hypothesis);
        }

        /// <summary>
        /// Returns true if Hypothesis instances are equal
        /// </summary>
        /// <param name="input">Instance of Hypothesis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hypothesis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MainDiagnosis == input.MainDiagnosis ||
                    (this.MainDiagnosis != null &&
                    this.MainDiagnosis.Equals(input.MainDiagnosis))
                ) && 
                (
                    this.OtherDiagnosis == input.OtherDiagnosis ||
                    this.OtherDiagnosis != null &&
                    input.OtherDiagnosis != null &&
                    this.OtherDiagnosis.SequenceEqual(input.OtherDiagnosis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MainDiagnosis != null)
                {
                    hashCode = (hashCode * 59) + this.MainDiagnosis.GetHashCode();
                }
                if (this.OtherDiagnosis != null)
                {
                    hashCode = (hashCode * 59) + this.OtherDiagnosis.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
