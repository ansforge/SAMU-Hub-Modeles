/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Notes
    /// </summary>
    [DataContract(Name = "notes")]
    public partial class Notes : IEquatable<Notes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notes" /> class.
        /// </summary>
        /// <param name="creation">A valoriser avec le groupe date heure de création de l&#39;information complémentaire.</param>
        /// <param name="freetext">A valoriser avec un texte libre contenant les indications complémentaires renseignées sur l&#39;alerte/appel.  Spécificités 15-15 : cet attribut ne doit pas être valorisé avec des notes à caractère médical, qui serait liée à un interrogatoire ARM ou médecin, ou à un patient en particulier.</param>
        public Notes(DateTime creation = default(DateTime), string freetext = default(string))
        {
            this.Creation = creation;
            this.Freetext = freetext;
        }

        /// <summary>
        /// A valoriser avec le groupe date heure de création de l&#39;information complémentaire
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de création de l&#39;information complémentaire</value>
        [DataMember(Name = "creation", EmitDefaultValue = false)]
        public DateTime Creation { get; set; }

        /// <summary>
        /// A valoriser avec un texte libre contenant les indications complémentaires renseignées sur l&#39;alerte/appel.  Spécificités 15-15 : cet attribut ne doit pas être valorisé avec des notes à caractère médical, qui serait liée à un interrogatoire ARM ou médecin, ou à un patient en particulier
        /// </summary>
        /// <value>A valoriser avec un texte libre contenant les indications complémentaires renseignées sur l&#39;alerte/appel.  Spécificités 15-15 : cet attribut ne doit pas être valorisé avec des notes à caractère médical, qui serait liée à un interrogatoire ARM ou médecin, ou à un patient en particulier</value>
        /// <example>example.json#/initialAlert/notes/0/freetext</example>
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public string Freetext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Notes {\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notes);
        }

        /// <summary>
        /// Returns true if Notes instances are equal
        /// </summary>
        /// <param name="input">Instance of Notes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Creation == input.Creation ||
                    (this.Creation != null &&
                    this.Creation.Equals(input.Creation))
                ) && 
                (
                    this.Freetext == input.Freetext ||
                    (this.Freetext != null &&
                    this.Freetext.Equals(input.Freetext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Creation != null)
                {
                    hashCode = (hashCode * 59) + this.Creation.GetHashCode();
                }
                if (this.Freetext != null)
                {
                    hashCode = (hashCode * 59) + this.Freetext.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Creation != null) {
                // Creation (DateTime) pattern
                Regex regexCreation = new Regex(@"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}", RegexOptions.CultureInvariant);
                if (!regexCreation.Match(this.Creation).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Creation, must match a pattern of " + regexCreation, new [] { "Creation" });
                }
            }

            yield break;
        }
    }

}
