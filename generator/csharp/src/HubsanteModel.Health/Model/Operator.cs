/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Operator
    /// </summary>
    [DataContract(Name = "varOperator")]
    public partial class Operator : IEquatable<Operator>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le rôle de l&#39;opérateur au sein de l&#39;entité émettrice du message : 
        /// </summary>
        /// <value>A valoriser avec le rôle de l&#39;opérateur au sein de l&#39;entité émettrice du message : </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum AMBULANCIER for value: AMBULANCIER
            /// </summary>
            [EnumMember(Value = "AMBULANCIER")]
            AMBULANCIER = 1,

            /// <summary>
            /// Enum ARM for value: ARM
            /// </summary>
            [EnumMember(Value = "ARM")]
            ARM = 2,

            /// <summary>
            /// Enum INFIRMIER for value: INFIRMIER
            /// </summary>
            [EnumMember(Value = "INFIRMIER")]
            INFIRMIER = 3,

            /// <summary>
            /// Enum MEDECIN for value: MEDECIN
            /// </summary>
            [EnumMember(Value = "MEDECIN")]
            MEDECIN = 4,

            /// <summary>
            /// Enum INCONNU for value: INCONNU
            /// </summary>
            [EnumMember(Value = "INCONNU")]
            INCONNU = 5,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 6
        }


        /// <summary>
        /// A valoriser avec le rôle de l&#39;opérateur au sein de l&#39;entité émettrice du message : 
        /// </summary>
        /// <value>A valoriser avec le rôle de l&#39;opérateur au sein de l&#39;entité émettrice du message : </value>
        /// <example>example.json#/medicalNote/0/operator/role</example>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Operator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Operator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Operator" /> class.
        /// </summary>
        /// <param name="detailedName">detailedName.</param>
        /// <param name="role">A valoriser avec le rôle de l&#39;opérateur au sein de l&#39;entité émettrice du message :  (required).</param>
        public Operator(DetailedName detailedName = default(DetailedName), RoleEnum role = default(RoleEnum))
        {
            this.Role = role;
            this.DetailedName = detailedName;
        }

        /// <summary>
        /// Gets or Sets DetailedName
        /// </summary>
        [DataMember(Name = "detailedName", EmitDefaultValue = false)]
        public DetailedName DetailedName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Operator {\n");
            sb.Append("  DetailedName: ").Append(DetailedName).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Operator);
        }

        /// <summary>
        /// Returns true if Operator instances are equal
        /// </summary>
        /// <param name="input">Instance of Operator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Operator input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DetailedName == input.DetailedName ||
                    (this.DetailedName != null &&
                    this.DetailedName.Equals(input.DetailedName))
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailedName != null)
                {
                    hashCode = (hashCode * 59) + this.DetailedName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Role.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
