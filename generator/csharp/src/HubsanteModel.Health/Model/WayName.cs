/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// WayName
    /// </summary>
    [DataContract(Name = "wayName")]
    public partial class WayName : IEquatable<WayName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WayName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WayName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WayName" /> class.
        /// </summary>
        /// <param name="complete">A valoriser avec le type et le nom de la voie. Si les attributs \&quot;type\&quot; et \&quot;name\&quot; de \&quot;wayName\&quot; sont également renseignés, alors \&quot;complete\&quot; doit être valorisé ainsi : \&quot;{type} {nom}\&quot;. (required).</param>
        /// <param name="type">A valoriser avec le type de la voie.</param>
        /// <param name="name">A valoriser avec le nom de la voie.</param>
        public WayName(string complete = default(string), string type = default(string), string name = default(string))
        {
            // to ensure "complete" is required (not null)
            if (complete == null)
            {
                throw new ArgumentNullException("complete is a required property for WayName and cannot be null");
            }
            this.Complete = complete;
            this.Type = type;
            this.Name = name;
        }

        /// <summary>
        /// A valoriser avec le type et le nom de la voie. Si les attributs \&quot;type\&quot; et \&quot;name\&quot; de \&quot;wayName\&quot; sont également renseignés, alors \&quot;complete\&quot; doit être valorisé ainsi : \&quot;{type} {nom}\&quot;.
        /// </summary>
        /// <value>A valoriser avec le type et le nom de la voie. Si les attributs \&quot;type\&quot; et \&quot;name\&quot; de \&quot;wayName\&quot; sont également renseignés, alors \&quot;complete\&quot; doit être valorisé ainsi : \&quot;{type} {nom}\&quot;.</value>
        /// <example>example.json#/location/detailedAddress/wayName/complete</example>
        [DataMember(Name = "complete", IsRequired = true, EmitDefaultValue = true)]
        public string Complete { get; set; }

        /// <summary>
        /// A valoriser avec le type de la voie
        /// </summary>
        /// <value>A valoriser avec le type de la voie</value>
        /// <example>example.json#/location/detailedAddress/wayName/type</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// A valoriser avec le nom de la voie
        /// </summary>
        /// <value>A valoriser avec le nom de la voie</value>
        /// <example>example.json#/location/detailedAddress/wayName/name</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WayName {\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WayName);
        }

        /// <summary>
        /// Returns true if WayName instances are equal
        /// </summary>
        /// <param name="input">Instance of WayName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WayName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Complete == input.Complete ||
                    (this.Complete != null &&
                    this.Complete.Equals(input.Complete))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Complete != null)
                {
                    hashCode = (hashCode * 59) + this.Complete.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
