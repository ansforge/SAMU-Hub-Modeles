/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Destination
    /// </summary>
    [DataContract(Name = "destination")]
    public partial class Destination : IEquatable<Destination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Destination" /> class.
        /// </summary>
        /// <param name="externalLocationId">externalLocationId.</param>
        /// <param name="freetext">Champ libre qui permet de compléter les informations liées à la localisation.  Spécificités 15-15 : En envoi, il est souhaitable de mapper ici toute valeur en lien avec la localisation de l&#39;intervention qui ne pourrait pas être transmise de manière structurée dans l&#39;objet location.  En réception, il est très important d&#39;intégrer et d&#39;afficher la valeur de cet attribut, qui est suceptible de contenir des informations d&#39;accès importantes..</param>
        public Destination(List<ExternalLocationId> externalLocationId = default(List<ExternalLocationId>), string freetext = default(string))
        {
            this.ExternalLocationId = externalLocationId;
            this.Freetext = freetext;
        }

        /// <summary>
        /// Gets or Sets ExternalLocationId
        /// </summary>
        [DataMember(Name = "externalLocationId", EmitDefaultValue = false)]
        public List<ExternalLocationId> ExternalLocationId { get; set; }

        /// <summary>
        /// Champ libre qui permet de compléter les informations liées à la localisation.  Spécificités 15-15 : En envoi, il est souhaitable de mapper ici toute valeur en lien avec la localisation de l&#39;intervention qui ne pourrait pas être transmise de manière structurée dans l&#39;objet location.  En réception, il est très important d&#39;intégrer et d&#39;afficher la valeur de cet attribut, qui est suceptible de contenir des informations d&#39;accès importantes.
        /// </summary>
        /// <value>Champ libre qui permet de compléter les informations liées à la localisation.  Spécificités 15-15 : En envoi, il est souhaitable de mapper ici toute valeur en lien avec la localisation de l&#39;intervention qui ne pourrait pas être transmise de manière structurée dans l&#39;objet location.  En réception, il est très important d&#39;intégrer et d&#39;afficher la valeur de cet attribut, qui est suceptible de contenir des informations d&#39;accès importantes.</value>
        /// <example>example.json#/decision/0/destination/freetext</example>
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public string Freetext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Destination {\n");
            sb.Append("  ExternalLocationId: ").Append(ExternalLocationId).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Destination);
        }

        /// <summary>
        /// Returns true if Destination instances are equal
        /// </summary>
        /// <param name="input">Instance of Destination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Destination input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExternalLocationId == input.ExternalLocationId ||
                    this.ExternalLocationId != null &&
                    input.ExternalLocationId != null &&
                    this.ExternalLocationId.SequenceEqual(input.ExternalLocationId)
                ) && 
                (
                    this.Freetext == input.Freetext ||
                    (this.Freetext != null &&
                    this.Freetext.Equals(input.Freetext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalLocationId.GetHashCode();
                }
                if (this.Freetext != null)
                {
                    hashCode = (hashCode * 59) + this.Freetext.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
