/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Access
    /// </summary>
    [DataContract(Name = "access")]
    public partial class Access : IEquatable<Access>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Access" /> class.
        /// </summary>
        /// <param name="floor">A valoriser avec le numéro ou nom de l&#39;étage .</param>
        /// <param name="roomNumber">A valoriser avec le numéro d&#39;appartement, de chambre, de bureau.</param>
        /// <param name="interphone">A valoriser avec les informations nécessaires à l&#39;identification de l&#39;interphone (numéro, nom).</param>
        /// <param name="accessCode">accessCode.</param>
        /// <param name="elevator">A valoriser avec le nom ou le numéro de l&#39;ascenseur ou de la cage d&#39;escalier .</param>
        /// <param name="buildingName">A valoriser avec le nom du bâtiment.</param>
        /// <param name="entrance">A valoriser avec le nom de l&#39;entrée.</param>
        /// <param name="entity">A valoriser avec le nom du service concerné au sein de l&#39;établissement : infirmerie, service finance, service comptabilité..</param>
        /// <param name="phoneNumber">A valoriser avec le numéro de téléphone du lieu de l&#39;intervention, par exemple : téléphone du secrétariat, téléphone du service administratif ou se trouve le patient/ la victime. Le format attendu est le suivant : +{indicatif pays}{numéro de téléphone}.</param>
        public Access(string floor = default(string), string roomNumber = default(string), string interphone = default(string), List<string> accessCode = default(List<string>), string elevator = default(string), string buildingName = default(string), string entrance = default(string), string entity = default(string), string phoneNumber = default(string))
        {
            this.Floor = floor;
            this.RoomNumber = roomNumber;
            this.Interphone = interphone;
            this.AccessCode = accessCode;
            this.Elevator = elevator;
            this.BuildingName = buildingName;
            this.Entrance = entrance;
            this.Entity = entity;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// A valoriser avec le numéro ou nom de l&#39;étage 
        /// </summary>
        /// <value>A valoriser avec le numéro ou nom de l&#39;étage </value>
        /// <example>example.json#/location/access/floor</example>
        [DataMember(Name = "floor", EmitDefaultValue = false)]
        public string Floor { get; set; }

        /// <summary>
        /// A valoriser avec le numéro d&#39;appartement, de chambre, de bureau
        /// </summary>
        /// <value>A valoriser avec le numéro d&#39;appartement, de chambre, de bureau</value>
        /// <example>example.json#/location/access/roomNumber</example>
        [DataMember(Name = "roomNumber", EmitDefaultValue = false)]
        public string RoomNumber { get; set; }

        /// <summary>
        /// A valoriser avec les informations nécessaires à l&#39;identification de l&#39;interphone (numéro, nom)
        /// </summary>
        /// <value>A valoriser avec les informations nécessaires à l&#39;identification de l&#39;interphone (numéro, nom)</value>
        /// <example>example.json#/location/access/interphone</example>
        [DataMember(Name = "interphone", EmitDefaultValue = false)]
        public string Interphone { get; set; }

        /// <summary>
        /// Gets or Sets AccessCode
        /// </summary>
        [DataMember(Name = "accessCode", EmitDefaultValue = false)]
        public List<string> AccessCode { get; set; }

        /// <summary>
        /// A valoriser avec le nom ou le numéro de l&#39;ascenseur ou de la cage d&#39;escalier 
        /// </summary>
        /// <value>A valoriser avec le nom ou le numéro de l&#39;ascenseur ou de la cage d&#39;escalier </value>
        /// <example>example.json#/location/access/elevator</example>
        [DataMember(Name = "elevator", EmitDefaultValue = false)]
        public string Elevator { get; set; }

        /// <summary>
        /// A valoriser avec le nom du bâtiment
        /// </summary>
        /// <value>A valoriser avec le nom du bâtiment</value>
        /// <example>example.json#/location/access/buildingName</example>
        [DataMember(Name = "buildingName", EmitDefaultValue = false)]
        public string BuildingName { get; set; }

        /// <summary>
        /// A valoriser avec le nom de l&#39;entrée
        /// </summary>
        /// <value>A valoriser avec le nom de l&#39;entrée</value>
        /// <example>example.json#/location/access/entrance</example>
        [DataMember(Name = "entrance", EmitDefaultValue = false)]
        public string Entrance { get; set; }

        /// <summary>
        /// A valoriser avec le nom du service concerné au sein de l&#39;établissement : infirmerie, service finance, service comptabilité.
        /// </summary>
        /// <value>A valoriser avec le nom du service concerné au sein de l&#39;établissement : infirmerie, service finance, service comptabilité.</value>
        /// <example>example.json#/location/access/entity</example>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; set; }

        /// <summary>
        /// A valoriser avec le numéro de téléphone du lieu de l&#39;intervention, par exemple : téléphone du secrétariat, téléphone du service administratif ou se trouve le patient/ la victime. Le format attendu est le suivant : +{indicatif pays}{numéro de téléphone}
        /// </summary>
        /// <value>A valoriser avec le numéro de téléphone du lieu de l&#39;intervention, par exemple : téléphone du secrétariat, téléphone du service administratif ou se trouve le patient/ la victime. Le format attendu est le suivant : +{indicatif pays}{numéro de téléphone}</value>
        /// <example>example.json#/location/access/phoneNumber</example>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Access {\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  RoomNumber: ").Append(RoomNumber).Append("\n");
            sb.Append("  Interphone: ").Append(Interphone).Append("\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  Elevator: ").Append(Elevator).Append("\n");
            sb.Append("  BuildingName: ").Append(BuildingName).Append("\n");
            sb.Append("  Entrance: ").Append(Entrance).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Access);
        }

        /// <summary>
        /// Returns true if Access instances are equal
        /// </summary>
        /// <param name="input">Instance of Access to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Access input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Floor == input.Floor ||
                    (this.Floor != null &&
                    this.Floor.Equals(input.Floor))
                ) && 
                (
                    this.RoomNumber == input.RoomNumber ||
                    (this.RoomNumber != null &&
                    this.RoomNumber.Equals(input.RoomNumber))
                ) && 
                (
                    this.Interphone == input.Interphone ||
                    (this.Interphone != null &&
                    this.Interphone.Equals(input.Interphone))
                ) && 
                (
                    this.AccessCode == input.AccessCode ||
                    this.AccessCode != null &&
                    input.AccessCode != null &&
                    this.AccessCode.SequenceEqual(input.AccessCode)
                ) && 
                (
                    this.Elevator == input.Elevator ||
                    (this.Elevator != null &&
                    this.Elevator.Equals(input.Elevator))
                ) && 
                (
                    this.BuildingName == input.BuildingName ||
                    (this.BuildingName != null &&
                    this.BuildingName.Equals(input.BuildingName))
                ) && 
                (
                    this.Entrance == input.Entrance ||
                    (this.Entrance != null &&
                    this.Entrance.Equals(input.Entrance))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Floor != null)
                {
                    hashCode = (hashCode * 59) + this.Floor.GetHashCode();
                }
                if (this.RoomNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoomNumber.GetHashCode();
                }
                if (this.Interphone != null)
                {
                    hashCode = (hashCode * 59) + this.Interphone.GetHashCode();
                }
                if (this.AccessCode != null)
                {
                    hashCode = (hashCode * 59) + this.AccessCode.GetHashCode();
                }
                if (this.Elevator != null)
                {
                    hashCode = (hashCode * 59) + this.Elevator.GetHashCode();
                }
                if (this.BuildingName != null)
                {
                    hashCode = (hashCode * 59) + this.BuildingName.GetHashCode();
                }
                if (this.Entrance != null)
                {
                    hashCode = (hashCode * 59) + this.Entrance.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PhoneNumber != null) {
                // PhoneNumber (string) pattern
                Regex regexPhoneNumber = new Regex(@"\+\d{5,18}", RegexOptions.CultureInvariant);
                if (!regexPhoneNumber.Match(this.PhoneNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
                }
            }

            yield break;
        }
    }

}
