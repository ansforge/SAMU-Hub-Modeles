/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Patient
    /// </summary>
    [DataContract(Name = "patient")]
    public partial class Patient : IEquatable<Patient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Patient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        /// <param name="idPat">Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}    (required).</param>
        /// <param name="administrativeFile">administrativeFile.</param>
        /// <param name="identity">identity.</param>
        /// <param name="healthMotive">healthMotive.</param>
        /// <param name="detail">detail.</param>
        /// <param name="hypothesis">hypothesis.</param>
        public Patient(string idPat = default(string), AdministrativeFile administrativeFile = default(AdministrativeFile), Identity identity = default(Identity), HealthMotive healthMotive = default(HealthMotive), PatientDetail detail = default(PatientDetail), Hypothesis hypothesis = default(Hypothesis))
        {
            // to ensure "idPat" is required (not null)
            if (idPat == null)
            {
                throw new ArgumentNullException("idPat is a required property for Patient and cannot be null");
            }
            this.IdPat = idPat;
            this.AdministrativeFile = administrativeFile;
            this.Identity = identity;
            this.HealthMotive = healthMotive;
            this.Detail = detail;
            this.Hypothesis = hypothesis;
        }

        /// <summary>
        /// Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}   
        /// </summary>
        /// <value>Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}   </value>
        /// <example>example.json#/patient/0/idPat</example>
        [DataMember(Name = "idPat", IsRequired = true, EmitDefaultValue = true)]
        public string IdPat { get; set; }

        /// <summary>
        /// Gets or Sets AdministrativeFile
        /// </summary>
        [DataMember(Name = "administrativeFile", EmitDefaultValue = false)]
        public AdministrativeFile AdministrativeFile { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name = "identity", EmitDefaultValue = false)]
        public Identity Identity { get; set; }

        /// <summary>
        /// Gets or Sets HealthMotive
        /// </summary>
        [DataMember(Name = "healthMotive", EmitDefaultValue = false)]
        public HealthMotive HealthMotive { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public PatientDetail Detail { get; set; }

        /// <summary>
        /// Gets or Sets Hypothesis
        /// </summary>
        [DataMember(Name = "hypothesis", EmitDefaultValue = false)]
        public Hypothesis Hypothesis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  IdPat: ").Append(IdPat).Append("\n");
            sb.Append("  AdministrativeFile: ").Append(AdministrativeFile).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  HealthMotive: ").Append(HealthMotive).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Hypothesis: ").Append(Hypothesis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Patient);
        }

        /// <summary>
        /// Returns true if Patient instances are equal
        /// </summary>
        /// <param name="input">Instance of Patient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Patient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdPat == input.IdPat ||
                    (this.IdPat != null &&
                    this.IdPat.Equals(input.IdPat))
                ) && 
                (
                    this.AdministrativeFile == input.AdministrativeFile ||
                    (this.AdministrativeFile != null &&
                    this.AdministrativeFile.Equals(input.AdministrativeFile))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.HealthMotive == input.HealthMotive ||
                    (this.HealthMotive != null &&
                    this.HealthMotive.Equals(input.HealthMotive))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Hypothesis == input.Hypothesis ||
                    (this.Hypothesis != null &&
                    this.Hypothesis.Equals(input.Hypothesis))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdPat != null)
                {
                    hashCode = (hashCode * 59) + this.IdPat.GetHashCode();
                }
                if (this.AdministrativeFile != null)
                {
                    hashCode = (hashCode * 59) + this.AdministrativeFile.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.HealthMotive != null)
                {
                    hashCode = (hashCode * 59) + this.HealthMotive.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.Hypothesis != null)
                {
                    hashCode = (hashCode * 59) + this.Hypothesis.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.IdPat != null) {
                // IdPat (string) pattern
                Regex regexIdPat = new Regex(@"([\w-]+\.){3,4}patient(\.[\w-]+){1,2}", RegexOptions.CultureInvariant);
                if (!regexIdPat.Match(this.IdPat).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdPat, must match a pattern of " + regexIdPat, new [] { "IdPat" });
                }
            }

            yield break;
        }
    }

}
