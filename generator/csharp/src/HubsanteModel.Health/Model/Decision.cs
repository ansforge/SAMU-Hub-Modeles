/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Decision
    /// </summary>
    [DataContract(Name = "decision")]
    public partial class Decision : IEquatable<Decision>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le type de décision prise (cf.nomenclature associée)
        /// </summary>
        /// <value>A valoriser avec le type de décision prise (cf.nomenclature associée)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DecisionTypeEnum
        {
            /// <summary>
            /// Enum CONSEIL for value: CONSEIL
            /// </summary>
            [EnumMember(Value = "CONSEIL")]
            CONSEIL = 1,

            /// <summary>
            /// Enum PMT for value: PMT
            /// </summary>
            [EnumMember(Value = "PMT")]
            PMT = 2,

            /// <summary>
            /// Enum INTER for value: INTER
            /// </summary>
            [EnumMember(Value = "INTER")]
            INTER = 3,

            /// <summary>
            /// Enum ORIENT for value: ORIENT
            /// </summary>
            [EnumMember(Value = "ORIENT")]
            ORIENT = 4,

            /// <summary>
            /// Enum PASPLUS for value: PASPLUS
            /// </summary>
            [EnumMember(Value = "PASPLUS")]
            PASPLUS = 5
        }


        /// <summary>
        /// A valoriser avec le type de décision prise (cf.nomenclature associée)
        /// </summary>
        /// <value>A valoriser avec le type de décision prise (cf.nomenclature associée)</value>
        /// <example>example.json#/decision/0/decisionType</example>
        [DataMember(Name = "decisionType", IsRequired = true, EmitDefaultValue = true)]
        public DecisionTypeEnum DecisionType { get; set; }
        /// <summary>
        /// A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum SMUR for value: SMUR
            /// </summary>
            [EnumMember(Value = "SMUR")]
            SMUR = 1,

            /// <summary>
            /// Enum HOSPIT for value: HOSPIT
            /// </summary>
            [EnumMember(Value = "HOSPIT")]
            HOSPIT = 2,

            /// <summary>
            /// Enum LIB for value: LIB
            /// </summary>
            [EnumMember(Value = "LIB")]
            LIB = 3,

            /// <summary>
            /// Enum TSU for value: TSU 
            /// </summary>
            [EnumMember(Value = "TSU ")]
            TSU = 4,

            /// <summary>
            /// Enum SIS for value: SIS
            /// </summary>
            [EnumMember(Value = "SIS")]
            SIS = 5,

            /// <summary>
            /// Enum AASC for value: AASC
            /// </summary>
            [EnumMember(Value = "AASC")]
            AASC = 6,

            /// <summary>
            /// Enum FDO for value: FDO
            /// </summary>
            [EnumMember(Value = "FDO")]
            FDO = 7,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 8
        }


        /// <summary>
        /// A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        /// <example>example.json#/decision/0/resourceType</example>
        [DataMember(Name = "resourceType", EmitDefaultValue = false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VehiculeTypeEnum
        {
            /// <summary>
            /// Enum AASC for value: AASC
            /// </summary>
            [EnumMember(Value = "AASC")]
            AASC = 1,

            /// <summary>
            /// Enum VLSC for value: VLSC
            /// </summary>
            [EnumMember(Value = "VLSC")]
            VLSC = 2,

            /// <summary>
            /// Enum VPSP for value: VPSP
            /// </summary>
            [EnumMember(Value = "VPSP")]
            VPSP = 3,

            /// <summary>
            /// Enum AUTRESC for value: AUTRESC
            /// </summary>
            [EnumMember(Value = "AUTRESC")]
            AUTRESC = 4,

            /// <summary>
            /// Enum AUTREVEC for value: AUTREVEC
            /// </summary>
            [EnumMember(Value = "AUTREVEC")]
            AUTREVEC = 5,

            /// <summary>
            /// Enum TAXI for value: TAXI
            /// </summary>
            [EnumMember(Value = "TAXI")]
            TAXI = 6,

            /// <summary>
            /// Enum TRANSP for value: TRANSP
            /// </summary>
            [EnumMember(Value = "TRANSP")]
            TRANSP = 7,

            /// <summary>
            /// Enum TRAIN for value: TRAIN
            /// </summary>
            [EnumMember(Value = "TRAIN")]
            TRAIN = 8,

            /// <summary>
            /// Enum AVION for value: AVION
            /// </summary>
            [EnumMember(Value = "AVION")]
            AVION = 9,

            /// <summary>
            /// Enum PERSO for value: PERSO
            /// </summary>
            [EnumMember(Value = "PERSO")]
            PERSO = 10,

            /// <summary>
            /// Enum APIED for value: APIED
            /// </summary>
            [EnumMember(Value = "APIED")]
            APIED = 11,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 12,

            /// <summary>
            /// Enum AUTRETRA for value: AUTRETRA
            /// </summary>
            [EnumMember(Value = "AUTRETRA")]
            AUTRETRA = 13,

            /// <summary>
            /// Enum FSI for value: FSI
            /// </summary>
            [EnumMember(Value = "FSI")]
            FSI = 14,

            /// <summary>
            /// Enum HELIFSI for value: HELIFSI
            /// </summary>
            [EnumMember(Value = "HELIFSI")]
            HELIFSI = 15,

            /// <summary>
            /// Enum VLFSI for value: VLFSI
            /// </summary>
            [EnumMember(Value = "VLFSI")]
            VLFSI = 16,

            /// <summary>
            /// Enum FFSI for value: FFSI
            /// </summary>
            [EnumMember(Value = "FFSI")]
            FFSI = 17,

            /// <summary>
            /// Enum VHFSI for value: VHFSI
            /// </summary>
            [EnumMember(Value = "VHFSI")]
            VHFSI = 18,

            /// <summary>
            /// Enum LIB for value: LIB
            /// </summary>
            [EnumMember(Value = "LIB")]
            LIB = 19,

            /// <summary>
            /// Enum MEDV for value: MEDV
            /// </summary>
            [EnumMember(Value = "MEDV")]
            MEDV = 20,

            /// <summary>
            /// Enum INF for value: INF
            /// </summary>
            [EnumMember(Value = "INF")]
            INF = 21,

            /// <summary>
            /// Enum AUTREPRO for value: AUTREPRO
            /// </summary>
            [EnumMember(Value = "AUTREPRO")]
            AUTREPRO = 22,

            /// <summary>
            /// Enum SIS for value: SIS
            /// </summary>
            [EnumMember(Value = "SIS")]
            SIS = 23,

            /// <summary>
            /// Enum VSAV for value: VSAV
            /// </summary>
            [EnumMember(Value = "VSAV")]
            VSAV = 24,

            /// <summary>
            /// Enum GRIMP for value: GRIMP
            /// </summary>
            [EnumMember(Value = "GRIMP")]
            GRIMP = 25,

            /// <summary>
            /// Enum VPL for value: VPL
            /// </summary>
            [EnumMember(Value = "VPL")]
            VPL = 26,

            /// <summary>
            /// Enum SRSIS for value: SRSIS
            /// </summary>
            [EnumMember(Value = "SRSIS")]
            SRSIS = 27,

            /// <summary>
            /// Enum FEUSIS for value: FEUSIS
            /// </summary>
            [EnumMember(Value = "FEUSIS")]
            FEUSIS = 28,

            /// <summary>
            /// Enum VPMA for value: VPMA
            /// </summary>
            [EnumMember(Value = "VPMA")]
            VPMA = 29,

            /// <summary>
            /// Enum VCH for value: VCH
            /// </summary>
            [EnumMember(Value = "VCH")]
            VCH = 30,

            /// <summary>
            /// Enum VR for value: VR
            /// </summary>
            [EnumMember(Value = "VR")]
            VR = 31,

            /// <summary>
            /// Enum PCSIS for value: PCSIS
            /// </summary>
            [EnumMember(Value = "PCSIS")]
            PCSIS = 32,

            /// <summary>
            /// Enum VLISP for value: VLISP
            /// </summary>
            [EnumMember(Value = "VLISP")]
            VLISP = 33,

            /// <summary>
            /// Enum VLMSP for value: VLMSP
            /// </summary>
            [EnumMember(Value = "VLMSP")]
            VLMSP = 34,

            /// <summary>
            /// Enum VLCG for value: VLCG
            /// </summary>
            [EnumMember(Value = "VLCG")]
            VLCG = 35,

            /// <summary>
            /// Enum VLSIS for value: VLSIS
            /// </summary>
            [EnumMember(Value = "VLSIS")]
            VLSIS = 36,

            /// <summary>
            /// Enum DRAGON for value: DRAGON
            /// </summary>
            [EnumMember(Value = "DRAGON")]
            DRAGON = 37,

            /// <summary>
            /// Enum AVSC for value: AVSC
            /// </summary>
            [EnumMember(Value = "AVSC")]
            AVSC = 38,

            /// <summary>
            /// Enum MOYSSE for value: MOYSSE
            /// </summary>
            [EnumMember(Value = "MOYSSE")]
            MOYSSE = 39,

            /// <summary>
            /// Enum AUTRESIS for value: AUTRESIS
            /// </summary>
            [EnumMember(Value = "AUTRESIS")]
            AUTRESIS = 40,

            /// <summary>
            /// Enum NAVISIS for value: NAVISIS
            /// </summary>
            [EnumMember(Value = "NAVISIS")]
            NAVISIS = 41,

            /// <summary>
            /// Enum SMUR for value: SMUR
            /// </summary>
            [EnumMember(Value = "SMUR")]
            SMUR = 42,

            /// <summary>
            /// Enum VLM for value: VLM
            /// </summary>
            [EnumMember(Value = "VLM")]
            VLM = 43,

            /// <summary>
            /// Enum VL for value: VL
            /// </summary>
            [EnumMember(Value = "VL")]
            VL = 44,

            /// <summary>
            /// Enum PSM1 for value: PSM1
            /// </summary>
            [EnumMember(Value = "PSM1")]
            PSM1 = 45,

            /// <summary>
            /// Enum PSM2 for value: PSM2
            /// </summary>
            [EnumMember(Value = "PSM2")]
            PSM2 = 46,

            /// <summary>
            /// Enum PSM3 for value: PSM3
            /// </summary>
            [EnumMember(Value = "PSM3")]
            PSM3 = 47,

            /// <summary>
            /// Enum PSMP for value: PSMP
            /// </summary>
            [EnumMember(Value = "PSMP")]
            PSMP = 48,

            /// <summary>
            /// Enum VPC for value: VPC
            /// </summary>
            [EnumMember(Value = "VPC")]
            VPC = 49,

            /// <summary>
            /// Enum AR for value: AR
            /// </summary>
            [EnumMember(Value = "AR")]
            AR = 50,

            /// <summary>
            /// Enum ARBAR for value: AR-BAR
            /// </summary>
            [EnumMember(Value = "AR-BAR")]
            ARBAR = 51,

            /// <summary>
            /// Enum ARPED for value: AR-PED
            /// </summary>
            [EnumMember(Value = "AR-PED")]
            ARPED = 52,

            /// <summary>
            /// Enum HELISMUR for value: HELISMUR
            /// </summary>
            [EnumMember(Value = "HELISMUR")]
            HELISMUR = 53,

            /// <summary>
            /// Enum HELISAN for value: HELISAN
            /// </summary>
            [EnumMember(Value = "HELISAN")]
            HELISAN = 54,

            /// <summary>
            /// Enum AVSMUR for value: AVSMUR
            /// </summary>
            [EnumMember(Value = "AVSMUR")]
            AVSMUR = 55,

            /// <summary>
            /// Enum AVSAN for value: AVSAN
            /// </summary>
            [EnumMember(Value = "AVSAN")]
            AVSAN = 56,

            /// <summary>
            /// Enum NAVISMUR for value: NAVISMUR
            /// </summary>
            [EnumMember(Value = "NAVISMUR")]
            NAVISMUR = 57,

            /// <summary>
            /// Enum TSU for value: TSU
            /// </summary>
            [EnumMember(Value = "TSU")]
            TSU = 58,

            /// <summary>
            /// Enum VSL for value: VSL
            /// </summary>
            [EnumMember(Value = "VSL")]
            VSL = 59,

            /// <summary>
            /// Enum AMBGV for value: AMB-GV
            /// </summary>
            [EnumMember(Value = "AMB-GV")]
            AMBGV = 60,

            /// <summary>
            /// Enum AMBPV for value: AMB-PV
            /// </summary>
            [EnumMember(Value = "AMB-PV")]
            AMBPV = 61,

            /// <summary>
            /// Enum AMBBAR for value: AMB-BAR
            /// </summary>
            [EnumMember(Value = "AMB-BAR")]
            AMBBAR = 62,

            /// <summary>
            /// Enum AMB for value: AMB
            /// </summary>
            [EnumMember(Value = "AMB")]
            AMB = 63
        }


        /// <summary>
        /// A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        /// <example>example.json#/decision/0/vehiculeType</example>
        [DataMember(Name = "vehiculeType", EmitDefaultValue = false)]
        public VehiculeTypeEnum? VehiculeType { get; set; }
        /// <summary>
        /// Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)
        /// </summary>
        /// <value>Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationTypeEnum
        {
            /// <summary>
            /// Enum URGENCES for value: URGENCES
            /// </summary>
            [EnumMember(Value = "URGENCES")]
            URGENCES = 1,

            /// <summary>
            /// Enum SANTE for value: SANTE
            /// </summary>
            [EnumMember(Value = "SANTE")]
            SANTE = 2,

            /// <summary>
            /// Enum CABINET for value: CABINET
            /// </summary>
            [EnumMember(Value = "CABINET")]
            CABINET = 3,

            /// <summary>
            /// Enum DOMICILE for value: DOMICILE
            /// </summary>
            [EnumMember(Value = "DOMICILE")]
            DOMICILE = 4,

            /// <summary>
            /// Enum EPHAD for value: EPHAD
            /// </summary>
            [EnumMember(Value = "EPHAD")]
            EPHAD = 5,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 6
        }


        /// <summary>
        /// Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)
        /// </summary>
        /// <value>Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)</value>
        /// <example>example.json#/decision/0/orientationType</example>
        [DataMember(Name = "orientationType", EmitDefaultValue = false)]
        public OrientationTypeEnum? OrientationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decision" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Decision() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decision" /> class.
        /// </summary>
        /// <param name="idPat">A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur.</param>
        /// <param name="creation">A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. (required).</param>
        /// <param name="varOperator">varOperator (required).</param>
        /// <param name="decisionType">A valoriser avec le type de décision prise (cf.nomenclature associée) (required).</param>
        /// <param name="resourceType">A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation..</param>
        /// <param name="vehiculeType">A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation..</param>
        /// <param name="medicalTransport">A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé.</param>
        /// <param name="orientationType">Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée).</param>
        public Decision(string idPat = default(string), DateTime creation = default(DateTime), Operator varOperator = default(Operator), DecisionTypeEnum decisionType = default(DecisionTypeEnum), ResourceTypeEnum? resourceType = default(ResourceTypeEnum?), VehiculeTypeEnum? vehiculeType = default(VehiculeTypeEnum?), bool medicalTransport = default(bool), OrientationTypeEnum? orientationType = default(OrientationTypeEnum?))
        {
            this.Creation = creation;
            // to ensure "varOperator" is required (not null)
            if (varOperator == null)
            {
                throw new ArgumentNullException("varOperator is a required property for Decision and cannot be null");
            }
            this.VarOperator = varOperator;
            this.DecisionType = decisionType;
            this.IdPat = idPat;
            this.ResourceType = resourceType;
            this.VehiculeType = vehiculeType;
            this.MedicalTransport = medicalTransport;
            this.OrientationType = orientationType;
        }

        /// <summary>
        /// A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur
        /// </summary>
        /// <value>A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur</value>
        /// <example>example.json#/decision/0/idPat</example>
        [DataMember(Name = "idPat", EmitDefaultValue = false)]
        public string IdPat { get; set; }

        /// <summary>
        /// A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.</value>
        [DataMember(Name = "creation", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Creation { get; set; }

        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public Operator VarOperator { get; set; }

        /// <summary>
        /// A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé
        /// </summary>
        /// <value>A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé</value>
        /// <example>false</example>
        [DataMember(Name = "medicalTransport", EmitDefaultValue = true)]
        public bool MedicalTransport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Decision {\n");
            sb.Append("  IdPat: ").Append(IdPat).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  DecisionType: ").Append(DecisionType).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  VehiculeType: ").Append(VehiculeType).Append("\n");
            sb.Append("  MedicalTransport: ").Append(MedicalTransport).Append("\n");
            sb.Append("  OrientationType: ").Append(OrientationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Decision);
        }

        /// <summary>
        /// Returns true if Decision instances are equal
        /// </summary>
        /// <param name="input">Instance of Decision to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Decision input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdPat == input.IdPat ||
                    (this.IdPat != null &&
                    this.IdPat.Equals(input.IdPat))
                ) && 
                (
                    this.Creation == input.Creation ||
                    (this.Creation != null &&
                    this.Creation.Equals(input.Creation))
                ) && 
                (
                    this.VarOperator == input.VarOperator ||
                    (this.VarOperator != null &&
                    this.VarOperator.Equals(input.VarOperator))
                ) && 
                (
                    this.DecisionType == input.DecisionType ||
                    this.DecisionType.Equals(input.DecisionType)
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.VehiculeType == input.VehiculeType ||
                    this.VehiculeType.Equals(input.VehiculeType)
                ) && 
                (
                    this.MedicalTransport == input.MedicalTransport ||
                    this.MedicalTransport.Equals(input.MedicalTransport)
                ) && 
                (
                    this.OrientationType == input.OrientationType ||
                    this.OrientationType.Equals(input.OrientationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdPat != null)
                {
                    hashCode = (hashCode * 59) + this.IdPat.GetHashCode();
                }
                if (this.Creation != null)
                {
                    hashCode = (hashCode * 59) + this.Creation.GetHashCode();
                }
                if (this.VarOperator != null)
                {
                    hashCode = (hashCode * 59) + this.VarOperator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DecisionType.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                hashCode = (hashCode * 59) + this.VehiculeType.GetHashCode();
                hashCode = (hashCode * 59) + this.MedicalTransport.GetHashCode();
                hashCode = (hashCode * 59) + this.OrientationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Creation != null) {
                // Creation (DateTime) pattern
                Regex regexCreation = new Regex(@"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}", RegexOptions.CultureInvariant);
                if (!regexCreation.Match(this.Creation).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Creation, must match a pattern of " + regexCreation, new [] { "Creation" });
                }
            }

            yield break;
        }
    }

}
