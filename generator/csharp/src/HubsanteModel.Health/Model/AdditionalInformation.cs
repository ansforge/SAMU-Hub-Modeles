/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// AdditionalInformation
    /// </summary>
    [DataContract(Name = "additionalInformation")]
    public partial class AdditionalInformation : IEquatable<AdditionalInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalInformation" /> class.
        /// </summary>
        /// <param name="customMap">customMap.</param>
        public AdditionalInformation(List<CustomMap> customMap = default(List<CustomMap>))
        {
            this.CustomMap = customMap;
        }

        /// <summary>
        /// Gets or Sets CustomMap
        /// </summary>
        [DataMember(Name = "customMap", EmitDefaultValue = false)]
        public List<CustomMap> CustomMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalInformation {\n");
            sb.Append("  CustomMap: ").Append(CustomMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalInformation);
        }

        /// <summary>
        /// Returns true if AdditionalInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomMap == input.CustomMap ||
                    this.CustomMap != null &&
                    input.CustomMap != null &&
                    this.CustomMap.SequenceEqual(input.CustomMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomMap != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
