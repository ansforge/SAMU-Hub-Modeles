/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Caller
    /// </summary>
    [DataContract(Name = "caller")]
    public partial class Caller : IEquatable<Caller>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Aa for value: aa
            /// </summary>
            [EnumMember(Value = "aa")]
            Aa = 1,

            /// <summary>
            /// Enum Ab for value: ab
            /// </summary>
            [EnumMember(Value = "ab")]
            Ab = 2,

            /// <summary>
            /// Enum Ae for value: ae
            /// </summary>
            [EnumMember(Value = "ae")]
            Ae = 3,

            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 4,

            /// <summary>
            /// Enum Ak for value: ak
            /// </summary>
            [EnumMember(Value = "ak")]
            Ak = 5,

            /// <summary>
            /// Enum Am for value: am
            /// </summary>
            [EnumMember(Value = "am")]
            Am = 6,

            /// <summary>
            /// Enum An for value: an
            /// </summary>
            [EnumMember(Value = "an")]
            An = 7,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 8,

            /// <summary>
            /// Enum As for value: as
            /// </summary>
            [EnumMember(Value = "as")]
            As = 9,

            /// <summary>
            /// Enum Av for value: av
            /// </summary>
            [EnumMember(Value = "av")]
            Av = 10,

            /// <summary>
            /// Enum Ay for value: ay
            /// </summary>
            [EnumMember(Value = "ay")]
            Ay = 11,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            [EnumMember(Value = "az")]
            Az = 12,

            /// <summary>
            /// Enum Ba for value: ba
            /// </summary>
            [EnumMember(Value = "ba")]
            Ba = 13,

            /// <summary>
            /// Enum Be for value: be
            /// </summary>
            [EnumMember(Value = "be")]
            Be = 14,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 15,

            /// <summary>
            /// Enum Bi for value: bi
            /// </summary>
            [EnumMember(Value = "bi")]
            Bi = 16,

            /// <summary>
            /// Enum Bm for value: bm
            /// </summary>
            [EnumMember(Value = "bm")]
            Bm = 17,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            [EnumMember(Value = "bn")]
            Bn = 18,

            /// <summary>
            /// Enum Bo for value: bo
            /// </summary>
            [EnumMember(Value = "bo")]
            Bo = 19,

            /// <summary>
            /// Enum Br for value: br
            /// </summary>
            [EnumMember(Value = "br")]
            Br = 20,

            /// <summary>
            /// Enum Bs for value: bs
            /// </summary>
            [EnumMember(Value = "bs")]
            Bs = 21,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 22,

            /// <summary>
            /// Enum Ce for value: ce
            /// </summary>
            [EnumMember(Value = "ce")]
            Ce = 23,

            /// <summary>
            /// Enum Ch for value: ch
            /// </summary>
            [EnumMember(Value = "ch")]
            Ch = 24,

            /// <summary>
            /// Enum Co for value: co
            /// </summary>
            [EnumMember(Value = "co")]
            Co = 25,

            /// <summary>
            /// Enum Cr for value: cr
            /// </summary>
            [EnumMember(Value = "cr")]
            Cr = 26,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 27,

            /// <summary>
            /// Enum Cu for value: cu
            /// </summary>
            [EnumMember(Value = "cu")]
            Cu = 28,

            /// <summary>
            /// Enum Cv for value: cv
            /// </summary>
            [EnumMember(Value = "cv")]
            Cv = 29,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 30,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 31,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 32,

            /// <summary>
            /// Enum Dv for value: dv
            /// </summary>
            [EnumMember(Value = "dv")]
            Dv = 33,

            /// <summary>
            /// Enum Dz for value: dz
            /// </summary>
            [EnumMember(Value = "dz")]
            Dz = 34,

            /// <summary>
            /// Enum Ee for value: ee
            /// </summary>
            [EnumMember(Value = "ee")]
            Ee = 35,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 36,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 37,

            /// <summary>
            /// Enum Eo for value: eo
            /// </summary>
            [EnumMember(Value = "eo")]
            Eo = 38,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 39,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 40,

            /// <summary>
            /// Enum Eu for value: eu
            /// </summary>
            [EnumMember(Value = "eu")]
            Eu = 41,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            [EnumMember(Value = "fa")]
            Fa = 42,

            /// <summary>
            /// Enum Ff for value: ff
            /// </summary>
            [EnumMember(Value = "ff")]
            Ff = 43,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 44,

            /// <summary>
            /// Enum Fj for value: fj
            /// </summary>
            [EnumMember(Value = "fj")]
            Fj = 45,

            /// <summary>
            /// Enum Fo for value: fo
            /// </summary>
            [EnumMember(Value = "fo")]
            Fo = 46,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 47,

            /// <summary>
            /// Enum Fy for value: fy
            /// </summary>
            [EnumMember(Value = "fy")]
            Fy = 48,

            /// <summary>
            /// Enum Ga for value: ga
            /// </summary>
            [EnumMember(Value = "ga")]
            Ga = 49,

            /// <summary>
            /// Enum Gd for value: gd
            /// </summary>
            [EnumMember(Value = "gd")]
            Gd = 50,

            /// <summary>
            /// Enum Gl for value: gl
            /// </summary>
            [EnumMember(Value = "gl")]
            Gl = 51,

            /// <summary>
            /// Enum Gn for value: gn
            /// </summary>
            [EnumMember(Value = "gn")]
            Gn = 52,

            /// <summary>
            /// Enum Gu for value: gu
            /// </summary>
            [EnumMember(Value = "gu")]
            Gu = 53,

            /// <summary>
            /// Enum Gv for value: gv
            /// </summary>
            [EnumMember(Value = "gv")]
            Gv = 54,

            /// <summary>
            /// Enum Ha for value: ha
            /// </summary>
            [EnumMember(Value = "ha")]
            Ha = 55,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 56,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 57,

            /// <summary>
            /// Enum Ho for value: ho
            /// </summary>
            [EnumMember(Value = "ho")]
            Ho = 58,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 59,

            /// <summary>
            /// Enum Ht for value: ht
            /// </summary>
            [EnumMember(Value = "ht")]
            Ht = 60,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 61,

            /// <summary>
            /// Enum Hy for value: hy
            /// </summary>
            [EnumMember(Value = "hy")]
            Hy = 62,

            /// <summary>
            /// Enum Hz for value: hz
            /// </summary>
            [EnumMember(Value = "hz")]
            Hz = 63,

            /// <summary>
            /// Enum Ia for value: ia
            /// </summary>
            [EnumMember(Value = "ia")]
            Ia = 64,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 65,

            /// <summary>
            /// Enum Ie for value: ie
            /// </summary>
            [EnumMember(Value = "ie")]
            Ie = 66,

            /// <summary>
            /// Enum Ig for value: ig
            /// </summary>
            [EnumMember(Value = "ig")]
            Ig = 67,

            /// <summary>
            /// Enum Ii for value: ii
            /// </summary>
            [EnumMember(Value = "ii")]
            Ii = 68,

            /// <summary>
            /// Enum Ik for value: ik
            /// </summary>
            [EnumMember(Value = "ik")]
            Ik = 69,

            /// <summary>
            /// Enum Io for value: io
            /// </summary>
            [EnumMember(Value = "io")]
            Io = 70,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 71,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 72,

            /// <summary>
            /// Enum Iu for value: iu
            /// </summary>
            [EnumMember(Value = "iu")]
            Iu = 73,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 74,

            /// <summary>
            /// Enum Jv for value: jv
            /// </summary>
            [EnumMember(Value = "jv")]
            Jv = 75,

            /// <summary>
            /// Enum Ka for value: ka
            /// </summary>
            [EnumMember(Value = "ka")]
            Ka = 76,

            /// <summary>
            /// Enum Kg for value: kg
            /// </summary>
            [EnumMember(Value = "kg")]
            Kg = 77,

            /// <summary>
            /// Enum Ki for value: ki
            /// </summary>
            [EnumMember(Value = "ki")]
            Ki = 78,

            /// <summary>
            /// Enum Kj for value: kj
            /// </summary>
            [EnumMember(Value = "kj")]
            Kj = 79,

            /// <summary>
            /// Enum Kk for value: kk
            /// </summary>
            [EnumMember(Value = "kk")]
            Kk = 80,

            /// <summary>
            /// Enum Kl for value: kl
            /// </summary>
            [EnumMember(Value = "kl")]
            Kl = 81,

            /// <summary>
            /// Enum Km for value: km
            /// </summary>
            [EnumMember(Value = "km")]
            Km = 82,

            /// <summary>
            /// Enum Kn for value: kn
            /// </summary>
            [EnumMember(Value = "kn")]
            Kn = 83,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 84,

            /// <summary>
            /// Enum Kr for value: kr
            /// </summary>
            [EnumMember(Value = "kr")]
            Kr = 85,

            /// <summary>
            /// Enum Ks for value: ks
            /// </summary>
            [EnumMember(Value = "ks")]
            Ks = 86,

            /// <summary>
            /// Enum Ku for value: ku
            /// </summary>
            [EnumMember(Value = "ku")]
            Ku = 87,

            /// <summary>
            /// Enum Kv for value: kv
            /// </summary>
            [EnumMember(Value = "kv")]
            Kv = 88,

            /// <summary>
            /// Enum Kw for value: kw
            /// </summary>
            [EnumMember(Value = "kw")]
            Kw = 89,

            /// <summary>
            /// Enum Ky for value: ky
            /// </summary>
            [EnumMember(Value = "ky")]
            Ky = 90,

            /// <summary>
            /// Enum La for value: la
            /// </summary>
            [EnumMember(Value = "la")]
            La = 91,

            /// <summary>
            /// Enum Lb for value: lb
            /// </summary>
            [EnumMember(Value = "lb")]
            Lb = 92,

            /// <summary>
            /// Enum Lg for value: lg
            /// </summary>
            [EnumMember(Value = "lg")]
            Lg = 93,

            /// <summary>
            /// Enum Li for value: li
            /// </summary>
            [EnumMember(Value = "li")]
            Li = 94,

            /// <summary>
            /// Enum Ln for value: ln
            /// </summary>
            [EnumMember(Value = "ln")]
            Ln = 95,

            /// <summary>
            /// Enum Lo for value: lo
            /// </summary>
            [EnumMember(Value = "lo")]
            Lo = 96,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 97,

            /// <summary>
            /// Enum Lu for value: lu
            /// </summary>
            [EnumMember(Value = "lu")]
            Lu = 98,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 99,

            /// <summary>
            /// Enum Mg for value: mg
            /// </summary>
            [EnumMember(Value = "mg")]
            Mg = 100,

            /// <summary>
            /// Enum Mh for value: mh
            /// </summary>
            [EnumMember(Value = "mh")]
            Mh = 101,

            /// <summary>
            /// Enum Mi for value: mi
            /// </summary>
            [EnumMember(Value = "mi")]
            Mi = 102,

            /// <summary>
            /// Enum Mk for value: mk
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk = 103,

            /// <summary>
            /// Enum Ml for value: ml
            /// </summary>
            [EnumMember(Value = "ml")]
            Ml = 104,

            /// <summary>
            /// Enum Mn for value: mn
            /// </summary>
            [EnumMember(Value = "mn")]
            Mn = 105,

            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 106,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms = 107,

            /// <summary>
            /// Enum Mt for value: mt
            /// </summary>
            [EnumMember(Value = "mt")]
            Mt = 108,

            /// <summary>
            /// Enum My for value: my
            /// </summary>
            [EnumMember(Value = "my")]
            My = 109,

            /// <summary>
            /// Enum Na for value: na
            /// </summary>
            [EnumMember(Value = "na")]
            Na = 110,

            /// <summary>
            /// Enum Nb for value: nb
            /// </summary>
            [EnumMember(Value = "nb")]
            Nb = 111,

            /// <summary>
            /// Enum Nd for value: nd
            /// </summary>
            [EnumMember(Value = "nd")]
            Nd = 112,

            /// <summary>
            /// Enum Ne for value: ne
            /// </summary>
            [EnumMember(Value = "ne")]
            Ne = 113,

            /// <summary>
            /// Enum Ng for value: ng
            /// </summary>
            [EnumMember(Value = "ng")]
            Ng = 114,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 115,

            /// <summary>
            /// Enum Nn for value: nn
            /// </summary>
            [EnumMember(Value = "nn")]
            Nn = 116,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 117,

            /// <summary>
            /// Enum Nr for value: nr
            /// </summary>
            [EnumMember(Value = "nr")]
            Nr = 118,

            /// <summary>
            /// Enum Nv for value: nv
            /// </summary>
            [EnumMember(Value = "nv")]
            Nv = 119,

            /// <summary>
            /// Enum Ny for value: ny
            /// </summary>
            [EnumMember(Value = "ny")]
            Ny = 120,

            /// <summary>
            /// Enum Oc for value: oc
            /// </summary>
            [EnumMember(Value = "oc")]
            Oc = 121,

            /// <summary>
            /// Enum Oj for value: oj
            /// </summary>
            [EnumMember(Value = "oj")]
            Oj = 122,

            /// <summary>
            /// Enum Om for value: om
            /// </summary>
            [EnumMember(Value = "om")]
            Om = 123,

            /// <summary>
            /// Enum Or for value: or
            /// </summary>
            [EnumMember(Value = "or")]
            Or = 124,

            /// <summary>
            /// Enum Os for value: os
            /// </summary>
            [EnumMember(Value = "os")]
            Os = 125,

            /// <summary>
            /// Enum Pa for value: pa
            /// </summary>
            [EnumMember(Value = "pa")]
            Pa = 126,

            /// <summary>
            /// Enum Pi for value: pi
            /// </summary>
            [EnumMember(Value = "pi")]
            Pi = 127,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 128,

            /// <summary>
            /// Enum Ps for value: ps
            /// </summary>
            [EnumMember(Value = "ps")]
            Ps = 129,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 130,

            /// <summary>
            /// Enum Qu for value: qu
            /// </summary>
            [EnumMember(Value = "qu")]
            Qu = 131,

            /// <summary>
            /// Enum Rm for value: rm
            /// </summary>
            [EnumMember(Value = "rm")]
            Rm = 132,

            /// <summary>
            /// Enum Rn for value: rn
            /// </summary>
            [EnumMember(Value = "rn")]
            Rn = 133,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 134,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 135,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            [EnumMember(Value = "rw")]
            Rw = 136,

            /// <summary>
            /// Enum Sa for value: sa
            /// </summary>
            [EnumMember(Value = "sa")]
            Sa = 137,

            /// <summary>
            /// Enum Sc for value: sc
            /// </summary>
            [EnumMember(Value = "sc")]
            Sc = 138,

            /// <summary>
            /// Enum Sd for value: sd
            /// </summary>
            [EnumMember(Value = "sd")]
            Sd = 139,

            /// <summary>
            /// Enum Se for value: se
            /// </summary>
            [EnumMember(Value = "se")]
            Se = 140,

            /// <summary>
            /// Enum Sg for value: sg
            /// </summary>
            [EnumMember(Value = "sg")]
            Sg = 141,

            /// <summary>
            /// Enum Si for value: si
            /// </summary>
            [EnumMember(Value = "si")]
            Si = 142,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 143,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 144,

            /// <summary>
            /// Enum Sm for value: sm
            /// </summary>
            [EnumMember(Value = "sm")]
            Sm = 145,

            /// <summary>
            /// Enum Sn for value: sn
            /// </summary>
            [EnumMember(Value = "sn")]
            Sn = 146,

            /// <summary>
            /// Enum So for value: so
            /// </summary>
            [EnumMember(Value = "so")]
            So = 147,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            [EnumMember(Value = "sq")]
            Sq = 148,

            /// <summary>
            /// Enum Sr for value: sr
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr = 149,

            /// <summary>
            /// Enum Ss for value: ss
            /// </summary>
            [EnumMember(Value = "ss")]
            Ss = 150,

            /// <summary>
            /// Enum St for value: st
            /// </summary>
            [EnumMember(Value = "st")]
            St = 151,

            /// <summary>
            /// Enum Su for value: su
            /// </summary>
            [EnumMember(Value = "su")]
            Su = 152,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 153,

            /// <summary>
            /// Enum Sw for value: sw
            /// </summary>
            [EnumMember(Value = "sw")]
            Sw = 154,

            /// <summary>
            /// Enum Ta for value: ta
            /// </summary>
            [EnumMember(Value = "ta")]
            Ta = 155,

            /// <summary>
            /// Enum Te for value: te
            /// </summary>
            [EnumMember(Value = "te")]
            Te = 156,

            /// <summary>
            /// Enum Tg for value: tg
            /// </summary>
            [EnumMember(Value = "tg")]
            Tg = 157,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 158,

            /// <summary>
            /// Enum Ti for value: ti
            /// </summary>
            [EnumMember(Value = "ti")]
            Ti = 159,

            /// <summary>
            /// Enum Tk for value: tk
            /// </summary>
            [EnumMember(Value = "tk")]
            Tk = 160,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            [EnumMember(Value = "tl")]
            Tl = 161,

            /// <summary>
            /// Enum Tn for value: tn
            /// </summary>
            [EnumMember(Value = "tn")]
            Tn = 162,

            /// <summary>
            /// Enum To for value: to
            /// </summary>
            [EnumMember(Value = "to")]
            To = 163,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 164,

            /// <summary>
            /// Enum Ts for value: ts
            /// </summary>
            [EnumMember(Value = "ts")]
            Ts = 165,

            /// <summary>
            /// Enum Tt for value: tt
            /// </summary>
            [EnumMember(Value = "tt")]
            Tt = 166,

            /// <summary>
            /// Enum Tw for value: tw
            /// </summary>
            [EnumMember(Value = "tw")]
            Tw = 167,

            /// <summary>
            /// Enum Ty for value: ty
            /// </summary>
            [EnumMember(Value = "ty")]
            Ty = 168,

            /// <summary>
            /// Enum Ug for value: ug
            /// </summary>
            [EnumMember(Value = "ug")]
            Ug = 169,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk = 170,

            /// <summary>
            /// Enum Ur for value: ur
            /// </summary>
            [EnumMember(Value = "ur")]
            Ur = 171,

            /// <summary>
            /// Enum Uz for value: uz
            /// </summary>
            [EnumMember(Value = "uz")]
            Uz = 172,

            /// <summary>
            /// Enum Ve for value: ve
            /// </summary>
            [EnumMember(Value = "ve")]
            Ve = 173,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 174,

            /// <summary>
            /// Enum Vo for value: vo
            /// </summary>
            [EnumMember(Value = "vo")]
            Vo = 175,

            /// <summary>
            /// Enum Wa for value: wa
            /// </summary>
            [EnumMember(Value = "wa")]
            Wa = 176,

            /// <summary>
            /// Enum Wo for value: wo
            /// </summary>
            [EnumMember(Value = "wo")]
            Wo = 177,

            /// <summary>
            /// Enum Xh for value: xh
            /// </summary>
            [EnumMember(Value = "xh")]
            Xh = 178,

            /// <summary>
            /// Enum Yi for value: yi
            /// </summary>
            [EnumMember(Value = "yi")]
            Yi = 179,

            /// <summary>
            /// Enum Yo for value: yo
            /// </summary>
            [EnumMember(Value = "yo")]
            Yo = 180,

            /// <summary>
            /// Enum Za for value: za
            /// </summary>
            [EnumMember(Value = "za")]
            Za = 181,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            [EnumMember(Value = "zh")]
            Zh = 182,

            /// <summary>
            /// Enum Zu for value: zu
            /// </summary>
            [EnumMember(Value = "zu")]
            Zu = 183
        }


        /// <summary>
        /// A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée.</value>
        /// <example>example.json#/initialAlert/caller/language</example>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// A valoriser avec la relation du requérant avec l&#39;incident / le patient / la victime. cf. nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la relation du requérant avec l&#39;incident / le patient / la victime. cf. nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SUJET for value: SUJET
            /// </summary>
            [EnumMember(Value = "SUJET")]
            SUJET = 1,

            /// <summary>
            /// Enum FAMILLE for value: FAMILLE
            /// </summary>
            [EnumMember(Value = "FAMILLE")]
            FAMILLE = 2,

            /// <summary>
            /// Enum TIERS for value: TIERS
            /// </summary>
            [EnumMember(Value = "TIERS")]
            TIERS = 3,

            /// <summary>
            /// Enum POMPIER for value: POMPIER
            /// </summary>
            [EnumMember(Value = "POMPIER")]
            POMPIER = 4,

            /// <summary>
            /// Enum AMBULANC for value: AMBULANC
            /// </summary>
            [EnumMember(Value = "AMBULANC")]
            AMBULANC = 5,

            /// <summary>
            /// Enum AMBULANCAASC for value: AMBULANC.AASC
            /// </summary>
            [EnumMember(Value = "AMBULANC.AASC")]
            AMBULANCAASC = 6,

            /// <summary>
            /// Enum AMBULANCAUTRESEC for value: AMBULANC.AUTRESEC
            /// </summary>
            [EnumMember(Value = "AMBULANC.AUTRESEC")]
            AMBULANCAUTRESEC = 7,

            /// <summary>
            /// Enum SECOUR for value: SECOUR
            /// </summary>
            [EnumMember(Value = "SECOUR")]
            SECOUR = 8,

            /// <summary>
            /// Enum MED for value: MED
            /// </summary>
            [EnumMember(Value = "MED")]
            MED = 9,

            /// <summary>
            /// Enum MEDMEDSOS for value: MED.MEDSOS
            /// </summary>
            [EnumMember(Value = "MED.MEDSOS")]
            MEDMEDSOS = 10,

            /// <summary>
            /// Enum MEDMRL for value: MED.MRL
            /// </summary>
            [EnumMember(Value = "MED.MRL")]
            MEDMRL = 11,

            /// <summary>
            /// Enum MEDEFFML for value: MED.EFFML
            /// </summary>
            [EnumMember(Value = "MED.EFFML")]
            MEDEFFML = 12,

            /// <summary>
            /// Enum SANTE for value: SANTE
            /// </summary>
            [EnumMember(Value = "SANTE")]
            SANTE = 13,

            /// <summary>
            /// Enum SANTEINF for value: SANTE.INF
            /// </summary>
            [EnumMember(Value = "SANTE.INF")]
            SANTEINF = 14,

            /// <summary>
            /// Enum SANTEAIDESOIN for value: SANTE.AIDESOIN
            /// </summary>
            [EnumMember(Value = "SANTE.AIDESOIN")]
            SANTEAIDESOIN = 15,

            /// <summary>
            /// Enum SANTESF for value: SANTE.SF
            /// </summary>
            [EnumMember(Value = "SANTE.SF")]
            SANTESF = 16,

            /// <summary>
            /// Enum SANTEAIDEDOM for value: SANTE.AIDEDOM
            /// </summary>
            [EnumMember(Value = "SANTE.AIDEDOM")]
            SANTEAIDEDOM = 17,

            /// <summary>
            /// Enum SANTEPHARMA for value: SANTE.PHARMA
            /// </summary>
            [EnumMember(Value = "SANTE.PHARMA")]
            SANTEPHARMA = 18,

            /// <summary>
            /// Enum SANTEDENTISTE for value: SANTE.DENTISTE
            /// </summary>
            [EnumMember(Value = "SANTE.DENTISTE")]
            SANTEDENTISTE = 19,

            /// <summary>
            /// Enum SANTELABO for value: SANTE.LABO
            /// </summary>
            [EnumMember(Value = "SANTE.LABO")]
            SANTELABO = 20,

            /// <summary>
            /// Enum FDOMILI for value: FDO-MILI
            /// </summary>
            [EnumMember(Value = "FDO-MILI")]
            FDOMILI = 21,

            /// <summary>
            /// Enum FDOMILIPOL for value: FDO-MILI.POL
            /// </summary>
            [EnumMember(Value = "FDO-MILI.POL")]
            FDOMILIPOL = 22,

            /// <summary>
            /// Enum FDOMILIGENDARM for value: FDO-MILI.GENDARM
            /// </summary>
            [EnumMember(Value = "FDO-MILI.GENDARM")]
            FDOMILIGENDARM = 23,

            /// <summary>
            /// Enum FDOMILIMILI for value: FDO-MILI.MILI
            /// </summary>
            [EnumMember(Value = "FDO-MILI.MILI")]
            FDOMILIMILI = 24,

            /// <summary>
            /// Enum ADMTUTL for value: ADM-TUTL
            /// </summary>
            [EnumMember(Value = "ADM-TUTL")]
            ADMTUTL = 25,

            /// <summary>
            /// Enum VIP for value: VIP
            /// </summary>
            [EnumMember(Value = "VIP")]
            VIP = 26,

            /// <summary>
            /// Enum OBJCONNC for value: OBJCONNC
            /// </summary>
            [EnumMember(Value = "OBJCONNC")]
            OBJCONNC = 27,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 28,

            /// <summary>
            /// Enum INCONNU for value: INCONNU
            /// </summary>
            [EnumMember(Value = "INCONNU")]
            INCONNU = 29
        }


        /// <summary>
        /// A valoriser avec la relation du requérant avec l&#39;incident / le patient / la victime. cf. nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la relation du requérant avec l&#39;incident / le patient / la victime. cf. nomenclature associée.</value>
        /// <example>example.json#/initialAlert/caller/type</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommunicationEnum
        {
            /// <summary>
            /// Enum AUCUNE for value: AUCUNE
            /// </summary>
            [EnumMember(Value = "AUCUNE")]
            AUCUNE = 1,

            /// <summary>
            /// Enum MUET for value: MUET
            /// </summary>
            [EnumMember(Value = "MUET")]
            MUET = 2,

            /// <summary>
            /// Enum VISION for value: VISION
            /// </summary>
            [EnumMember(Value = "VISION")]
            VISION = 3,

            /// <summary>
            /// Enum LANGUE for value: LANGUE
            /// </summary>
            [EnumMember(Value = "LANGUE")]
            LANGUE = 4,

            /// <summary>
            /// Enum PANIQUE for value: PANIQUE
            /// </summary>
            [EnumMember(Value = "PANIQUE")]
            PANIQUE = 5,

            /// <summary>
            /// Enum HOSTILE for value: HOSTILE
            /// </summary>
            [EnumMember(Value = "HOSTILE")]
            HOSTILE = 6,

            /// <summary>
            /// Enum AGITE for value: AGITE
            /// </summary>
            [EnumMember(Value = "AGITE")]
            AGITE = 7,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 8,

            /// <summary>
            /// Enum IMPOSS for value: IMPOSS
            /// </summary>
            [EnumMember(Value = "IMPOSS")]
            IMPOSS = 9
        }


        /// <summary>
        /// A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée.</value>
        /// <example>example.json#/initialAlert/caller/communication</example>
        [DataMember(Name = "communication", EmitDefaultValue = false)]
        public CommunicationEnum? Communication { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Caller" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Caller() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Caller" /> class.
        /// </summary>
        /// <param name="callerContact">callerContact (required).</param>
        /// <param name="callbackContact">callbackContact.</param>
        /// <param name="language">A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée..</param>
        /// <param name="type">A valoriser avec la relation du requérant avec l&#39;incident / le patient / la victime. cf. nomenclature associée..</param>
        /// <param name="communication">A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée..</param>
        /// <param name="freetext">Champ libre qui permet de compléter les informations spécifiquement liées au requérant..</param>
        /// <param name="detailedName">detailedName.</param>
        public Caller(Contact callerContact = default(Contact), Contact callbackContact = default(Contact), LanguageEnum? language = default(LanguageEnum?), TypeEnum? type = default(TypeEnum?), CommunicationEnum? communication = default(CommunicationEnum?), string freetext = default(string), DetailedName detailedName = default(DetailedName))
        {
            // to ensure "callerContact" is required (not null)
            if (callerContact == null)
            {
                throw new ArgumentNullException("callerContact is a required property for Caller and cannot be null");
            }
            this.CallerContact = callerContact;
            this.CallbackContact = callbackContact;
            this.Language = language;
            this.Type = type;
            this.Communication = communication;
            this.Freetext = freetext;
            this.DetailedName = detailedName;
        }

        /// <summary>
        /// Gets or Sets CallerContact
        /// </summary>
        [DataMember(Name = "callerContact", IsRequired = true, EmitDefaultValue = true)]
        public Contact CallerContact { get; set; }

        /// <summary>
        /// Gets or Sets CallbackContact
        /// </summary>
        [DataMember(Name = "callbackContact", EmitDefaultValue = false)]
        public Contact CallbackContact { get; set; }

        /// <summary>
        /// Champ libre qui permet de compléter les informations spécifiquement liées au requérant.
        /// </summary>
        /// <value>Champ libre qui permet de compléter les informations spécifiquement liées au requérant.</value>
        /// <example>example.json#/initialAlert/caller/freetext</example>
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public string Freetext { get; set; }

        /// <summary>
        /// Gets or Sets DetailedName
        /// </summary>
        [DataMember(Name = "detailedName", EmitDefaultValue = false)]
        public DetailedName DetailedName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Caller {\n");
            sb.Append("  CallerContact: ").Append(CallerContact).Append("\n");
            sb.Append("  CallbackContact: ").Append(CallbackContact).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Communication: ").Append(Communication).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("  DetailedName: ").Append(DetailedName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Caller);
        }

        /// <summary>
        /// Returns true if Caller instances are equal
        /// </summary>
        /// <param name="input">Instance of Caller to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Caller input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallerContact == input.CallerContact ||
                    (this.CallerContact != null &&
                    this.CallerContact.Equals(input.CallerContact))
                ) && 
                (
                    this.CallbackContact == input.CallbackContact ||
                    (this.CallbackContact != null &&
                    this.CallbackContact.Equals(input.CallbackContact))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Communication == input.Communication ||
                    this.Communication.Equals(input.Communication)
                ) && 
                (
                    this.Freetext == input.Freetext ||
                    (this.Freetext != null &&
                    this.Freetext.Equals(input.Freetext))
                ) && 
                (
                    this.DetailedName == input.DetailedName ||
                    (this.DetailedName != null &&
                    this.DetailedName.Equals(input.DetailedName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallerContact != null)
                {
                    hashCode = (hashCode * 59) + this.CallerContact.GetHashCode();
                }
                if (this.CallbackContact != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackContact.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Language.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Communication.GetHashCode();
                if (this.Freetext != null)
                {
                    hashCode = (hashCode * 59) + this.Freetext.GetHashCode();
                }
                if (this.DetailedName != null)
                {
                    hashCode = (hashCode * 59) + this.DetailedName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
