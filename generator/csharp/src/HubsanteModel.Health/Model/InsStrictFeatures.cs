/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// InsStrictFeatures
    /// </summary>
    [DataContract(Name = "insStrictFeatures")]
    public partial class InsStrictFeatures : IEquatable<InsStrictFeatures>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le sexe du patient
        /// </summary>
        /// <value>A valoriser avec le sexe du patient</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 3,

            /// <summary>
            /// Enum UN for value: UN
            /// </summary>
            [EnumMember(Value = "UN")]
            UN = 4
        }


        /// <summary>
        /// A valoriser avec le sexe du patient
        /// </summary>
        /// <value>A valoriser avec le sexe du patient</value>
        /// <example>example.json#/patient/0/identity/strictFeatures/sex</example>
        [DataMember(Name = "sex", EmitDefaultValue = false)]
        public SexEnum? Sex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InsStrictFeatures" /> class.
        /// </summary>
        /// <param name="birthName">A valoriser avec le nom de naissance du patient. Egalement appelé nom de famille..</param>
        /// <param name="birthDate">A valoriser avec la date de naissance du patient.</param>
        /// <param name="sex">A valoriser avec le sexe du patient.</param>
        public InsStrictFeatures(string birthName = default(string), string birthDate = default(string), SexEnum? sex = default(SexEnum?))
        {
            this.BirthName = birthName;
            this.BirthDate = birthDate;
            this.Sex = sex;
        }

        /// <summary>
        /// A valoriser avec le nom de naissance du patient. Egalement appelé nom de famille.
        /// </summary>
        /// <value>A valoriser avec le nom de naissance du patient. Egalement appelé nom de famille.</value>
        /// <example>example.json#/patient/0/identity/strictFeatures/birthName</example>
        [DataMember(Name = "birthName", EmitDefaultValue = false)]
        public string BirthName { get; set; }

        /// <summary>
        /// A valoriser avec la date de naissance du patient
        /// </summary>
        /// <value>A valoriser avec la date de naissance du patient</value>
        /// <example>example.json#/patient/0/identity/strictFeatures/birthDate</example>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public string BirthDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsStrictFeatures {\n");
            sb.Append("  BirthName: ").Append(BirthName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsStrictFeatures);
        }

        /// <summary>
        /// Returns true if InsStrictFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of InsStrictFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsStrictFeatures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BirthName == input.BirthName ||
                    (this.BirthName != null &&
                    this.BirthName.Equals(input.BirthName))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Sex == input.Sex ||
                    this.Sex.Equals(input.Sex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BirthName != null)
                {
                    hashCode = (hashCode * 59) + this.BirthName.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.BirthDate != null) {
                // BirthDate (string) pattern
                Regex regexBirthDate = new Regex(@"^\d{4}-\d{2}-\d{2}$", RegexOptions.CultureInvariant);
                if (!regexBirthDate.Match(this.BirthDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDate, must match a pattern of " + regexBirthDate, new [] { "BirthDate" });
                }
            }

            yield break;
        }
    }

}
