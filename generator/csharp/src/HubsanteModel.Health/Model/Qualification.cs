/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Qualification
    /// </summary>
    [DataContract(Name = "qualification")]
    public partial class Qualification : IEquatable<Qualification>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le numéro de provenance de l&#39;appel.
        /// </summary>
        /// <value>A valoriser avec le numéro de provenance de l&#39;appel.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginEnum
        {
            /// <summary>
            /// Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")]
            _15 = 1,

            /// <summary>
            /// Enum _17 for value: 17
            /// </summary>
            [EnumMember(Value = "17")]
            _17 = 2,

            /// <summary>
            /// Enum _18 for value: 18
            /// </summary>
            [EnumMember(Value = "18")]
            _18 = 3,

            /// <summary>
            /// Enum _112 for value: 112
            /// </summary>
            [EnumMember(Value = "112")]
            _112 = 4,

            /// <summary>
            /// Enum _116117 for value: 116117
            /// </summary>
            [EnumMember(Value = "116117")]
            _116117 = 5
        }


        /// <summary>
        /// A valoriser avec le numéro de provenance de l&#39;appel.
        /// </summary>
        /// <value>A valoriser avec le numéro de provenance de l&#39;appel.</value>
        /// <example>example.json#/qualification/origin</example>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Qualification" /> class.
        /// </summary>
        /// <param name="origin">A valoriser avec le numéro de provenance de l&#39;appel..</param>
        /// <param name="riskThreat">riskThreat.</param>
        /// <param name="whatsHappen">whatsHappen.</param>
        /// <param name="locationKind">locationKind.</param>
        /// <param name="healthMotive">healthMotive.</param>
        /// <param name="details">details.</param>
        public Qualification(OriginEnum? origin = default(OriginEnum?), List<RiskThreat> riskThreat = default(List<RiskThreat>), WhatsHappen whatsHappen = default(WhatsHappen), LocationKind locationKind = default(LocationKind), HealthMotive healthMotive = default(HealthMotive), CaseDetails details = default(CaseDetails))
        {
            this.Origin = origin;
            this.RiskThreat = riskThreat;
            this.WhatsHappen = whatsHappen;
            this.LocationKind = locationKind;
            this.HealthMotive = healthMotive;
            this.Details = details;
        }

        /// <summary>
        /// Gets or Sets RiskThreat
        /// </summary>
        [DataMember(Name = "riskThreat", EmitDefaultValue = false)]
        public List<RiskThreat> RiskThreat { get; set; }

        /// <summary>
        /// Gets or Sets WhatsHappen
        /// </summary>
        [DataMember(Name = "whatsHappen", EmitDefaultValue = false)]
        public WhatsHappen WhatsHappen { get; set; }

        /// <summary>
        /// Gets or Sets LocationKind
        /// </summary>
        [DataMember(Name = "locationKind", EmitDefaultValue = false)]
        public LocationKind LocationKind { get; set; }

        /// <summary>
        /// Gets or Sets HealthMotive
        /// </summary>
        [DataMember(Name = "healthMotive", EmitDefaultValue = false)]
        public HealthMotive HealthMotive { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public CaseDetails Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Qualification {\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RiskThreat: ").Append(RiskThreat).Append("\n");
            sb.Append("  WhatsHappen: ").Append(WhatsHappen).Append("\n");
            sb.Append("  LocationKind: ").Append(LocationKind).Append("\n");
            sb.Append("  HealthMotive: ").Append(HealthMotive).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Qualification);
        }

        /// <summary>
        /// Returns true if Qualification instances are equal
        /// </summary>
        /// <param name="input">Instance of Qualification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Qualification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Origin == input.Origin ||
                    this.Origin.Equals(input.Origin)
                ) && 
                (
                    this.RiskThreat == input.RiskThreat ||
                    this.RiskThreat != null &&
                    input.RiskThreat != null &&
                    this.RiskThreat.SequenceEqual(input.RiskThreat)
                ) && 
                (
                    this.WhatsHappen == input.WhatsHappen ||
                    (this.WhatsHappen != null &&
                    this.WhatsHappen.Equals(input.WhatsHappen))
                ) && 
                (
                    this.LocationKind == input.LocationKind ||
                    (this.LocationKind != null &&
                    this.LocationKind.Equals(input.LocationKind))
                ) && 
                (
                    this.HealthMotive == input.HealthMotive ||
                    (this.HealthMotive != null &&
                    this.HealthMotive.Equals(input.HealthMotive))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                if (this.RiskThreat != null)
                {
                    hashCode = (hashCode * 59) + this.RiskThreat.GetHashCode();
                }
                if (this.WhatsHappen != null)
                {
                    hashCode = (hashCode * 59) + this.WhatsHappen.GetHashCode();
                }
                if (this.LocationKind != null)
                {
                    hashCode = (hashCode * 59) + this.LocationKind.GetHashCode();
                }
                if (this.HealthMotive != null)
                {
                    hashCode = (hashCode * 59) + this.HealthMotive.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
