/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// Alert
    /// </summary>
    [DataContract(Name = "alert")]
    public partial class Alert : IEquatable<Alert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Alert() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        /// <param name="reception">A valoriser avec le groupe date heure de réception de l&#39;alerte/appel (required).</param>
        /// <param name="notes">notes.</param>
        /// <param name="caller">caller (required).</param>
        public Alert(DateTime reception = default(DateTime), List<Notes> notes = default(List<Notes>), Caller caller = default(Caller))
        {
            this.Reception = reception;
            // to ensure "caller" is required (not null)
            if (caller == null)
            {
                throw new ArgumentNullException("caller is a required property for Alert and cannot be null");
            }
            this.Caller = caller;
            this.Notes = notes;
        }

        /// <summary>
        /// A valoriser avec le groupe date heure de réception de l&#39;alerte/appel
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de réception de l&#39;alerte/appel</value>
        [DataMember(Name = "reception", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Reception { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<Notes> Notes { get; set; }

        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name = "caller", IsRequired = true, EmitDefaultValue = true)]
        public Caller Caller { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Alert {\n");
            sb.Append("  Reception: ").Append(Reception).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Alert);
        }

        /// <summary>
        /// Returns true if Alert instances are equal
        /// </summary>
        /// <param name="input">Instance of Alert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Alert input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reception == input.Reception ||
                    (this.Reception != null &&
                    this.Reception.Equals(input.Reception))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.Caller == input.Caller ||
                    (this.Caller != null &&
                    this.Caller.Equals(input.Caller))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reception != null)
                {
                    hashCode = (hashCode * 59) + this.Reception.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Caller != null)
                {
                    hashCode = (hashCode * 59) + this.Caller.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Reception != null) {
                // Reception (DateTime) pattern
                Regex regexReception = new Regex(@"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}", RegexOptions.CultureInvariant);
                if (!regexReception.Match(this.Reception).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reception, must match a pattern of " + regexReception, new [] { "Reception" });
                }
            }

            yield break;
        }
    }

}
