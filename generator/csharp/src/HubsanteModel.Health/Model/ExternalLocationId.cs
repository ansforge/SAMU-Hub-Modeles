/*
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel.Health.Client.OpenAPIDateConverter;

namespace HubsanteModel.Health.Model
{
    /// <summary>
    /// ExternalLocationId
    /// </summary>
    [DataContract(Name = "externalLocationId")]
    public partial class ExternalLocationId : IEquatable<ExternalLocationId>, IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le type de l&#39;identifiant fourni. Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le type de l&#39;identifiant fourni. Cf nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum FINESSADMINISTRATIF for value: FINESS_ADMINISTRATIF
            /// </summary>
            [EnumMember(Value = "FINESS_ADMINISTRATIF")]
            FINESSADMINISTRATIF = 1,

            /// <summary>
            /// Enum FINESSGEOGRAPHIQUE for value: FINESS_GEOGRAPHIQUE
            /// </summary>
            [EnumMember(Value = "FINESS_GEOGRAPHIQUE")]
            FINESSGEOGRAPHIQUE = 2,

            /// <summary>
            /// Enum SIREN for value: SIREN
            /// </summary>
            [EnumMember(Value = "SIREN")]
            SIREN = 3,

            /// <summary>
            /// Enum SIRET for value: SIRET
            /// </summary>
            [EnumMember(Value = "SIRET")]
            SIRET = 4,

            /// <summary>
            /// Enum APENAF for value: APE_NAF
            /// </summary>
            [EnumMember(Value = "APE_NAF")]
            APENAF = 5
        }


        /// <summary>
        /// A valoriser avec le type de l&#39;identifiant fourni. Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le type de l&#39;identifiant fourni. Cf nomenclature associée.</value>
        /// <example>example.json#/location/externalLocationId/0/source</example>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLocationId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalLocationId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLocationId" /> class.
        /// </summary>
        /// <param name="source">A valoriser avec le type de l&#39;identifiant fourni. Cf nomenclature associée. (required).</param>
        /// <param name="value">A valoriser avec l&#39;identifiant en lui-même (required).</param>
        public ExternalLocationId(SourceEnum source = default(SourceEnum), string value = default(string))
        {
            this.Source = source;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for ExternalLocationId and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// A valoriser avec l&#39;identifiant en lui-même
        /// </summary>
        /// <value>A valoriser avec l&#39;identifiant en lui-même</value>
        /// <example>example.json#/location/externalLocationId/0/value</example>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalLocationId {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalLocationId);
        }

        /// <summary>
        /// Returns true if ExternalLocationId instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalLocationId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalLocationId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Value != null) {
                // Value (string) pattern
                Regex regexValue = new Regex(@"([0-9A-Z]{2}0\d{5}\d|\d{9}|\d{14}|\d{4}[A-Za-z])", RegexOptions.CultureInvariant);
                if (!regexValue.Match(this.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
                }
            }

            yield break;
        }
    }

}
