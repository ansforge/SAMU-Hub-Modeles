# coding: utf-8

"""
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from hubsante_model.health.models.operator import Operator
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Decision(BaseModel):
    """
    Decision
    """ # noqa: E501
    id_pat: Optional[StrictStr] = Field(default=None, description="A valoriser avec l'ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur", alias="idPat")
    creation: datetime = Field(description="A valoriser avec le groupe date heure de création de la décision.  L'indicateur de fuseau horaire Z ne doit pas être utilisé.")
    operator: Operator
    decision_type: StrictStr = Field(description="A valoriser avec le type de décision prise (cf.nomenclature associée)", alias="decisionType")
    resource_type: Optional[StrictStr] = Field(default=None, description="A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d'intervention ou de transport/orientation.", alias="resourceType")
    vehicule_type: Optional[StrictStr] = Field(default=None, description="A valoriser avec le type de vecteur souhaité / demandé (cf.nomenclature associée) en fonction du type de décision. A fournir obligatoirement pour une décision d'intervention ou de transport/orientation.", alias="vehiculeType")
    medical_transport: Optional[StrictBool] = Field(default=None, description="A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True = transport médicalisé False = transport non médicalisé", alias="medicalTransport")
    orientation_type: Optional[StrictStr] = Field(default=None, description="Indique le type de destination en cas de décision d'orientation (cf. nomenclature associée)", alias="orientationType")
    __properties: ClassVar[List[str]] = ["idPat", "creation", "operator", "decisionType", "resourceType", "vehiculeType", "medicalTransport", "orientationType"]

    @field_validator('creation')
    def creation_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    @field_validator('decision_type')
    def decision_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CONSEIL', 'PMT', 'INTER', 'ORIENT', 'PASPLUS'):
            raise ValueError("must be one of enum values ('CONSEIL', 'PMT', 'INTER', 'ORIENT', 'PASPLUS')")
        return value

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SMUR', 'MED', 'PARAMED', 'HOSPIT', 'LIB', 'MEDC', 'PHARMA', 'INF', 'MEDSPE', 'DENT', 'AUTREPRO', 'TSU ', 'SIS', 'MSP', 'ISP', 'SP', 'AASC', 'FDO', 'HELIFSI', 'VLFSI', 'FFSI', 'DGDD', 'AUTRE', 'ADM', 'DAE', 'INCONNU'):
            raise ValueError("must be one of enum values ('SMUR', 'MED', 'PARAMED', 'HOSPIT', 'LIB', 'MEDC', 'PHARMA', 'INF', 'MEDSPE', 'DENT', 'AUTREPRO', 'TSU ', 'SIS', 'MSP', 'ISP', 'SP', 'AASC', 'FDO', 'HELIFSI', 'VLFSI', 'FFSI', 'DGDD', 'AUTRE', 'ADM', 'DAE', 'INCONNU')")
        return value

    @field_validator('vehicule_type')
    def vehicule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AASC', 'VLSC', 'VPSP', 'AUTRESC', 'AUTREVEC', 'TAXI', 'TRANSP', 'TRAIN', 'AVION', 'PERSO', 'APIED', 'AUTRE', 'AUTRETRA', 'FSI', 'HELIFSI', 'VLFSI', 'FFSI', 'VHFSI', 'LIB', 'MEDV', 'INF', 'AUTREPRO', 'SIS', 'VSAV', 'GRIMP', 'VPL', 'SRSIS', 'FEUSIS', 'VPMA', 'VCH', 'VR', 'PCSIS', 'VLISP', 'VLMSP', 'VLCG', 'VLSIS', 'DRAGON', 'AVSC', 'MOYSSE', 'AUTRESIS', 'NAVISIS', 'SMUR', 'VLM', 'VL', 'PSM1', 'PSM2', 'PSM3', 'PSMP', 'VPC', 'AR', 'AR-BAR', 'AR-PED', 'HELISMUR', 'HELISAN', 'AVSMUR', 'AVSAN', 'NAVISMUR', 'TSU', 'VSL', 'AMB-GV', 'AMB-PV', 'AMB-BAR', 'AMB'):
            raise ValueError("must be one of enum values ('AASC', 'VLSC', 'VPSP', 'AUTRESC', 'AUTREVEC', 'TAXI', 'TRANSP', 'TRAIN', 'AVION', 'PERSO', 'APIED', 'AUTRE', 'AUTRETRA', 'FSI', 'HELIFSI', 'VLFSI', 'FFSI', 'VHFSI', 'LIB', 'MEDV', 'INF', 'AUTREPRO', 'SIS', 'VSAV', 'GRIMP', 'VPL', 'SRSIS', 'FEUSIS', 'VPMA', 'VCH', 'VR', 'PCSIS', 'VLISP', 'VLMSP', 'VLCG', 'VLSIS', 'DRAGON', 'AVSC', 'MOYSSE', 'AUTRESIS', 'NAVISIS', 'SMUR', 'VLM', 'VL', 'PSM1', 'PSM2', 'PSM3', 'PSMP', 'VPC', 'AR', 'AR-BAR', 'AR-PED', 'HELISMUR', 'HELISAN', 'AVSMUR', 'AVSAN', 'NAVISMUR', 'TSU', 'VSL', 'AMB-GV', 'AMB-PV', 'AMB-BAR', 'AMB')")
        return value

    @field_validator('orientation_type')
    def orientation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('URGENCES', 'SANTE', 'CABINET', 'DOMICILE', 'EPHAD', 'AUTRE'):
            raise ValueError("must be one of enum values ('URGENCES', 'SANTE', 'CABINET', 'DOMICILE', 'EPHAD', 'AUTRE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Decision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operator
        if self.operator:
            _dict['operator'] = self.operator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Decision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idPat": obj.get("idPat"),
            "creation": obj.get("creation"),
            "operator": Operator.from_dict(obj.get("operator")) if obj.get("operator") is not None else None,
            "decisionType": obj.get("decisionType"),
            "resourceType": obj.get("resourceType"),
            "vehiculeType": obj.get("vehiculeType"),
            "medicalTransport": obj.get("medicalTransport"),
            "orientationType": obj.get("orientationType")
        })
        return _obj


