# coding: utf-8

"""
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from hubsanteModel.health.models.contact import Contact
from hubsanteModel.health.models.detailed_name import DetailedName
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Caller(BaseModel):
    """
    Caller
    """ # noqa: E501
    caller_contact: Contact = Field(alias="callerContact")
    callback_contact: Optional[Contact] = Field(default=None, alias="callbackContact")
    language: Optional[StrictStr] = Field(default=None, description="A valoriser avec la langue parlée par le requérant.  cf.nomenclature associée.")
    type: Optional[StrictStr] = Field(default=None, description="A valoriser avec la relation du requérant avec l'incident / le patient / la victime. cf. nomenclature associée.")
    communication: Optional[StrictStr] = Field(default=None, description="A valoriser avec la nature des éventuelles difficultés de communication rencontrées par le requérant.  cf.nomenclature associée.")
    freetext: Optional[StrictStr] = Field(default=None, description="Champ libre qui permet de compléter les informations spécifiquement liées au requérant.")
    detailed_name: Optional[DetailedName] = Field(default=None, alias="detailedName")
    __properties: ClassVar[List[str]] = ["callerContact", "callbackContact", "language", "type", "communication", "freetext", "detailedName"]

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in
            raise ValueError("must be one of enum values
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUJET', 'FAMILLE', 'TIERS', 'POMPIER', 'AMBULANC', 'SECOUR', 'MED', 'MEDSOS', 'MRL', 'EFFML', 'SANTE', 'INF', 'AIDESOIN', 'SF', 'AIDEDOM', 'FDO-MILI', 'ADM-TUTL', 'VIP', 'OBJCONNC', 'AUTRE', 'INCONNU'):
            raise ValueError("must be one of enum values ('SUJET', 'FAMILLE', 'TIERS', 'POMPIER', 'AMBULANC', 'SECOUR', 'MED', 'MEDSOS', 'MRL', 'EFFML', 'SANTE', 'INF', 'AIDESOIN', 'SF', 'AIDEDOM', 'FDO-MILI', 'ADM-TUTL', 'VIP', 'OBJCONNC', 'AUTRE', 'INCONNU')")
        return value

    @field_validator('communication')
    def communication_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AUCUNE', 'MUET', 'VISION', 'LANGUE', 'PANIQUE', 'HOSTILE', 'AGITE', 'AUTRE', 'IMPOSS'):
            raise ValueError("must be one of enum values ('AUCUNE', 'MUET', 'VISION', 'LANGUE', 'PANIQUE', 'HOSTILE', 'AGITE', 'AUTRE', 'IMPOSS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Caller from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller_contact
        if self.caller_contact:
            _dict['callerContact'] = self.caller_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of callback_contact
        if self.callback_contact:
            _dict['callbackContact'] = self.callback_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detailed_name
        if self.detailed_name:
            _dict['detailedName'] = self.detailed_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Caller from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callerContact": Contact.from_dict(obj.get("callerContact")) if obj.get("callerContact") is not None else None,
            "callbackContact": Contact.from_dict(obj.get("callbackContact")) if obj.get("callbackContact") is not None else None,
            "language": obj.get("language"),
            "type": obj.get("type"),
            "communication": obj.get("communication"),
            "freetext": obj.get("freetext"),
            "detailedName": DetailedName.from_dict(obj.get("detailedName")) if obj.get("detailedName") is not None else None
        })
        return _obj


