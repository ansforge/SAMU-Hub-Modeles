name: generate-model

on:
  pull_request:
    branches:
      - '**'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name for manual dispatch'
        required: true

jobs:
  generate:
    runs-on: ubuntu-latest

    env:
      JAVA_POST_PROCESS_FILE: "/usr/bin/clang-format -i"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set RELEASE_VERSION based on the trigger type
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            RELEASE_VERSION="${{ github.ref_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_VERSION="${{ github.event.inputs.release_name }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Include first chars of commit SHA and run attempt number to avoid collisions
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            SHORT_COMMIT_SHA=${COMMIT_SHA::7}
            RELEASE_VERSION="0.0.0.${{ github.head_ref }}.$SHORT_COMMIT_SHA.${{ github.run_attempt }}"
          fi
  
          # Make the RELEASE_VERSION semver compatible (replacing non letter/digit/. chars with .)
          RELEASE_VERSION=$(echo "$RELEASE_VERSION" | sed 's/[^a-zA-Z0-9\.]/./g')

          # Display the RELEASE_VERSION for verification
          echo "The RELEASE_VERSION is: $RELEASE_VERSION"

          # Check if RELEASE_VERSION matches the semver allowed pattern
          if [[ ! $RELEASE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9].* ]]; then
            echo "RELEASE_VERSION is NOT semver compatible (1.1.1.xxx)"
            exit 1
          fi

          # Export the RELEASE_VERSION environment variable for future steps (in env.RELEASE_VERSION)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Check for changes requiring running the parser
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            parsing_required:
              - '**/csv_parser.py'
              - '**/uml_generator.py'
              - '**/workflow.py'
              - '**/model.xlsx'
              - '**/nomenclature_parser/**'
              - '**/json_schema2xsd/**'
            test_case_parsing_required:
              - '**/test_case_generator.py'
              - '**/workflow.py'
              - '**/test-cases-15-15.xlsx'

      - name: Install Graphviz
        if: steps.filter.outputs.parsing_required == 'true'
        uses: ts-graphviz/setup-graphviz@v1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install python requirements
        working-directory: ./csv_parser
        if: steps.filter.outputs.parsing_required == 'true' || steps.filter.outputs.test_case_parsing_required == 'true'
        run: pip install -r ./requirements.txt

      - name: Clean up old generated schemas
        working-directory: ./src/main/resources
        run: find ./json-schema -type f -name '*.json' ! -name 'customContent.schema.json' ! -name 'EDXL-DE-*.schema.json' -exec rm {} +
        
      - name: Clean up old generated java classes
        working-directory: ./src/main/java/com/hubsante/model
        # We specifically only remove FOLDERS with the exception of a couple manually created ones
        run: find . -mindepth 1 -maxdepth 1 -type d ! -name 'builders' ! -name 'config' ! -name 'custom' ! -name 'edxl' ! -name 'exception' ! -name 'report' -exec rm -r {} +
      
      - name: Run csv_parser and collect OpenAPI & JSON Schemas
        working-directory: ./csv_parser
        if: steps.filter.outputs.parsing_required == 'true'
        run: python workflow.py --stage parser_and_mv

      - name: Run test_case_generator
        working-directory: ./csv_parser
        if: steps.filter.outputs.test_case_parsing_required == 'true'
        run: |
          rm -r ./out/test-cases || true
          python workflow.py --stage test_case_parser

      - name: Run csv_parser to generate schemas.yaml
        working-directory: ./csv_parser
        if: steps.filter.outputs.parsing_required == 'true'
        run: python workflow.py --stage output_schemas_yaml

      - name: Collect schemas.yaml and copy it to json_schema2xsd
        working-directory: ./csv_parser
        if: steps.filter.outputs.parsing_required == 'true'
        run: |
          cp ./out/schemas.yaml ./json_schema2xsd/src/main/resources/schemas.yaml
          
      - name: Setup gomplate
        if: steps.filter.outputs.parsing_required == 'true'
        uses: jason-dour/action-setup-gomplate@v1.1.0
        with:
          gomplate-version: v4.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run automatic-schema-generator and move generated files to corresponding locations
        if: steps.filter.outputs.parsing_required == 'true'
        working-directory: ./automatic-schema-generator
        run: |
          rm -r output || true
          chmod +x ./automatic-generator.sh
          ./automatic-generator.sh
          rm -r ../generator/config/generated || true
          rsync -a --remove-source-files output/generator ..
          rm -r ../generator_ruby/config/generated || true
          rsync -a --remove-source-files output/generator_ruby ..
          rsync -a --remove-source-files output/edxl ../src/main/java/com/hubsante/model
          rsync -a --remove-source-files output/json-schema ../src/main/resources
          rsync -a --remove-source-files output/xsd ../src/main/resources

      - name: Install JDK 11
        uses: actions/setup-java@v4
        if: steps.filter.outputs.parsing_required == 'true'
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Generate XSDs
        working-directory: ./csv_parser/json_schema2xsd
        if: steps.filter.outputs.parsing_required == 'true'
        run: gradle run

      - name: Move XSDs to src
        working-directory: ./csv_parser/json_schema2xsd
        if: steps.filter.outputs.parsing_required == 'true'
        run: |
          # Clean XSD repo but keep manual XSDs
          find ../../src/main/resources/xsd -type f -name '*.xsd' ! -name 'EDXL-DE-*.xsd' ! -name 'customContent.xsd' ! -name 'RC-DE.xsd' ! -name 'RC-XML-ContentType.xsd' ! -name 'RS-ERROR.xsd' ! -path '**/other-supporting-schema/*' -exec rm {} +
          mv out/*.xsd ../../src/main/resources/xsd/

      - name: Remove input JSON Schemas
        working-directory: ./csv_parser/json_schema2xsd
        if: steps.filter.outputs.parsing_required == 'true'
        run: |
          rm src/main/resources/*.json

      - name: Install node env 🏗
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install openapi-generator-cli
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Install linter
        run: sudo apt install -y clang-format

      - name: Generate Java classes
        working-directory: ./generator
        run: |
          # Iterate over each file in the ./config directory, including the entire subfolder structure
          # and then run @openapitools/openapi-generator-cli generate for each file found
          # Important notice:          
          # Results of the find command are sorted in an alphabetic order before being passed to xargs
          # This means that since the order of class generation is important, it's necessary to maintain an adequately 
          # named file structure in the ./config/** directories
          # generator-config.json (if exists) -> usecase.generator-config.json -> wrapper.generator-config.json
          find ./config/ -type f | sort -n | xargs -i npx @openapitools/openapi-generator-cli generate -c {} --skip-validate-spec
          
      - name: Replace src/ with generated classes
        run: |
          rm -r ./src/main/java/com/hubsante/model/rcde || true
          rm -r ./src/main/java/com/hubsante/model/cisu || true
          rm -r ./src/main/java/com/hubsante/model/health || true
          rm -r ./src/main/java/com/hubsante/model/emsi || true
          rm -r ./src/main/java/com/hubsante/model/geolocation || true
          rm -r ./src/main/java/com/hubsante/model/resources || true
          rm -r ./src/main/java/com/hubsante/model/rpis || true
          rm -r ./src/main/java/com/hubsante/model/technical || true
          rm -r ./generator/classes/src/main/java/com/hubsante/model/report/ErrorCode.java || true
          cp -r ./generator/classes/src/main/java/com/hubsante/model/* ./src/main/java/com/hubsante/model/

      - name: Generate Ruby classes
        working-directory: ./generator_ruby
        run: |
          # Remove old generated gem
          rm -r ./gem/ || true
          
          # Iterate over each file in the ./config directory, including the entire subfolder structure
          # and then run @openapitools/openapi-generator-cli generate for each file found
          # Important notice:          
          # Results of the find command are sorted in an alphabetic order before being passed to xargs
          # This means that since the order of class generation is important, it's necessary to maintain an adequately 
          # named file structure in the ./config/** directories
          # generator-config.json (if exists) -> usecase.generator-config.json -> wrapper.generator-config.json
          find ./config/ -type f | sort -n | xargs -i npx @openapitools/openapi-generator-cli generate -c {} --skip-validate-spec
          
          # Move generated classes to the correct location
          for dir in gem/*/; do
            package=$(basename "$dir")
            mkdir -p "gem/lib/hubsanteModel/models/$package/"
            mv "$dir"/lib/hubsanteModel/models/* "gem/lib/hubsanteModel/models/$package/"
            rmdir "$dir/lib/hubsanteModel/models" && rmdir "$dir/lib/hubsanteModel" && rmdir "$dir/lib" && rmdir "$dir"
          done;

          # Add key gem files
          cp hubsante_model.rb gem/lib/hubsanteModel/
          cp hubsante_model.gemspec gem/

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Apply license
        run: ./gradlew licenseFormat

      - name: Delete old xml files
        run: |
          find ./src/main/resources/sample/examples -name "*.xml" -type f -delete

      - name: Generate XML files
        run: |
          ./gradlew generateXml
        continue-on-error: true

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ⚙️ Auto-génération des classes et des specs

      - name: Build and run TECHNICAL tests
        run: ./gradlew test --info -Ptechnical=true

      - name: Build and run REAL MESSAGES tests
        run: ./gradlew test --info

      # Ref.: https://github.com/gradle/gradle-build-action/issues/619#issuecomment-1453244157
      - name: Upload test report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/**

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60

      - name: Setup .NET Core # Required to execute ReportGenerator
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x
          dotnet-quality: 'ga'

      - name: Run ReportGenerator for test coverage
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.23
        with:
          reports: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          targetdir: coveragereport

      - name: Ruby - Set up
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Ruby - Build Gem
        working-directory: ./generator_ruby/gem/
        run: gem build hubsante_model.gemspec
        env:
          GEM_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Ruby - Upload Gem as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ruby-gem-artifact
          path: ./generator_ruby/gem/hubsante_model-*.gem

      - name: Ruby - Push Gem to GitHub Packages
        working-directory: ./generator_ruby/gem/
        run: gem push --key github --host https://rubygems.pkg.github.com/ansforge ./hubsante_model-*.gem
        env:
          GEM_HOST_API_KEY: ${{ secrets.GITHUB_TOKEN }}  # GitHub token used to authenticate
