/**
 * Copyright Â© 2023-2024 Agence du Numerique en Sante (ANS)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hubsante.model.edxl;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

{{ range (datasource "config").schemas }}import com.hubsante.model.{{ .package }}.{{ .rootElement | title }};
import com.hubsante.model.{{ .package }}.{{ .rootElement | title }}Wrapper;
{{ end }}
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)
@JsonSubTypes({{ range $i, $e := (datasource "config").schemas }}
        @JsonSubTypes.Type({{ .rootElement | title }}Wrapper.class){{if ne $i (sub (len (datasource "config").schemas) 1)}},{{end}}{{end}}
})
public class ContentMessage {

    /** This equals override is used to avoid breaking the equals override in the messages without RC-DE headers
     * (in particular ErrorWrapper), as without the override the equality check would only pass when comparing
     * an object to itself, and we care about the actual values.
     **/
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        return o != null && getClass() == o.getClass();
    }

    // As this class has no fields, the hashcode is always 0
    @Override
    public int hashCode() {
        return 0;
    }

    public static class UseCaseHelper {
        public static final Map<String,String> useCases = Stream.of(new String[][] {
                  {"reference", Reference.class.getCanonicalName()},{{ range $i, $e := (datasource "config").schemas }}{{if .automaticGeneration}}
                  {"{{ .rootElement }}", {{ .rootElement | title }}.class.getCanonicalName()}{{if ne (add $i 1) (len (datasource "config").schemas)}},{{end}}{{end}}{{end}}
        }).collect(Collectors.toMap(useCaseData -> useCaseData[0], useCaseData -> useCaseData[1]));
    }
}
