/**************************************************************************
 * This file has been generated by the automatic schema generator script.
 **************************************************************************/
 
package com.hubsante.model.edxl;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

{{ range (datasource "config").schemas }}
{{- if eq .automaticGeneration "Y" -}}
import com.hubsante.model.{{ .package }}.{{ .rootElement | title }};
import com.hubsante.model.{{ .package }}.{{ .rootElement | title }}Wrapper;
{{ end }}{{ end -}}
import com.hubsante.model.report.ErrorWrapper;
import com.hubsante.model.custom.CustomMessage;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)
@JsonSubTypes({ {{ range $i, $e := (datasource "config").schemas }}{{if eq .automaticGeneration "Y"}}
        @JsonSubTypes.Type({{ .rootElement | title }}Wrapper.class),{{end}}{{end}}
        @JsonSubTypes.Type(ErrorWrapper.class),
        @JsonSubTypes.Type(CustomMessage.class)
})
public class ContentMessage {

    /** This equals override is used to avoid breaking the equals override in the messages without RC-DE headers
     * (in particular ErrorWrapper), as without the override the equality check would only pass when comparing
     * an object to itself, and we care about the actual values.
     **/
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        return o != null && getClass() == o.getClass();
    }

    // As this class has no fields, the hashcode is always 0
    @Override
    public int hashCode() {
        return 0;
    }

    public static class UseCaseHelper {
        public static final Map<String,String> useCases = Stream.of(new String[][] {
                  {{ range $i, $e := (datasource "config").schemas }}{{if eq .automaticGeneration "Y"}}
                  {"{{ .rootElement }}", {{ .rootElement | title }}.class.getCanonicalName()},{{end}}{{end}}
                  {"error", ErrorWrapper.class.getCanonicalName()},
                  {"customContent", CustomMessage.class.getCanonicalName()}
        }).collect(Collectors.toMap(useCaseData -> useCaseData[0], useCaseData -> useCaseData[1]));
    }
}
