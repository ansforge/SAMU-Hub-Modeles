/**
 * Copyright Â© 2023-2024 Agence du Numerique en Sante (ANS)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hubsante.model;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.hubsante.model.edxl.ContentMessage;
import com.hubsante.model.edxl.Descriptor;
import com.hubsante.model.edxl.EdxlMessage;
import com.hubsante.model.edxl.Keyword;
{{ range (datasource "config").schemas }}{{if eq .automaticGeneration "Y"}}import com.hubsante.model.{{ .package }}.{{ .rootElement | title }}Wrapper;
{{ end }}{{ end }}import com.hubsante.model.report.ErrorWrapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ContentMessageDeserializer extends JsonDeserializer<ContentMessage> {

    private static final Map<String, Class> useCases = new HashMap<String, Class>() { {
        {{ range (datasource "config").schemas }}{{if eq .automaticGeneration "Y"}}put("{{ .rootElement }}", {{ .rootElement | title }}Wrapper.class);
        {{ end }}{{ end }}put("error", ErrorWrapper.class);
    } };

    @Override
    public ContentMessage deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
        ObjectCodec codec = jp.getCodec();
        JsonNode node = codec.readTree(jp);
        String model = null;
        try {
            model = ((EdxlMessage) jp.getParsingContext().getParent().getParent().getParent().getParent().getCurrentValue()).getDescriptor().getKeyword().stream().filter(keyword -> keyword.getValueListURI().equals("urn:hubsante:model")).findFirst().get().getValue();
        } catch (NullPointerException e) {
            throw new JsonParseException(jp, "Model name not found in $.descriptor.keyword[0].value");
        }
        // Find model in useCases map, throw JsonParseException if not found
        Class clazz = useCases.get(model);
        if (clazz == null) {
            throw new JsonParseException(jp, "Unknown model: " + model);
        }

        return (ContentMessage) codec.treeToValue(node, clazz);
    }
}
