/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Geolocation.Client.OpenAPIDateConverter;

namespace HubsanteModel/Geolocation.Model
{
    /// <summary>
    /// Resource
    /// </summary>
    [DataContract(Name = "resource")]
    public partial class Resource : IValidatableObject
    {
        /// <summary>
        /// Catégorie de la ressource (SMUR, SDIS, TSU, SNP, MSPE, navire)
        /// </summary>
        /// <value>Catégorie de la ressource (SMUR, SDIS, TSU, SNP, MSPE, navire)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum SMUR for value: SMUR
            /// </summary>
            [EnumMember(Value = "SMUR")]
            SMUR = 1,

            /// <summary>
            /// Enum SDIS for value: SDIS
            /// </summary>
            [EnumMember(Value = "SDIS")]
            SDIS = 2,

            /// <summary>
            /// Enum TSU for value: TSU
            /// </summary>
            [EnumMember(Value = "TSU")]
            TSU = 3,

            /// <summary>
            /// Enum SNP for value: SNP
            /// </summary>
            [EnumMember(Value = "SNP")]
            SNP = 4,

            /// <summary>
            /// Enum MSPE for value: MSPE
            /// </summary>
            [EnumMember(Value = "MSPE")]
            MSPE = 5,

            /// <summary>
            /// Enum SHIP for value: SHIP
            /// </summary>
            [EnumMember(Value = "SHIP")]
            SHIP = 6
        }


        /// <summary>
        /// Catégorie de la ressource (SMUR, SDIS, TSU, SNP, MSPE, navire)
        /// </summary>
        /// <value>Catégorie de la ressource (SMUR, SDIS, TSU, SNP, MSPE, navire)</value>
        /*
        <example>example.json#/resource/0/resourceType</example>
        */
        [DataMember(Name = "resourceType", IsRequired = true, EmitDefaultValue = true)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// Nature de la ressource (effecteur, base)
        /// </summary>
        /// <value>Nature de la ressource (effecteur, base)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NatureEnum
        {
            /// <summary>
            /// Enum EFFECTEUR for value: EFFECTEUR
            /// </summary>
            [EnumMember(Value = "EFFECTEUR")]
            EFFECTEUR = 1,

            /// <summary>
            /// Enum BASE for value: BASE
            /// </summary>
            [EnumMember(Value = "BASE")]
            BASE = 2
        }


        /// <summary>
        /// Nature de la ressource (effecteur, base)
        /// </summary>
        /// <value>Nature de la ressource (effecteur, base)</value>
        /*
        <example>example.json#/resource/0/nature</example>
        */
        [DataMember(Name = "nature", EmitDefaultValue = false)]
        public NatureEnum? Nature { get; set; }
        /// <summary>
        /// Mobilité de la ressource (fixe, vehicule, heliporté, navire)
        /// </summary>
        /// <value>Mobilité de la ressource (fixe, vehicule, heliporté, navire)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MobilityEnum
        {
            /// <summary>
            /// Enum FIXE for value: FIXE
            /// </summary>
            [EnumMember(Value = "FIXE")]
            FIXE = 1,

            /// <summary>
            /// Enum VEHICULE for value: VEHICULE
            /// </summary>
            [EnumMember(Value = "VEHICULE")]
            VEHICULE = 2,

            /// <summary>
            /// Enum HELICOPTERE for value: HELICOPTERE
            /// </summary>
            [EnumMember(Value = "HELICOPTERE")]
            HELICOPTERE = 3,

            /// <summary>
            /// Enum SHIP for value: SHIP
            /// </summary>
            [EnumMember(Value = "SHIP")]
            SHIP = 4
        }


        /// <summary>
        /// Mobilité de la ressource (fixe, vehicule, heliporté, navire)
        /// </summary>
        /// <value>Mobilité de la ressource (fixe, vehicule, heliporté, navire)</value>
        /*
        <example>example.json#/resource/0/mobility</example>
        */
        [DataMember(Name = "mobility", EmitDefaultValue = false)]
        public MobilityEnum? Mobility { get; set; }
        /// <summary>
        /// Capacité de transport d&#39;un patient
        /// </summary>
        /// <value>Capacité de transport d&#39;un patient</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CapacityEnum
        {
            /// <summary>
            /// Enum URGENCE for value: URGENCE
            /// </summary>
            [EnumMember(Value = "URGENCE")]
            URGENCE = 1,

            /// <summary>
            /// Enum MEDICALE for value: MEDICALE
            /// </summary>
            [EnumMember(Value = "MEDICALE")]
            MEDICALE = 2,

            /// <summary>
            /// Enum PARAMEDICALE for value: PARAMEDICALE
            /// </summary>
            [EnumMember(Value = "PARAMEDICALE")]
            PARAMEDICALE = 3,

            /// <summary>
            /// Enum INCONNUE for value: INCONNUE
            /// </summary>
            [EnumMember(Value = "INCONNUE")]
            INCONNUE = 4
        }


        /// <summary>
        /// Capacité de transport d&#39;un patient
        /// </summary>
        /// <value>Capacité de transport d&#39;un patient</value>
        /*
        <example>example.json#/resource/0/capacity</example>
        */
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public CapacityEnum? Capacity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Resource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        /// <param name="resourceId">A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource} (required).</param>
        /// <param name="orgId">Identifiant unique de l&#39;organisme :  {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}* *données facultatives (required).</param>
        /// <param name="name">Nom donné à la ressource par l&#39;organisme propriétaire.  L&#39;immatriculation peut être utilisée dans le nom courant des véhicules..</param>
        /// <param name="resourceType">Catégorie de la ressource (SMUR, SDIS, TSU, SNP, MSPE, navire) (required).</param>
        /// <param name="nature">Nature de la ressource (effecteur, base).</param>
        /// <param name="mobility">Mobilité de la ressource (fixe, vehicule, heliporté, navire).</param>
        /// <param name="capacity">Capacité de transport d&#39;un patient.</param>
        /// <param name="contacts">contacts.</param>
        public Resource(string resourceId = default(string), string orgId = default(string), string name = default(string), ResourceTypeEnum resourceType = default(ResourceTypeEnum), NatureEnum? nature = default(NatureEnum?), MobilityEnum? mobility = default(MobilityEnum?), CapacityEnum? capacity = default(CapacityEnum?), List<Contact> contacts = default(List<Contact>))
        {
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId is a required property for Resource and cannot be null");
            }
            this.ResourceId = resourceId;
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new ArgumentNullException("orgId is a required property for Resource and cannot be null");
            }
            this.OrgId = orgId;
            this.ResourceType = resourceType;
            this.Name = name;
            this.Nature = nature;
            this.Mobility = mobility;
            this.Capacity = capacity;
            this.Contacts = contacts;
        }

        /// <summary>
        /// A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource}
        /// </summary>
        /// <value>A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource}</value>
        /*
        <example>example.json#/resource/0/resourceId</example>
        */
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Identifiant unique de l&#39;organisme :  {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}* *données facultatives
        /// </summary>
        /// <value>Identifiant unique de l&#39;organisme :  {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}* *données facultatives</value>
        /*
        <example>example.json#/resource/0/orgId</example>
        */
        [DataMember(Name = "orgId", IsRequired = true, EmitDefaultValue = true)]
        public string OrgId { get; set; }

        /// <summary>
        /// Nom donné à la ressource par l&#39;organisme propriétaire.  L&#39;immatriculation peut être utilisée dans le nom courant des véhicules.
        /// </summary>
        /// <value>Nom donné à la ressource par l&#39;organisme propriétaire.  L&#39;immatriculation peut être utilisée dans le nom courant des véhicules.</value>
        /*
        <example>example.json#/resource/0/name</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Resource {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Nature: ").Append(Nature).Append("\n");
            sb.Append("  Mobility: ").Append(Mobility).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ResourceId != null) {
                // ResourceId (string) pattern
                Regex regexResourceId = new Regex(@"^([\w-]+\.){3,8}resource(\.[\w-]+){1,2}$", RegexOptions.CultureInvariant);
                if (!regexResourceId.Match(this.ResourceId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResourceId, must match a pattern of " + regexResourceId, new [] { "ResourceId" });
                }
            }

            yield break;
        }
    }

}
