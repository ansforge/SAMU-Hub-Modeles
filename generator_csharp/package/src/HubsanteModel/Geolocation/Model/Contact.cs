/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Geolocation.Client.OpenAPIDateConverter;

namespace HubsanteModel/Geolocation.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract(Name = "contact")]
    public partial class Contact : IValidatableObject
    {
        /// <summary>
        /// Type de contact, voir énumération associée 1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie
        /// </summary>
        /// <value>Type de contact, voir énumération associée 1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PMRADD for value: PMRADD
            /// </summary>
            [EnumMember(Value = "PMRADD")]
            PMRADD = 1,

            /// <summary>
            /// Enum PHNADD for value: PHNADD
            /// </summary>
            [EnumMember(Value = "PHNADD")]
            PHNADD = 2
        }


        /// <summary>
        /// Type de contact, voir énumération associée 1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie
        /// </summary>
        /// <value>Type de contact, voir énumération associée 1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie</value>
        /*
        <example>example.json#/resource/0/contacts/0/type</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="type">Type de contact, voir énumération associée 1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie.</param>
        /// <param name="details">1. RFGI (si RFGI disponible) 2. Numéro de téléphone.</param>
        public Contact(TypeEnum? type = default(TypeEnum?), string details = default(string))
        {
            this.Type = type;
            this.Details = details;
        }

        /// <summary>
        /// 1. RFGI (si RFGI disponible) 2. Numéro de téléphone
        /// </summary>
        /// <value>1. RFGI (si RFGI disponible) 2. Numéro de téléphone</value>
        /*
        <example>example.json#/resource/0/contacts/0/details</example>
        */
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
