/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Geolocation.Client.OpenAPIDateConverter;

namespace HubsanteModel/Geolocation.Model
{
    /// <summary>
    /// Position
    /// </summary>
    [DataContract(Name = "position")]
    public partial class Position : IValidatableObject
    {
        /// <summary>
        /// Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE)
        /// </summary>
        /// <value>Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MoveEnum
        {
            /// <summary>
            /// Enum MOBILE for value: MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILE = 1,

            /// <summary>
            /// Enum STATIQUE for value: STATIQUE
            /// </summary>
            [EnumMember(Value = "STATIQUE")]
            STATIQUE = 2
        }


        /// <summary>
        /// Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE)
        /// </summary>
        /// <value>Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE)</value>
        /*
        <example>example.json#/position/0/move</example>
        */
        [DataMember(Name = "move", EmitDefaultValue = false)]
        public MoveEnum? Move { get; set; }
        /// <summary>
        /// Définit le statut de disponibilité d&#39;une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n&#39;est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu
        /// </summary>
        /// <value>Définit le statut de disponibilité d&#39;une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n&#39;est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DISPONIBLE for value: DISPONIBLE
            /// </summary>
            [EnumMember(Value = "DISPONIBLE")]
            DISPONIBLE = 1,

            /// <summary>
            /// Enum INDISPONIBLE for value: INDISPONIBLE
            /// </summary>
            [EnumMember(Value = "INDISPONIBLE")]
            INDISPONIBLE = 2,

            /// <summary>
            /// Enum INCONNU for value: INCONNU
            /// </summary>
            [EnumMember(Value = "INCONNU")]
            INCONNU = 3
        }


        /// <summary>
        /// Définit le statut de disponibilité d&#39;une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n&#39;est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu
        /// </summary>
        /// <value>Définit le statut de disponibilité d&#39;une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n&#39;est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu</value>
        /*
        <example>example.json#/position/0/status</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Précise le statut d&#39;une ressource qui est engagée sur une mission
        /// </summary>
        /// <value>Précise le statut d&#39;une ressource qui est engagée sur une mission</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EngagedStatusEnum
        {
            /// <summary>
            /// Enum ALERTEE for value: ALERTEE
            /// </summary>
            [EnumMember(Value = "ALERTEE")]
            ALERTEE = 1,

            /// <summary>
            /// Enum PARTIE for value: PARTIE
            /// </summary>
            [EnumMember(Value = "PARTIE")]
            PARTIE = 2,

            /// <summary>
            /// Enum ARRIVEELIEU for value: ARRIVEE_LIEU
            /// </summary>
            [EnumMember(Value = "ARRIVEE_LIEU")]
            ARRIVEELIEU = 3,

            /// <summary>
            /// Enum TRANSPORTDESTINATION for value: TRANSPORT_DESTINATION
            /// </summary>
            [EnumMember(Value = "TRANSPORT_DESTINATION")]
            TRANSPORTDESTINATION = 4,

            /// <summary>
            /// Enum ARRIVEEDESTINATION for value: ARRIVEE_DESTINATION
            /// </summary>
            [EnumMember(Value = "ARRIVEE_DESTINATION")]
            ARRIVEEDESTINATION = 5,

            /// <summary>
            /// Enum FINMED for value: FIN_MED
            /// </summary>
            [EnumMember(Value = "FIN_MED")]
            FINMED = 6,

            /// <summary>
            /// Enum QUITTEDESTINATION for value: QUITTE_DESTINATION
            /// </summary>
            [EnumMember(Value = "QUITTE_DESTINATION")]
            QUITTEDESTINATION = 7,

            /// <summary>
            /// Enum RETOURDISPONIBLE for value: RETOUR_DISPONIBLE
            /// </summary>
            [EnumMember(Value = "RETOUR_DISPONIBLE")]
            RETOURDISPONIBLE = 8,

            /// <summary>
            /// Enum RETOURINDISPONIBLE for value: RETOUR_INDISPONIBLE
            /// </summary>
            [EnumMember(Value = "RETOUR_INDISPONIBLE")]
            RETOURINDISPONIBLE = 9,

            /// <summary>
            /// Enum ARRIVEECENTRE for value: ARRIVEE_CENTRE
            /// </summary>
            [EnumMember(Value = "ARRIVEE_CENTRE")]
            ARRIVEECENTRE = 10
        }


        /// <summary>
        /// Précise le statut d&#39;une ressource qui est engagée sur une mission
        /// </summary>
        /// <value>Précise le statut d&#39;une ressource qui est engagée sur une mission</value>
        /*
        <example>example.json#/position/0/engagedStatus</example>
        */
        [DataMember(Name = "engagedStatus", EmitDefaultValue = false)]
        public EngagedStatusEnum? EngagedStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Position() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="resourceId">A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource} (required).</param>
        /// <param name="datetime">Date et heure de réception des coordonnées transmises (required).</param>
        /// <param name="coord">coord (required).</param>
        /// <param name="speed">Vitesse de la ressource enregistrée, exprimée en km/h.</param>
        /// <param name="cap">Direction de la ressource, exprimé en degrés.</param>
        /// <param name="move">Indique si la ressource est en mouvement (MOBILE) ou non (STATIQUE).</param>
        /// <param name="engineOn">Indique si le moteur de la ressource est éteint (FAUX) ou allumé/en marche (VRAI).</param>
        /// <param name="groundStatus">Indique si l&#39;hélicoptère est au sol (VRAI) ou en l&#39;air (FAUX).</param>
        /// <param name="status">Définit le statut de disponibilité d&#39;une ressource. - DISPONIBLE : Lorsque la ressource est disponible - INDISPONIBLE : Lorsque la ressource n&#39;est pas disponible, celle-ci peut être engagée ou en maintenance - INCONNU : Lorsque le status est inconnu.</param>
        /// <param name="engagedStatus">Précise le statut d&#39;une ressource qui est engagée sur une mission.</param>
        public Position(string resourceId = default(string), DateTime datetime = default(DateTime), Coord coord = default(Coord), decimal speed = default(decimal), string cap = default(string), MoveEnum? move = default(MoveEnum?), bool engineOn = default(bool), bool groundStatus = default(bool), StatusEnum? status = default(StatusEnum?), EngagedStatusEnum? engagedStatus = default(EngagedStatusEnum?))
        {
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId is a required property for Position and cannot be null");
            }
            this.ResourceId = resourceId;
            this.Datetime = datetime;
            // to ensure "coord" is required (not null)
            if (coord == null)
            {
                throw new ArgumentNullException("coord is a required property for Position and cannot be null");
            }
            this.Coord = coord;
            this.Speed = speed;
            this.Cap = cap;
            this.Move = move;
            this.EngineOn = engineOn;
            this.GroundStatus = groundStatus;
            this.Status = status;
            this.EngagedStatus = engagedStatus;
        }

        /// <summary>
        /// A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource}
        /// </summary>
        /// <value>A valoriser avec l&#39;identifiant partagé unique de la ressource engagée, normé comme suit : {orgID}.resource.{ID unique de la ressource partagée} OU - uniquement dans le cas où un ID unique de ressource ne peut pas être garanti par l&#39;organisation propriétaire : {orgID}.resource.{sendercaseId}.{n° d’ordre chronologique de la ressource}</value>
        /*
        <example>example.json#/position/0/resourceId</example>
        */
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Date et heure de réception des coordonnées transmises
        /// </summary>
        /// <value>Date et heure de réception des coordonnées transmises</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// Gets or Sets Coord
        /// </summary>
        [DataMember(Name = "coord", IsRequired = true, EmitDefaultValue = true)]
        public Coord Coord { get; set; }

        /// <summary>
        /// Vitesse de la ressource enregistrée, exprimée en km/h
        /// </summary>
        /// <value>Vitesse de la ressource enregistrée, exprimée en km/h</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Direction de la ressource, exprimé en degrés
        /// </summary>
        /// <value>Direction de la ressource, exprimé en degrés</value>
        /*
        <example>example.json#/position/0/cap</example>
        */
        [DataMember(Name = "cap", EmitDefaultValue = false)]
        public string Cap { get; set; }

        /// <summary>
        /// Indique si le moteur de la ressource est éteint (FAUX) ou allumé/en marche (VRAI)
        /// </summary>
        /// <value>Indique si le moteur de la ressource est éteint (FAUX) ou allumé/en marche (VRAI)</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "engineOn", EmitDefaultValue = true)]
        public bool EngineOn { get; set; }

        /// <summary>
        /// Indique si l&#39;hélicoptère est au sol (VRAI) ou en l&#39;air (FAUX)
        /// </summary>
        /// <value>Indique si l&#39;hélicoptère est au sol (VRAI) ou en l&#39;air (FAUX)</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "groundStatus", EmitDefaultValue = true)]
        public bool GroundStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Coord: ").Append(Coord).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  Move: ").Append(Move).Append("\n");
            sb.Append("  EngineOn: ").Append(EngineOn).Append("\n");
            sb.Append("  GroundStatus: ").Append(GroundStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EngagedStatus: ").Append(EngagedStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.ResourceId != null) {
                // ResourceId (string) pattern
                Regex regexResourceId = new Regex(@"^([\w-]+\.){3,8}resource(\.[\w-]+){1,2}$", RegexOptions.CultureInvariant);
                if (!regexResourceId.Match(this.ResourceId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResourceId, must match a pattern of " + regexResourceId, new [] { "ResourceId" });
                }
            }

            if (this.Datetime != null) {
                // Datetime (DateTime) pattern
                Regex regexDatetime = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDatetime.Match(this.Datetime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Datetime, must match a pattern of " + regexDatetime, new [] { "Datetime" });
                }
            }

            yield break;
        }
    }

}
