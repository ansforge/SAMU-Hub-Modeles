/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Context
    /// </summary>
    [DataContract(Name = "context")]
    public partial class Context : IValidatableObject
    {
        /// <summary>
        /// Valeur constante dans le cadre des échanges LRM-NexSIS : ACTUAL
        /// </summary>
        /// <value>Valeur constante dans le cadre des échanges LRM-NexSIS : ACTUAL</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MODEEnum
        {
            /// <summary>
            /// Enum ACTUAL for value: ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")]
            ACTUAL = 1,

            /// <summary>
            /// Enum EXERCS for value: EXERCS
            /// </summary>
            [EnumMember(Value = "EXERCS")]
            EXERCS = 2,

            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 3,

            /// <summary>
            /// Enum TEST for value: TEST
            /// </summary>
            [EnumMember(Value = "TEST")]
            TEST = 4
        }


        /// <summary>
        /// Valeur constante dans le cadre des échanges LRM-NexSIS : ACTUAL
        /// </summary>
        /// <value>Valeur constante dans le cadre des échanges LRM-NexSIS : ACTUAL</value>
        /*
        <example>example.json#/CONTEXT/MODE</example>
        */
        [DataMember(Name = "MODE", IsRequired = true, EmitDefaultValue = true)]
        public MODEEnum MODE { get; set; }
        /// <summary>
        /// - A valoriser avec la valeur \&quot;ALERT\&quot; lors du premier échange entre systèmes. - A valoriser avec la valeur constante \&quot;UPDATE\&quot; ensuite. Peut ne pas être interprété par les LRM.
        /// </summary>
        /// <value>- A valoriser avec la valeur \&quot;ALERT\&quot; lors du premier échange entre systèmes. - A valoriser avec la valeur constante \&quot;UPDATE\&quot; ensuite. Peut ne pas être interprété par les LRM.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MSGTYPEEnum
        {
            /// <summary>
            /// Enum ACK for value: ACK
            /// </summary>
            [EnumMember(Value = "ACK")]
            ACK = 1,

            /// <summary>
            /// Enum ALERT for value: ALERT
            /// </summary>
            [EnumMember(Value = "ALERT")]
            ALERT = 2,

            /// <summary>
            /// Enum CANCEL for value: CANCEL
            /// </summary>
            [EnumMember(Value = "CANCEL")]
            CANCEL = 3,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 4,

            /// <summary>
            /// Enum UPDATE for value: UPDATE
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE = 5
        }


        /// <summary>
        /// - A valoriser avec la valeur \&quot;ALERT\&quot; lors du premier échange entre systèmes. - A valoriser avec la valeur constante \&quot;UPDATE\&quot; ensuite. Peut ne pas être interprété par les LRM.
        /// </summary>
        /// <value>- A valoriser avec la valeur \&quot;ALERT\&quot; lors du premier échange entre systèmes. - A valoriser avec la valeur constante \&quot;UPDATE\&quot; ensuite. Peut ne pas être interprété par les LRM.</value>
        /*
        <example>example.json#/CONTEXT/MSGTYPE</example>
        */
        [DataMember(Name = "MSGTYPE", IsRequired = true, EmitDefaultValue = true)]
        public MSGTYPEEnum MSGTYPE { get; set; }
        /// <summary>
        /// A valoriser avec la valeur constante \&quot;OPR\&quot; dans le cadre d&#39;un message EMSI, incluant une mission OPG
        /// </summary>
        /// <value>A valoriser avec la valeur constante \&quot;OPR\&quot; dans le cadre d&#39;un message EMSI, incluant une mission OPG</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LEVELEnum
        {
            /// <summary>
            /// Enum STRTGC for value: STRTGC
            /// </summary>
            [EnumMember(Value = "STRTGC")]
            STRTGC = 1,

            /// <summary>
            /// Enum OPR for value: OPR
            /// </summary>
            [EnumMember(Value = "OPR")]
            OPR = 2,

            /// <summary>
            /// Enum TACTCL for value: TACTCL
            /// </summary>
            [EnumMember(Value = "TACTCL")]
            TACTCL = 3
        }


        /// <summary>
        /// A valoriser avec la valeur constante \&quot;OPR\&quot; dans le cadre d&#39;un message EMSI, incluant une mission OPG
        /// </summary>
        /// <value>A valoriser avec la valeur constante \&quot;OPR\&quot; dans le cadre d&#39;un message EMSI, incluant une mission OPG</value>
        /*
        <example>example.json#/CONTEXT/LEVEL</example>
        */
        [DataMember(Name = "LEVEL", EmitDefaultValue = false)]
        public LEVELEnum? LEVEL { get; set; }
        /// <summary>
        /// Optionnel  Dans NexSIS ;  Les messages transmis par NexSIS auront un champ valorisé avec systématiquement le même code: \&quot;RESTRC\&quot;&#x3D;restricted Les LRM doivent également renseigner la valeur \&quot;RESTRC\&quot;
        /// </summary>
        /// <value>Optionnel  Dans NexSIS ;  Les messages transmis par NexSIS auront un champ valorisé avec systématiquement le même code: \&quot;RESTRC\&quot;&#x3D;restricted Les LRM doivent également renseigner la valeur \&quot;RESTRC\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SECLASSEnum
        {
            /// <summary>
            /// Enum CONFID for value: CONFID
            /// </summary>
            [EnumMember(Value = "CONFID")]
            CONFID = 1,

            /// <summary>
            /// Enum RESTRC for value: RESTRC
            /// </summary>
            [EnumMember(Value = "RESTRC")]
            RESTRC = 2,

            /// <summary>
            /// Enum SECRET for value: SECRET
            /// </summary>
            [EnumMember(Value = "SECRET")]
            SECRET = 3,

            /// <summary>
            /// Enum TOPSRT for value: TOPSRT
            /// </summary>
            [EnumMember(Value = "TOPSRT")]
            TOPSRT = 4,

            /// <summary>
            /// Enum UNCLAS for value: UNCLAS
            /// </summary>
            [EnumMember(Value = "UNCLAS")]
            UNCLAS = 5,

            /// <summary>
            /// Enum UNMARK for value: UNMARK
            /// </summary>
            [EnumMember(Value = "UNMARK")]
            UNMARK = 6
        }


        /// <summary>
        /// Optionnel  Dans NexSIS ;  Les messages transmis par NexSIS auront un champ valorisé avec systématiquement le même code: \&quot;RESTRC\&quot;&#x3D;restricted Les LRM doivent également renseigner la valeur \&quot;RESTRC\&quot;
        /// </summary>
        /// <value>Optionnel  Dans NexSIS ;  Les messages transmis par NexSIS auront un champ valorisé avec systématiquement le même code: \&quot;RESTRC\&quot;&#x3D;restricted Les LRM doivent également renseigner la valeur \&quot;RESTRC\&quot;</value>
        /*
        <example>example.json#/CONTEXT/SECLASS</example>
        */
        [DataMember(Name = "SECLASS", EmitDefaultValue = false)]
        public SECLASSEnum? SECLASS { get; set; }
        /// <summary>
        /// Niveau d&#39;urgence pour l&#39;affaire en cours Dans le cadre des échanges LRM-NexSIS, optionnel
        /// </summary>
        /// <value>Niveau d&#39;urgence pour l&#39;affaire en cours Dans le cadre des échanges LRM-NexSIS, optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum URGENCYEnum
        {
            /// <summary>
            /// Enum URGENT for value: URGENT
            /// </summary>
            [EnumMember(Value = "URGENT")]
            URGENT = 1,

            /// <summary>
            /// Enum NOTURGENT for value: NOT_URGENT
            /// </summary>
            [EnumMember(Value = "NOT_URGENT")]
            NOTURGENT = 2
        }


        /// <summary>
        /// Niveau d&#39;urgence pour l&#39;affaire en cours Dans le cadre des échanges LRM-NexSIS, optionnel
        /// </summary>
        /// <value>Niveau d&#39;urgence pour l&#39;affaire en cours Dans le cadre des échanges LRM-NexSIS, optionnel</value>
        /*
        <example>example.json#/CONTEXT/URGENCY</example>
        */
        [DataMember(Name = "URGENCY", EmitDefaultValue = false)]
        public URGENCYEnum? URGENCY { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Context() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="iD">A constituer par le rédacteur du présent EMSI pour être unique, il est préconisé de reprendre la valeur du champ messageId de l&#39;entête RC-DE. (required).</param>
        /// <param name="mODE">Valeur constante dans le cadre des échanges LRM-NexSIS : ACTUAL (required).</param>
        /// <param name="mSGTYPE">- A valoriser avec la valeur \&quot;ALERT\&quot; lors du premier échange entre systèmes. - A valoriser avec la valeur constante \&quot;UPDATE\&quot; ensuite. Peut ne pas être interprété par les LRM. (required).</param>
        /// <param name="cREATION">Obligatoire dans le cadre d&#39;une demande de concours, contient la date de création de la demande de concours dans le système du partenaire requérant. A valoriser avec le même horaire que dateTimeSent dans le message RC-DE associé. Dans le cadre d&#39;une demande de concours, obligatoire. Ce champ est valorisée avec l&#39;heure de création de la demande de concours chez le partenaire emetteur. L&#39;heure d&#39;envoi du message peut être obtenue via l&#39;enveloppe EDXL-DE (se référer au DST).</param>
        /// <param name="lINK">lINK.</param>
        /// <param name="lEVEL">A valoriser avec la valeur constante \&quot;OPR\&quot; dans le cadre d&#39;un message EMSI, incluant une mission OPG.</param>
        /// <param name="sECLASS">Optionnel  Dans NexSIS ;  Les messages transmis par NexSIS auront un champ valorisé avec systématiquement le même code: \&quot;RESTRC\&quot;&#x3D;restricted Les LRM doivent également renseigner la valeur \&quot;RESTRC\&quot;.</param>
        /// <param name="fREETEXT">Texte libre, optionnel  Dans NexSIS; Fonction de l&#39;événement générateur RG 1 : la valeur de &lt;context&gt;&lt;freetext&gt; reste à  &#39;Création d&#39;un événement opérationnel EMSI&#39; &amp; version &amp; &#39;suite à réception d&#39;une affaire*&#39; dans le cadre de la création d&#39;une opération commune (conforme RG 2 de NEXSIS-6618) RG 3 : les événements générateurs sont ceux définis au sein de NEXSIS-6619 RG 1 de traçabilité  ( input &#x3D; &lt;Evenement à l&#39;origine&gt; &#x3D; CREATION_OPERATION / MAJ_MODIFICATION_ETAT_OPERATION / AJOUT_RESSOURCE / RETRAIT_RESSOURCE / MAJ_ETAT_SITUATION_RESSOURCE / MAJ_LOCALISATION_ADRESSE) auxquels seront ajoutés  les éventuels événements à venir..</param>
        /// <param name="oRIGIN">oRIGIN.</param>
        /// <param name="eXTERNALINFO">eXTERNALINFO.</param>
        /// <param name="uRGENCY">Niveau d&#39;urgence pour l&#39;affaire en cours Dans le cadre des échanges LRM-NexSIS, optionnel.</param>
        public Context(string iD = default(string), MODEEnum mODE = default(MODEEnum), MSGTYPEEnum mSGTYPE = default(MSGTYPEEnum), DateTime cREATION = default(DateTime), List<Link> lINK = default(List<Link>), LEVELEnum? lEVEL = default(LEVELEnum?), SECLASSEnum? sECLASS = default(SECLASSEnum?), string fREETEXT = default(string), Origin oRIGIN = default(Origin), List<ExternalInfo> eXTERNALINFO = default(List<ExternalInfo>), URGENCYEnum? uRGENCY = default(URGENCYEnum?))
        {
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new ArgumentNullException("iD is a required property for Context and cannot be null");
            }
            this.ID = iD;
            this.MODE = mODE;
            this.MSGTYPE = mSGTYPE;
            this.CREATION = cREATION;
            this.LINK = lINK;
            this.LEVEL = lEVEL;
            this.SECLASS = sECLASS;
            this.FREETEXT = fREETEXT;
            this.ORIGIN = oRIGIN;
            this.EXTERNAL_INFO = eXTERNALINFO;
            this.URGENCY = uRGENCY;
        }

        /// <summary>
        /// A constituer par le rédacteur du présent EMSI pour être unique, il est préconisé de reprendre la valeur du champ messageId de l&#39;entête RC-DE.
        /// </summary>
        /// <value>A constituer par le rédacteur du présent EMSI pour être unique, il est préconisé de reprendre la valeur du champ messageId de l&#39;entête RC-DE.</value>
        /*
        <example>example.json#/CONTEXT/ID</example>
        */
        [DataMember(Name = "ID", IsRequired = true, EmitDefaultValue = true)]
        public string ID { get; set; }

        /// <summary>
        /// Obligatoire dans le cadre d&#39;une demande de concours, contient la date de création de la demande de concours dans le système du partenaire requérant. A valoriser avec le même horaire que dateTimeSent dans le message RC-DE associé. Dans le cadre d&#39;une demande de concours, obligatoire. Ce champ est valorisée avec l&#39;heure de création de la demande de concours chez le partenaire emetteur. L&#39;heure d&#39;envoi du message peut être obtenue via l&#39;enveloppe EDXL-DE (se référer au DST)
        /// </summary>
        /// <value>Obligatoire dans le cadre d&#39;une demande de concours, contient la date de création de la demande de concours dans le système du partenaire requérant. A valoriser avec le même horaire que dateTimeSent dans le message RC-DE associé. Dans le cadre d&#39;une demande de concours, obligatoire. Ce champ est valorisée avec l&#39;heure de création de la demande de concours chez le partenaire emetteur. L&#39;heure d&#39;envoi du message peut être obtenue via l&#39;enveloppe EDXL-DE (se référer au DST)</value>
        [DataMember(Name = "CREATION", EmitDefaultValue = false)]
        public DateTime CREATION { get; set; }

        /// <summary>
        /// Gets or Sets LINK
        /// </summary>
        [DataMember(Name = "LINK", EmitDefaultValue = false)]
        public List<Link> LINK { get; set; }

        /// <summary>
        /// Texte libre, optionnel  Dans NexSIS; Fonction de l&#39;événement générateur RG 1 : la valeur de &lt;context&gt;&lt;freetext&gt; reste à  &#39;Création d&#39;un événement opérationnel EMSI&#39; &amp; version &amp; &#39;suite à réception d&#39;une affaire*&#39; dans le cadre de la création d&#39;une opération commune (conforme RG 2 de NEXSIS-6618) RG 3 : les événements générateurs sont ceux définis au sein de NEXSIS-6619 RG 1 de traçabilité  ( input &#x3D; &lt;Evenement à l&#39;origine&gt; &#x3D; CREATION_OPERATION / MAJ_MODIFICATION_ETAT_OPERATION / AJOUT_RESSOURCE / RETRAIT_RESSOURCE / MAJ_ETAT_SITUATION_RESSOURCE / MAJ_LOCALISATION_ADRESSE) auxquels seront ajoutés  les éventuels événements à venir.
        /// </summary>
        /// <value>Texte libre, optionnel  Dans NexSIS; Fonction de l&#39;événement générateur RG 1 : la valeur de &lt;context&gt;&lt;freetext&gt; reste à  &#39;Création d&#39;un événement opérationnel EMSI&#39; &amp; version &amp; &#39;suite à réception d&#39;une affaire*&#39; dans le cadre de la création d&#39;une opération commune (conforme RG 2 de NEXSIS-6618) RG 3 : les événements générateurs sont ceux définis au sein de NEXSIS-6619 RG 1 de traçabilité  ( input &#x3D; &lt;Evenement à l&#39;origine&gt; &#x3D; CREATION_OPERATION / MAJ_MODIFICATION_ETAT_OPERATION / AJOUT_RESSOURCE / RETRAIT_RESSOURCE / MAJ_ETAT_SITUATION_RESSOURCE / MAJ_LOCALISATION_ADRESSE) auxquels seront ajoutés  les éventuels événements à venir.</value>
        /*
        <example>example.json#/CONTEXT/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Gets or Sets ORIGIN
        /// </summary>
        [DataMember(Name = "ORIGIN", EmitDefaultValue = false)]
        public Origin ORIGIN { get; set; }

        /// <summary>
        /// Gets or Sets EXTERNAL_INFO
        /// </summary>
        [DataMember(Name = "EXTERNAL_INFO", EmitDefaultValue = false)]
        public List<ExternalInfo> EXTERNAL_INFO { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  MODE: ").Append(MODE).Append("\n");
            sb.Append("  MSGTYPE: ").Append(MSGTYPE).Append("\n");
            sb.Append("  CREATION: ").Append(CREATION).Append("\n");
            sb.Append("  LINK: ").Append(LINK).Append("\n");
            sb.Append("  LEVEL: ").Append(LEVEL).Append("\n");
            sb.Append("  SECLASS: ").Append(SECLASS).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  ORIGIN: ").Append(ORIGIN).Append("\n");
            sb.Append("  EXTERNAL_INFO: ").Append(EXTERNAL_INFO).Append("\n");
            sb.Append("  URGENCY: ").Append(URGENCY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CREATION != null) {
                // CREATION (DateTime) pattern
                Regex regexCREATION = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexCREATION.Match(this.CREATION).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CREATION, must match a pattern of " + regexCREATION, new [] { "CREATION" });
                }
            }

            yield break;
        }
    }

}
