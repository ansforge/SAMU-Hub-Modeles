/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Evac
    /// </summary>
    [DataContract(Name = "evac")]
    public partial class Evac : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evac" /> class.
        /// </summary>
        /// <param name="dATIME">Optionnel.</param>
        /// <param name="dISPLACED">Optionnel.</param>
        /// <param name="eVACUATED">Optionnel.</param>
        public Evac(DateTime dATIME = default(DateTime), int dISPLACED = default(int), int eVACUATED = default(int))
        {
            this.DATIME = dATIME;
            this.DISPLACED = dISPLACED;
            this.EVACUATED = eVACUATED;
        }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "DATIME", EmitDefaultValue = false)]
        public DateTime DATIME { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "DISPLACED", EmitDefaultValue = false)]
        public int DISPLACED { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "EVACUATED", EmitDefaultValue = false)]
        public int EVACUATED { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Evac {\n");
            sb.Append("  DATIME: ").Append(DATIME).Append("\n");
            sb.Append("  DISPLACED: ").Append(DISPLACED).Append("\n");
            sb.Append("  EVACUATED: ").Append(EVACUATED).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DATIME != null) {
                // DATIME (DateTime) pattern
                Regex regexDATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDATIME.Match(this.DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DATIME, must match a pattern of " + regexDATIME, new [] { "DATIME" });
                }
            }

            yield break;
        }
    }

}
