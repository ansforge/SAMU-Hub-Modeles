/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Resource
    /// </summary>
    [DataContract(Name = "resource")]
    public partial class Resource : IValidatableObject
    {
        /// <summary>
        /// Dans le cadre d&#39;un échange d&#39;opération, optionnel. Unité de mesure pour des ressources consommables
        /// </summary>
        /// <value>Dans le cadre d&#39;un échange d&#39;opération, optionnel. Unité de mesure pour des ressources consommables</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UMEnum
        {
            /// <summary>
            /// Enum LSV for value: LSV
            /// </summary>
            [EnumMember(Value = "LSV")]
            LSV = 1,

            /// <summary>
            /// Enum OTH for value: OTH
            /// </summary>
            [EnumMember(Value = "OTH")]
            OTH = 2,

            /// <summary>
            /// Enum PKG for value: PKG
            /// </summary>
            [EnumMember(Value = "PKG")]
            PKG = 3,

            /// <summary>
            /// Enum TIM for value: TIM
            /// </summary>
            [EnumMember(Value = "TIM")]
            TIM = 4,

            /// <summary>
            /// Enum WGT for value: WGT
            /// </summary>
            [EnumMember(Value = "WGT")]
            WGT = 5,

            /// <summary>
            /// Enum LSVCM for value: LSV/CM
            /// </summary>
            [EnumMember(Value = "LSV/CM")]
            LSVCM = 6,

            /// <summary>
            /// Enum LSVCMH for value: LSV/CMH
            /// </summary>
            [EnumMember(Value = "LSV/CMH")]
            LSVCMH = 7,

            /// <summary>
            /// Enum LSVCNTLTR for value: LSV/CNTLTR
            /// </summary>
            [EnumMember(Value = "LSV/CNTLTR")]
            LSVCNTLTR = 8,

            /// <summary>
            /// Enum LSVDEG for value: LSV/DEG
            /// </summary>
            [EnumMember(Value = "LSV/DEG")]
            LSVDEG = 9,

            /// <summary>
            /// Enum LSVHCTLTR for value: LSV/HCTLTR
            /// </summary>
            [EnumMember(Value = "LSV/HCTLTR")]
            LSVHCTLTR = 10,

            /// <summary>
            /// Enum LSVHCTMTR for value: LSV/HCTMTR
            /// </summary>
            [EnumMember(Value = "LSV/HCTMTR")]
            LSVHCTMTR = 11,

            /// <summary>
            /// Enum LSVKM for value: LSV/KM
            /// </summary>
            [EnumMember(Value = "LSV/KM")]
            LSVKM = 12,

            /// <summary>
            /// Enum LSVKPH for value: LSV/KPH
            /// </summary>
            [EnumMember(Value = "LSV/KPH")]
            LSVKPH = 13,

            /// <summary>
            /// Enum LSVLI for value: LSV/LI
            /// </summary>
            [EnumMember(Value = "LSV/LI")]
            LSVLI = 14,

            /// <summary>
            /// Enum LSVLTPRHR for value: LSV/LTPRHR
            /// </summary>
            [EnumMember(Value = "LSV/LTPRHR")]
            LSVLTPRHR = 15,

            /// <summary>
            /// Enum LSVLTPRMN for value: LSV/LTPRMN
            /// </summary>
            [EnumMember(Value = "LSV/LTPRMN")]
            LSVLTPRMN = 16,

            /// <summary>
            /// Enum LSVMETRE for value: LSV/METRE
            /// </summary>
            [EnumMember(Value = "LSV/METRE")]
            LSVMETRE = 17,

            /// <summary>
            /// Enum LSVMILLTR for value: LSV/MILLTR
            /// </summary>
            [EnumMember(Value = "LSV/MILLTR")]
            LSVMILLTR = 18,

            /// <summary>
            /// Enum LSVMILMTR for value: LSV/MILMTR
            /// </summary>
            [EnumMember(Value = "LSV/MILMTR")]
            LSVMILMTR = 19,

            /// <summary>
            /// Enum LSVSMH for value: LSV/SMH
            /// </summary>
            [EnumMember(Value = "LSV/SMH")]
            LSVSMH = 20,

            /// <summary>
            /// Enum LSVSQM for value: LSV/SQM
            /// </summary>
            [EnumMember(Value = "LSV/SQM")]
            LSVSQM = 21,

            /// <summary>
            /// Enum OTHCOIL for value: OTH/COIL
            /// </summary>
            [EnumMember(Value = "OTH/COIL")]
            OTHCOIL = 22,

            /// <summary>
            /// Enum OTHDOZEN for value: OTH/DOZEN
            /// </summary>
            [EnumMember(Value = "OTH/DOZEN")]
            OTHDOZEN = 23,

            /// <summary>
            /// Enum OTHEA for value: OTH/EA
            /// </summary>
            [EnumMember(Value = "OTH/EA")]
            OTHEA = 24,

            /// <summary>
            /// Enum OTHGROSS for value: OTH/GROSS
            /// </summary>
            [EnumMember(Value = "OTH/GROSS")]
            OTHGROSS = 25,

            /// <summary>
            /// Enum OTHMANHUR for value: OTH/MANHUR
            /// </summary>
            [EnumMember(Value = "OTH/MANHUR")]
            OTHMANHUR = 26,

            /// <summary>
            /// Enum OTHMHPRHR for value: OTH/MHPRHR
            /// </summary>
            [EnumMember(Value = "OTH/MHPRHR")]
            OTHMHPRHR = 27,

            /// <summary>
            /// Enum PKGBALE for value: PKG/BALE
            /// </summary>
            [EnumMember(Value = "PKG/BALE")]
            PKGBALE = 28,

            /// <summary>
            /// Enum PKGBARREL for value: PKG/BARREL
            /// </summary>
            [EnumMember(Value = "PKG/BARREL")]
            PKGBARREL = 29,

            /// <summary>
            /// Enum PKGBLK for value: PKG/BLK
            /// </summary>
            [EnumMember(Value = "PKG/BLK")]
            PKGBLK = 30,

            /// <summary>
            /// Enum PKGBOX for value: PKG/BOX
            /// </summary>
            [EnumMember(Value = "PKG/BOX")]
            PKGBOX = 31,

            /// <summary>
            /// Enum PKGCASE for value: PKG/CASE
            /// </summary>
            [EnumMember(Value = "PKG/CASE")]
            PKGCASE = 32,

            /// <summary>
            /// Enum PKGCONTNR for value: PKG/CONTNR
            /// </summary>
            [EnumMember(Value = "PKG/CONTNR")]
            PKGCONTNR = 33,

            /// <summary>
            /// Enum PKGCRATE for value: PKG/CRATE
            /// </summary>
            [EnumMember(Value = "PKG/CRATE")]
            PKGCRATE = 34,

            /// <summary>
            /// Enum PKGDRM for value: PKG/DRM
            /// </summary>
            [EnumMember(Value = "PKG/DRM")]
            PKGDRM = 35,

            /// <summary>
            /// Enum PKGJERCAN for value: PKG/JERCAN
            /// </summary>
            [EnumMember(Value = "PKG/JERCAN")]
            PKGJERCAN = 36,

            /// <summary>
            /// Enum PKGPAK for value: PKG/PAK
            /// </summary>
            [EnumMember(Value = "PKG/PAK")]
            PKGPAK = 37,

            /// <summary>
            /// Enum PKGPAL for value: PKG/PAL
            /// </summary>
            [EnumMember(Value = "PKG/PAL")]
            PKGPAL = 38,

            /// <summary>
            /// Enum PKGRATION for value: PKG/RATION
            /// </summary>
            [EnumMember(Value = "PKG/RATION")]
            PKGRATION = 39,

            /// <summary>
            /// Enum TIMDAY for value: TIM/DAY
            /// </summary>
            [EnumMember(Value = "TIM/DAY")]
            TIMDAY = 40,

            /// <summary>
            /// Enum TIMHR for value: TIM/HR
            /// </summary>
            [EnumMember(Value = "TIM/HR")]
            TIMHR = 41,

            /// <summary>
            /// Enum TIMMINUTE for value: TIM/MINUTE
            /// </summary>
            [EnumMember(Value = "TIM/MINUTE")]
            TIMMINUTE = 42,

            /// <summary>
            /// Enum TIMMON for value: TIM/MON
            /// </summary>
            [EnumMember(Value = "TIM/MON")]
            TIMMON = 43,

            /// <summary>
            /// Enum TIMSECOND for value: TIM/SECOND
            /// </summary>
            [EnumMember(Value = "TIM/SECOND")]
            TIMSECOND = 44,

            /// <summary>
            /// Enum TIMWEK for value: TIM/WEK
            /// </summary>
            [EnumMember(Value = "TIM/WEK")]
            TIMWEK = 45,

            /// <summary>
            /// Enum TIMYEA for value: TIM/YEA
            /// </summary>
            [EnumMember(Value = "TIM/YEA")]
            TIMYEA = 46,

            /// <summary>
            /// Enum WGTCNTGRM for value: WGT/CNTGRM
            /// </summary>
            [EnumMember(Value = "WGT/CNTGRM")]
            WGTCNTGRM = 47,

            /// <summary>
            /// Enum WGTGRAM for value: WGT/GRAM
            /// </summary>
            [EnumMember(Value = "WGT/GRAM")]
            WGTGRAM = 48,

            /// <summary>
            /// Enum WGTKG for value: WGT/KG
            /// </summary>
            [EnumMember(Value = "WGT/KG")]
            WGTKG = 49,

            /// <summary>
            /// Enum WGTKGH for value: WGT/KGH
            /// </summary>
            [EnumMember(Value = "WGT/KGH")]
            WGTKGH = 50
        }


        /// <summary>
        /// Dans le cadre d&#39;un échange d&#39;opération, optionnel. Unité de mesure pour des ressources consommables
        /// </summary>
        /// <value>Dans le cadre d&#39;un échange d&#39;opération, optionnel. Unité de mesure pour des ressources consommables</value>
        /*
        <example>example.json#/RESOURCE/0/UM</example>
        */
        [DataMember(Name = "UM", EmitDefaultValue = false)]
        public UMEnum? UM { get; set; }
        /// <summary>
        /// Définit le statut de disponibilité d&#39;une ressource. - AVAILB : Lorsqu&#39;une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l&#39;affaire mais pas encore engagée dans l&#39;opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils sont sur les lieux de l&#39;affaire
        /// </summary>
        /// <value>Définit le statut de disponibilité d&#39;une ressource. - AVAILB : Lorsqu&#39;une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l&#39;affaire mais pas encore engagée dans l&#39;opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils sont sur les lieux de l&#39;affaire</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum STATUSEnum
        {
            /// <summary>
            /// Enum AVAILB for value: AVAILB
            /// </summary>
            [EnumMember(Value = "AVAILB")]
            AVAILB = 1,

            /// <summary>
            /// Enum UNAV for value: UNAV
            /// </summary>
            [EnumMember(Value = "UNAV")]
            UNAV = 2,

            /// <summary>
            /// Enum MAINTC for value: MAINTC
            /// </summary>
            [EnumMember(Value = "MAINTC")]
            MAINTC = 3,

            /// <summary>
            /// Enum RESRVD for value: RESRVD
            /// </summary>
            [EnumMember(Value = "RESRVD")]
            RESRVD = 4,

            /// <summary>
            /// Enum VIRTUAL for value: VIRTUAL
            /// </summary>
            [EnumMember(Value = "VIRTUAL")]
            VIRTUAL = 5,

            /// <summary>
            /// Enum INUSEMOBILE for value: IN_USE/MOBILE
            /// </summary>
            [EnumMember(Value = "IN_USE/MOBILE")]
            INUSEMOBILE = 6,

            /// <summary>
            /// Enum INUSEONSCENE for value: IN_USE/ON_SCENE
            /// </summary>
            [EnumMember(Value = "IN_USE/ON_SCENE")]
            INUSEONSCENE = 7
        }


        /// <summary>
        /// Définit le statut de disponibilité d&#39;une ressource. - AVAILB : Lorsqu&#39;une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l&#39;affaire mais pas encore engagée dans l&#39;opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils sont sur les lieux de l&#39;affaire
        /// </summary>
        /// <value>Définit le statut de disponibilité d&#39;une ressource. - AVAILB : Lorsqu&#39;une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l&#39;affaire mais pas encore engagée dans l&#39;opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils sont sur les lieux de l&#39;affaire</value>
        /*
        <example>example.json#/RESOURCE/0/STATUS</example>
        */
        [DataMember(Name = "STATUS", IsRequired = true, EmitDefaultValue = true)]
        public STATUSEnum STATUS { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Resource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        /// <param name="rTYPE">rTYPE (required).</param>
        /// <param name="iD">Identifiant unique de la ressource  dans le système du partenaire propriétaire. Les systèmes sont garants de l&#39;unicité et de l&#39;invariablité des ids de véhicule dans le temps. Ils peuvent se servir des ids dans les référentiels existants si ils sont uniques et stables. Dans le cas d&#39;un véhicule agrégé par un LRM (comme un SMUR), l&#39;ID doit être valorisé avec son immatriculation. Dans le cas d&#39;un véhicule agrégé par NexSIS, l&#39;ID fournit peut ne pas correspondre à une immatriculation. (required).</param>
        /// <param name="oRGID">Identifiant de l&#39;organisation à laquelle la ressource est rattachée (caserne, SAMU etc). Se référer au DSF pour la structure normée des organisations. Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*. Dans le cas où le LRM/NexSIS sert d&#39;aggrégateur pour des véhicules appartenant à un partenaire tiers (type ambulance privée), l&#39;identifiant d&#39;organisation permet d&#39;identifier ce tiers. A constituer par le rédacteur du présent EMSI pour être unique..</param>
        /// <param name="nAME">Nom donné à la ressource par le partenaire. L&#39;immatriculation peut être utilisée dans le nom courant des véhicules. Dans le cas pompier, les véhicules sont nommés Dans le cas d&#39;équipier, cela peut être leur nom (required).</param>
        /// <param name="fREETEXT">Texte libre permettant de décrire la ressource où d&#39;ajouter des précisions sur son engagement. Permet aussi notamment de décrire des attributs librement pour la ressource. Par exemple, pour un véhicule, sa plaque d&#39;immatriculation..</param>
        /// <param name="rGEO">rGEO.</param>
        /// <param name="qUANTITY">Dans le cadre d&#39;un échange d&#39;opération, optionnel. Permet de quantifier une ressource : - à ne pas utiliser pour les véhicules ni le personnel - utilisable pour du matériel - utilisable pour des consommables (dans le cas de consommable, à compléter avec le champ UM).</param>
        /// <param name="uM">Dans le cadre d&#39;un échange d&#39;opération, optionnel. Unité de mesure pour des ressources consommables.</param>
        /// <param name="sTATUS">Définit le statut de disponibilité d&#39;une ressource. - AVAILB : Lorsqu&#39;une mission est terminée, une ressource redevient disponible - RESRVD : Lorsque la ressource est réservée pour intervenir sur l&#39;affaire mais pas encore engagée dans l&#39;opération. Par exemple : un SMUR termine un autre transfert patient/victime avant de rejoindre une autre intervention : il est alors RESRVD - IN_USE/MOBILE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils se déplaces - IN_USE/ON_SCENE : à utiliser pour les véhicules et le personnel lorsqu&#39;ils sont sur les lieux de l&#39;affaire (required).</param>
        /// <param name="nATIONALITY">Nationalité d&#39;une ressource, réemployer ISO 3166-1-alpha-2 code elements..</param>
        /// <param name="cONTACTS">cONTACTS.</param>
        public Resource(Rtype rTYPE = default(Rtype), string iD = default(string), string oRGID = default(string), string nAME = default(string), string fREETEXT = default(string), List<Rgeo> rGEO = default(List<Rgeo>), decimal qUANTITY = default(decimal), UMEnum? uM = default(UMEnum?), STATUSEnum sTATUS = default(STATUSEnum), string nATIONALITY = default(string), List<Contact> cONTACTS = default(List<Contact>))
        {
            // to ensure "rTYPE" is required (not null)
            if (rTYPE == null)
            {
                throw new ArgumentNullException("rTYPE is a required property for Resource and cannot be null");
            }
            this.RTYPE = rTYPE;
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new ArgumentNullException("iD is a required property for Resource and cannot be null");
            }
            this.ID = iD;
            // to ensure "nAME" is required (not null)
            if (nAME == null)
            {
                throw new ArgumentNullException("nAME is a required property for Resource and cannot be null");
            }
            this.NAME = nAME;
            this.STATUS = sTATUS;
            this.ORG_ID = oRGID;
            this.FREETEXT = fREETEXT;
            this.RGEO = rGEO;
            this.QUANTITY = qUANTITY;
            this.UM = uM;
            this.NATIONALITY = nATIONALITY;
            this.CONTACTS = cONTACTS;
        }

        /// <summary>
        /// Gets or Sets RTYPE
        /// </summary>
        [DataMember(Name = "RTYPE", IsRequired = true, EmitDefaultValue = true)]
        public Rtype RTYPE { get; set; }

        /// <summary>
        /// Identifiant unique de la ressource  dans le système du partenaire propriétaire. Les systèmes sont garants de l&#39;unicité et de l&#39;invariablité des ids de véhicule dans le temps. Ils peuvent se servir des ids dans les référentiels existants si ils sont uniques et stables. Dans le cas d&#39;un véhicule agrégé par un LRM (comme un SMUR), l&#39;ID doit être valorisé avec son immatriculation. Dans le cas d&#39;un véhicule agrégé par NexSIS, l&#39;ID fournit peut ne pas correspondre à une immatriculation.
        /// </summary>
        /// <value>Identifiant unique de la ressource  dans le système du partenaire propriétaire. Les systèmes sont garants de l&#39;unicité et de l&#39;invariablité des ids de véhicule dans le temps. Ils peuvent se servir des ids dans les référentiels existants si ils sont uniques et stables. Dans le cas d&#39;un véhicule agrégé par un LRM (comme un SMUR), l&#39;ID doit être valorisé avec son immatriculation. Dans le cas d&#39;un véhicule agrégé par NexSIS, l&#39;ID fournit peut ne pas correspondre à une immatriculation.</value>
        /*
        <example>example.json#/RESOURCE/0/ID</example>
        */
        [DataMember(Name = "ID", IsRequired = true, EmitDefaultValue = true)]
        public string ID { get; set; }

        /// <summary>
        /// Identifiant de l&#39;organisation à laquelle la ressource est rattachée (caserne, SAMU etc). Se référer au DSF pour la structure normée des organisations. Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*. Dans le cas où le LRM/NexSIS sert d&#39;aggrégateur pour des véhicules appartenant à un partenaire tiers (type ambulance privée), l&#39;identifiant d&#39;organisation permet d&#39;identifier ce tiers. A constituer par le rédacteur du présent EMSI pour être unique.
        /// </summary>
        /// <value>Identifiant de l&#39;organisation à laquelle la ressource est rattachée (caserne, SAMU etc). Se référer au DSF pour la structure normée des organisations. Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*. Dans le cas où le LRM/NexSIS sert d&#39;aggrégateur pour des véhicules appartenant à un partenaire tiers (type ambulance privée), l&#39;identifiant d&#39;organisation permet d&#39;identifier ce tiers. A constituer par le rédacteur du présent EMSI pour être unique.</value>
        /*
        <example>example.json#/RESOURCE/0/ORG_ID</example>
        */
        [DataMember(Name = "ORG_ID", EmitDefaultValue = false)]
        public string ORG_ID { get; set; }

        /// <summary>
        /// Nom donné à la ressource par le partenaire. L&#39;immatriculation peut être utilisée dans le nom courant des véhicules. Dans le cas pompier, les véhicules sont nommés Dans le cas d&#39;équipier, cela peut être leur nom
        /// </summary>
        /// <value>Nom donné à la ressource par le partenaire. L&#39;immatriculation peut être utilisée dans le nom courant des véhicules. Dans le cas pompier, les véhicules sont nommés Dans le cas d&#39;équipier, cela peut être leur nom</value>
        /*
        <example>example.json#/RESOURCE/0/NAME</example>
        */
        [DataMember(Name = "NAME", IsRequired = true, EmitDefaultValue = true)]
        public string NAME { get; set; }

        /// <summary>
        /// Texte libre permettant de décrire la ressource où d&#39;ajouter des précisions sur son engagement. Permet aussi notamment de décrire des attributs librement pour la ressource. Par exemple, pour un véhicule, sa plaque d&#39;immatriculation.
        /// </summary>
        /// <value>Texte libre permettant de décrire la ressource où d&#39;ajouter des précisions sur son engagement. Permet aussi notamment de décrire des attributs librement pour la ressource. Par exemple, pour un véhicule, sa plaque d&#39;immatriculation.</value>
        /*
        <example>example.json#/RESOURCE/0/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Gets or Sets RGEO
        /// </summary>
        [DataMember(Name = "RGEO", EmitDefaultValue = false)]
        public List<Rgeo> RGEO { get; set; }

        /// <summary>
        /// Dans le cadre d&#39;un échange d&#39;opération, optionnel. Permet de quantifier une ressource : - à ne pas utiliser pour les véhicules ni le personnel - utilisable pour du matériel - utilisable pour des consommables (dans le cas de consommable, à compléter avec le champ UM)
        /// </summary>
        /// <value>Dans le cadre d&#39;un échange d&#39;opération, optionnel. Permet de quantifier une ressource : - à ne pas utiliser pour les véhicules ni le personnel - utilisable pour du matériel - utilisable pour des consommables (dans le cas de consommable, à compléter avec le champ UM)</value>
        [DataMember(Name = "QUANTITY", EmitDefaultValue = false)]
        public decimal QUANTITY { get; set; }

        /// <summary>
        /// Nationalité d&#39;une ressource, réemployer ISO 3166-1-alpha-2 code elements.
        /// </summary>
        /// <value>Nationalité d&#39;une ressource, réemployer ISO 3166-1-alpha-2 code elements.</value>
        /*
        <example>example.json#/RESOURCE/0/NATIONALITY</example>
        */
        [DataMember(Name = "NATIONALITY", EmitDefaultValue = false)]
        public string NATIONALITY { get; set; }

        /// <summary>
        /// Gets or Sets CONTACTS
        /// </summary>
        [DataMember(Name = "CONTACTS", EmitDefaultValue = false)]
        public List<Contact> CONTACTS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Resource {\n");
            sb.Append("  RTYPE: ").Append(RTYPE).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ORG_ID: ").Append(ORG_ID).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  RGEO: ").Append(RGEO).Append("\n");
            sb.Append("  QUANTITY: ").Append(QUANTITY).Append("\n");
            sb.Append("  UM: ").Append(UM).Append("\n");
            sb.Append("  STATUS: ").Append(STATUS).Append("\n");
            sb.Append("  NATIONALITY: ").Append(NATIONALITY).Append("\n");
            sb.Append("  CONTACTS: ").Append(CONTACTS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
