/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Egeo
    /// </summary>
    [DataContract(Name = "egeo")]
    public partial class Egeo : IValidatableObject
    {
        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type différents
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type différents</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TYPEEnum
        {
            /// <summary>
            /// Enum AIR for value: AIR
            /// </summary>
            [EnumMember(Value = "AIR")]
            AIR = 1,

            /// <summary>
            /// Enum CMB for value: CMB
            /// </summary>
            [EnumMember(Value = "CMB")]
            CMB = 2,

            /// <summary>
            /// Enum DGR for value: DGR
            /// </summary>
            [EnumMember(Value = "DGR")]
            DGR = 3,

            /// <summary>
            /// Enum FLAME for value: FLAME
            /// </summary>
            [EnumMember(Value = "FLAME")]
            FLAME = 4,

            /// <summary>
            /// Enum GEN for value: GEN
            /// </summary>
            [EnumMember(Value = "GEN")]
            GEN = 5,

            /// <summary>
            /// Enum PLUME for value: PLUME
            /// </summary>
            [EnumMember(Value = "PLUME")]
            PLUME = 6,

            /// <summary>
            /// Enum SMOKE for value: SMOKE
            /// </summary>
            [EnumMember(Value = "SMOKE")]
            SMOKE = 7,

            /// <summary>
            /// Enum VULN for value: VULN
            /// </summary>
            [EnumMember(Value = "VULN")]
            VULN = 8,

            /// <summary>
            /// Enum AIRCOR for value: AIR/COR
            /// </summary>
            [EnumMember(Value = "AIR/COR")]
            AIRCOR = 9,

            /// <summary>
            /// Enum AIRFLDZ for value: AIR/FLDZ
            /// </summary>
            [EnumMember(Value = "AIR/FLDZ")]
            AIRFLDZ = 10,

            /// <summary>
            /// Enum AIRLZ for value: AIR/LZ
            /// </summary>
            [EnumMember(Value = "AIR/LZ")]
            AIRLZ = 11,

            /// <summary>
            /// Enum AIRNOFLZN for value: AIR/NOFLZN
            /// </summary>
            [EnumMember(Value = "AIR/NOFLZN")]
            AIRNOFLZN = 12,

            /// <summary>
            /// Enum AIRPZ for value: AIR/PZ
            /// </summary>
            [EnumMember(Value = "AIR/PZ")]
            AIRPZ = 13,

            /// <summary>
            /// Enum AIRUAVASP for value: AIR/UAVASP
            /// </summary>
            [EnumMember(Value = "AIR/UAVASP")]
            AIRUAVASP = 14,

            /// <summary>
            /// Enum CMBCZ for value: CMB/CZ
            /// </summary>
            [EnumMember(Value = "CMB/CZ")]
            CMBCZ = 15,

            /// <summary>
            /// Enum CMBDNGR for value: CMB/DNGR
            /// </summary>
            [EnumMember(Value = "CMB/DNGR")]
            CMBDNGR = 16,

            /// <summary>
            /// Enum CMBEXTZN for value: CMB/EXTZN
            /// </summary>
            [EnumMember(Value = "CMB/EXTZN")]
            CMBEXTZN = 17,

            /// <summary>
            /// Enum CMBIMPTPT for value: CMB/IMPTPT
            /// </summary>
            [EnumMember(Value = "CMB/IMPTPT")]
            CMBIMPTPT = 18,

            /// <summary>
            /// Enum DGRBIO for value: DGR/BIO
            /// </summary>
            [EnumMember(Value = "DGR/BIO")]
            DGRBIO = 19,

            /// <summary>
            /// Enum DGRBOMB for value: DGR/BOMB
            /// </summary>
            [EnumMember(Value = "DGR/BOMB")]
            DGRBOMB = 20,

            /// <summary>
            /// Enum DGRCBRNHZ for value: DGR/CBRNHZ
            /// </summary>
            [EnumMember(Value = "DGR/CBRNHZ")]
            DGRCBRNHZ = 21,

            /// <summary>
            /// Enum DGRCBRNRSD for value: DGR/CBRNRSD
            /// </summary>
            [EnumMember(Value = "DGR/CBRNRSD")]
            DGRCBRNRSD = 22,

            /// <summary>
            /// Enum DGRCHM for value: DGR/CHM
            /// </summary>
            [EnumMember(Value = "DGR/CHM")]
            DGRCHM = 23,

            /// <summary>
            /// Enum DGRHZD for value: DGR/HZD
            /// </summary>
            [EnumMember(Value = "DGR/HZD")]
            DGRHZD = 24,

            /// <summary>
            /// Enum DGRMIND for value: DGR/MIND
            /// </summary>
            [EnumMember(Value = "DGR/MIND")]
            DGRMIND = 25,

            /// <summary>
            /// Enum DGRNGA for value: DGR/NGA
            /// </summary>
            [EnumMember(Value = "DGR/NGA")]
            DGRNGA = 26,

            /// <summary>
            /// Enum DGRNGACIV for value: DGR/NGACIV
            /// </summary>
            [EnumMember(Value = "DGR/NGACIV")]
            DGRNGACIV = 27,

            /// <summary>
            /// Enum DGRNUKCNL for value: DGR/NUKCNL
            /// </summary>
            [EnumMember(Value = "DGR/NUKCNL")]
            DGRNUKCNL = 28,

            /// <summary>
            /// Enum DGROBSGEN for value: DGR/OBSGEN
            /// </summary>
            [EnumMember(Value = "DGR/OBSGEN")]
            DGROBSGEN = 29,

            /// <summary>
            /// Enum DGRPRHBAR for value: DGR/PRHBAR
            /// </summary>
            [EnumMember(Value = "DGR/PRHBAR")]
            DGRPRHBAR = 30,

            /// <summary>
            /// Enum DGRRAD for value: DGR/RAD
            /// </summary>
            [EnumMember(Value = "DGR/RAD")]
            DGRRAD = 31,

            /// <summary>
            /// Enum DGRRADCLD for value: DGR/RADCLD
            /// </summary>
            [EnumMember(Value = "DGR/RADCLD")]
            DGRRADCLD = 32,

            /// <summary>
            /// Enum DGRRSTR for value: DGR/RSTR
            /// </summary>
            [EnumMember(Value = "DGR/RSTR")]
            DGRRSTR = 33,

            /// <summary>
            /// Enum DGRSGA for value: DGR/SGA
            /// </summary>
            [EnumMember(Value = "DGR/SGA")]
            DGRSGA = 34,

            /// <summary>
            /// Enum DGRSITKIL for value: DGR/SITKIL
            /// </summary>
            [EnumMember(Value = "DGR/SITKIL")]
            DGRSITKIL = 35,

            /// <summary>
            /// Enum DGRUNXOD for value: DGR/UNXOD
            /// </summary>
            [EnumMember(Value = "DGR/UNXOD")]
            DGRUNXOD = 36,

            /// <summary>
            /// Enum GENAOR for value: GEN/AOR
            /// </summary>
            [EnumMember(Value = "GEN/AOR")]
            GENAOR = 37,

            /// <summary>
            /// Enum GENASYGEN for value: GEN/ASYGEN
            /// </summary>
            [EnumMember(Value = "GEN/ASYGEN")]
            GENASYGEN = 38,

            /// <summary>
            /// Enum GENASYSPL for value: GEN/ASYSPL
            /// </summary>
            [EnumMember(Value = "GEN/ASYSPL")]
            GENASYSPL = 39,

            /// <summary>
            /// Enum GENBDYOR for value: GEN/BDYOR
            /// </summary>
            [EnumMember(Value = "GEN/BDYOR")]
            GENBDYOR = 40,

            /// <summary>
            /// Enum GENBDYPOA for value: GEN/BDYPOA
            /// </summary>
            [EnumMember(Value = "GEN/BDYPOA")]
            GENBDYPOA = 41,

            /// <summary>
            /// Enum GENBDYPT for value: GEN/BDYPT
            /// </summary>
            [EnumMember(Value = "GEN/BDYPT")]
            GENBDYPT = 42,

            /// <summary>
            /// Enum GENCKPGEN for value: GEN/CKPGEN
            /// </summary>
            [EnumMember(Value = "GEN/CKPGEN")]
            GENCKPGEN = 43,

            /// <summary>
            /// Enum GENCNTPTL for value: GEN/CNTPTL
            /// </summary>
            [EnumMember(Value = "GEN/CNTPTL")]
            GENCNTPTL = 44,

            /// <summary>
            /// Enum GENCOLDZ for value: GEN/COLDZ
            /// </summary>
            [EnumMember(Value = "GEN/COLDZ")]
            GENCOLDZ = 45,

            /// <summary>
            /// Enum GENCOMCKP for value: GEN/COMCKP
            /// </summary>
            [EnumMember(Value = "GEN/COMCKP")]
            GENCOMCKP = 46,

            /// <summary>
            /// Enum GENCOMLOW for value: GEN/COMLOW
            /// </summary>
            [EnumMember(Value = "GEN/COMLOW")]
            GENCOMLOW = 47,

            /// <summary>
            /// Enum GENCOMMZ for value: GEN/COMMZ
            /// </summary>
            [EnumMember(Value = "GEN/COMMZ")]
            GENCOMMZ = 48,

            /// <summary>
            /// Enum GENCOMUP for value: GEN/COMUP
            /// </summary>
            [EnumMember(Value = "GEN/COMUP")]
            GENCOMUP = 49,

            /// <summary>
            /// Enum GENCONTAR for value: GEN/CONTAR
            /// </summary>
            [EnumMember(Value = "GEN/CONTAR")]
            GENCONTAR = 50,

            /// <summary>
            /// Enum GENCORDON for value: GEN/CORDON
            /// </summary>
            [EnumMember(Value = "GEN/CORDON")]
            GENCORDON = 51,

            /// <summary>
            /// Enum GENCRDPNT for value: GEN/CRDPNT
            /// </summary>
            [EnumMember(Value = "GEN/CRDPNT")]
            GENCRDPNT = 52,

            /// <summary>
            /// Enum GENDIVRT for value: GEN/DIVRT
            /// </summary>
            [EnumMember(Value = "GEN/DIVRT")]
            GENDIVRT = 53,

            /// <summary>
            /// Enum GENDROPPT for value: GEN/DROPPT
            /// </summary>
            [EnumMember(Value = "GEN/DROPPT")]
            GENDROPPT = 54,

            /// <summary>
            /// Enum GENENTPT for value: GEN/ENTPT
            /// </summary>
            [EnumMember(Value = "GEN/ENTPT")]
            GENENTPT = 55,

            /// <summary>
            /// Enum GENEVENT for value: GEN/EVENT
            /// </summary>
            [EnumMember(Value = "GEN/EVENT")]
            GENEVENT = 56,

            /// <summary>
            /// Enum GENEXITPT for value: GEN/EXITPT
            /// </summary>
            [EnumMember(Value = "GEN/EXITPT")]
            GENEXITPT = 57,

            /// <summary>
            /// Enum GENFWCTPT for value: GEN/FWCTPT
            /// </summary>
            [EnumMember(Value = "GEN/FWCTPT")]
            GENFWCTPT = 58,

            /// <summary>
            /// Enum GENHOTZ for value: GEN/HOTZ
            /// </summary>
            [EnumMember(Value = "GEN/HOTZ")]
            GENHOTZ = 59,

            /// <summary>
            /// Enum GENINCGRD for value: GEN/INCGRD
            /// </summary>
            [EnumMember(Value = "GEN/INCGRD")]
            GENINCGRD = 60,

            /// <summary>
            /// Enum GENLA for value: GEN/LA
            /// </summary>
            [EnumMember(Value = "GEN/LA")]
            GENLA = 61,

            /// <summary>
            /// Enum GENLIMARE for value: GEN/LIMARE
            /// </summary>
            [EnumMember(Value = "GEN/LIMARE")]
            GENLIMARE = 62,

            /// <summary>
            /// Enum GENLOCAT for value: GEN/LOCAT
            /// </summary>
            [EnumMember(Value = "GEN/LOCAT")]
            GENLOCAT = 63,

            /// <summary>
            /// Enum GENMSR for value: GEN/MSR
            /// </summary>
            [EnumMember(Value = "GEN/MSR")]
            GENMSR = 64,

            /// <summary>
            /// Enum GENPSSGPT for value: GEN/PSSGPT
            /// </summary>
            [EnumMember(Value = "GEN/PSSGPT")]
            GENPSSGPT = 65,

            /// <summary>
            /// Enum GENPTINT for value: GEN/PTINT
            /// </summary>
            [EnumMember(Value = "GEN/PTINT")]
            GENPTINT = 66,

            /// <summary>
            /// Enum GENRCNSAR for value: GEN/RCNSAR
            /// </summary>
            [EnumMember(Value = "GEN/RCNSAR")]
            GENRCNSAR = 67,

            /// <summary>
            /// Enum GENRNDZPT for value: GEN/RNDZPT
            /// </summary>
            [EnumMember(Value = "GEN/RNDZPT")]
            GENRNDZPT = 68,

            /// <summary>
            /// Enum GENROUTE for value: GEN/ROUTE
            /// </summary>
            [EnumMember(Value = "GEN/ROUTE")]
            GENROUTE = 69,

            /// <summary>
            /// Enum GENSAFERT for value: GEN/SAFERT
            /// </summary>
            [EnumMember(Value = "GEN/SAFERT")]
            GENSAFERT = 70,

            /// <summary>
            /// Enum GENSAFZ for value: GEN/SAFZ
            /// </summary>
            [EnumMember(Value = "GEN/SAFZ")]
            GENSAFZ = 71,

            /// <summary>
            /// Enum GENSARPNT for value: GEN/SARPNT
            /// </summary>
            [EnumMember(Value = "GEN/SARPNT")]
            GENSARPNT = 72,

            /// <summary>
            /// Enum GENSEARAR for value: GEN/SEARAR
            /// </summary>
            [EnumMember(Value = "GEN/SEARAR")]
            GENSEARAR = 73,

            /// <summary>
            /// Enum GENSPRISK for value: GEN/SPRISK
            /// </summary>
            [EnumMember(Value = "GEN/SPRISK")]
            GENSPRISK = 74,

            /// <summary>
            /// Enum GENSTRTPT for value: GEN/STRTPT
            /// </summary>
            [EnumMember(Value = "GEN/STRTPT")]
            GENSTRTPT = 75,

            /// <summary>
            /// Enum GENSUPARE for value: GEN/SUPARE
            /// </summary>
            [EnumMember(Value = "GEN/SUPARE")]
            GENSUPARE = 76,

            /// <summary>
            /// Enum GENSUPPT for value: GEN/SUPPT
            /// </summary>
            [EnumMember(Value = "GEN/SUPPT")]
            GENSUPPT = 77,

            /// <summary>
            /// Enum GENTRSTRT for value: GEN/TRSTRT
            /// </summary>
            [EnumMember(Value = "GEN/TRSTRT")]
            GENTRSTRT = 78,

            /// <summary>
            /// Enum GENWARMZ for value: GEN/WARMZ
            /// </summary>
            [EnumMember(Value = "GEN/WARMZ")]
            GENWARMZ = 79
        }


        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type différents
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type différents</value>
        /*
        <example>example.json#/EVENT/EGEO/0/TYPE</example>
        */
        [DataMember(Name = "TYPE", EmitDefaultValue = false)]
        public TYPEEnum? TYPE { get; set; }
        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WEATHEREnum
        {
            /// <summary>
            /// Enum HUM for value: HUM
            /// </summary>
            [EnumMember(Value = "HUM")]
            HUM = 1,

            /// <summary>
            /// Enum ICY for value: ICY
            /// </summary>
            [EnumMember(Value = "ICY")]
            ICY = 2,

            /// <summary>
            /// Enum TDS for value: TDS
            /// </summary>
            [EnumMember(Value = "TDS")]
            TDS = 3,

            /// <summary>
            /// Enum TMP for value: TMP
            /// </summary>
            [EnumMember(Value = "TMP")]
            TMP = 4,

            /// <summary>
            /// Enum VIS for value: VIS
            /// </summary>
            [EnumMember(Value = "VIS")]
            VIS = 5,

            /// <summary>
            /// Enum WDS for value: WDS
            /// </summary>
            [EnumMember(Value = "WDS")]
            WDS = 6,

            /// <summary>
            /// Enum WIN for value: WIN
            /// </summary>
            [EnumMember(Value = "WIN")]
            WIN = 7,

            /// <summary>
            /// Enum HUMCORECT for value: HUM/CORECT
            /// </summary>
            [EnumMember(Value = "HUM/CORECT")]
            HUMCORECT = 8,

            /// <summary>
            /// Enum HUMDRZLE for value: HUM/DRZLE
            /// </summary>
            [EnumMember(Value = "HUM/DRZLE")]
            HUMDRZLE = 9,

            /// <summary>
            /// Enum HUMFOG for value: HUM/FOG
            /// </summary>
            [EnumMember(Value = "HUM/FOG")]
            HUMFOG = 10,

            /// <summary>
            /// Enum HUMRAIN for value: HUM/RAIN
            /// </summary>
            [EnumMember(Value = "HUM/RAIN")]
            HUMRAIN = 11,

            /// <summary>
            /// Enum HUMRAINSR for value: HUM/RAINSR
            /// </summary>
            [EnumMember(Value = "HUM/RAINSR")]
            HUMRAINSR = 12,

            /// <summary>
            /// Enum HUMTHSTRN for value: HUM/THSTRN
            /// </summary>
            [EnumMember(Value = "HUM/THSTRN")]
            HUMTHSTRN = 13,

            /// <summary>
            /// Enum ICYBLWSNW for value: ICY/BLWSNW
            /// </summary>
            [EnumMember(Value = "ICY/BLWSNW")]
            ICYBLWSNW = 14,

            /// <summary>
            /// Enum ICYCLRICE for value: ICY/CLRICE
            /// </summary>
            [EnumMember(Value = "ICY/CLRICE")]
            ICYCLRICE = 15,

            /// <summary>
            /// Enum ICYCORECT for value: ICY/CORECT
            /// </summary>
            [EnumMember(Value = "ICY/CORECT")]
            ICYCORECT = 16,

            /// <summary>
            /// Enum ICYFDRZLE for value: ICY/FDRZLE
            /// </summary>
            [EnumMember(Value = "ICY/FDRZLE")]
            ICYFDRZLE = 17,

            /// <summary>
            /// Enum ICYFRAIN for value: ICY/FRAIN
            /// </summary>
            [EnumMember(Value = "ICY/FRAIN")]
            ICYFRAIN = 18,

            /// <summary>
            /// Enum ICYFRZFOG for value: ICY/FRZFOG
            /// </summary>
            [EnumMember(Value = "ICY/FRZFOG")]
            ICYFRZFOG = 19,

            /// <summary>
            /// Enum ICYHAIL for value: ICY/HAIL
            /// </summary>
            [EnumMember(Value = "ICY/HAIL")]
            ICYHAIL = 20,

            /// <summary>
            /// Enum ICYICECRY for value: ICY/ICECRY
            /// </summary>
            [EnumMember(Value = "ICY/ICECRY")]
            ICYICECRY = 21,

            /// <summary>
            /// Enum ICYICEPLT for value: ICY/ICEPLT
            /// </summary>
            [EnumMember(Value = "ICY/ICEPLT")]
            ICYICEPLT = 22,

            /// <summary>
            /// Enum ICYMIXICE for value: ICY/MIXICE
            /// </summary>
            [EnumMember(Value = "ICY/MIXICE")]
            ICYMIXICE = 23,

            /// <summary>
            /// Enum ICYRIMICE for value: ICY/RIMICE
            /// </summary>
            [EnumMember(Value = "ICY/RIMICE")]
            ICYRIMICE = 24,

            /// <summary>
            /// Enum ICYSLEET for value: ICY/SLEET
            /// </summary>
            [EnumMember(Value = "ICY/SLEET")]
            ICYSLEET = 25,

            /// <summary>
            /// Enum ICYSNOW for value: ICY/SNOW
            /// </summary>
            [EnumMember(Value = "ICY/SNOW")]
            ICYSNOW = 26,

            /// <summary>
            /// Enum ICYSNWGRN for value: ICY/SNWGRN
            /// </summary>
            [EnumMember(Value = "ICY/SNWGRN")]
            ICYSNWGRN = 27,

            /// <summary>
            /// Enum ICYSNWSHR for value: ICY/SNWSHR
            /// </summary>
            [EnumMember(Value = "ICY/SNWSHR")]
            ICYSNWSHR = 28,

            /// <summary>
            /// Enum TDSCORECT for value: TDS/CORECT
            /// </summary>
            [EnumMember(Value = "TDS/CORECT")]
            TDSCORECT = 29,

            /// <summary>
            /// Enum TDSLGTNNG for value: TDS/LGTNNG
            /// </summary>
            [EnumMember(Value = "TDS/LGTNNG")]
            TDSLGTNNG = 30,

            /// <summary>
            /// Enum TDSTHST for value: TDS/THST
            /// </summary>
            [EnumMember(Value = "TDS/THST")]
            TDSTHST = 31,

            /// <summary>
            /// Enum VISCORECT for value: VIS/CORECT
            /// </summary>
            [EnumMember(Value = "VIS/CORECT")]
            VISCORECT = 32,

            /// <summary>
            /// Enum VISHAZE for value: VIS/HAZE
            /// </summary>
            [EnumMember(Value = "VIS/HAZE")]
            VISHAZE = 33,

            /// <summary>
            /// Enum VISSMOKE for value: VIS/SMOKE
            /// </summary>
            [EnumMember(Value = "VIS/SMOKE")]
            VISSMOKE = 34,

            /// <summary>
            /// Enum WINCORECT for value: WIN/CORECT
            /// </summary>
            [EnumMember(Value = "WIN/CORECT")]
            WINCORECT = 35,

            /// <summary>
            /// Enum WINCYCL for value: WIN/CYCL
            /// </summary>
            [EnumMember(Value = "WIN/CYCL")]
            WINCYCL = 36,

            /// <summary>
            /// Enum WINDSTDVL for value: WIN/DSTDVL
            /// </summary>
            [EnumMember(Value = "WIN/DSTDVL")]
            WINDSTDVL = 37,

            /// <summary>
            /// Enum WINDSTSND for value: WIN/DSTSND
            /// </summary>
            [EnumMember(Value = "WIN/DSTSND")]
            WINDSTSND = 38,

            /// <summary>
            /// Enum WINDSTSTR for value: WIN/DSTSTR
            /// </summary>
            [EnumMember(Value = "WIN/DSTSTR")]
            WINDSTSTR = 39,

            /// <summary>
            /// Enum WINFNLCLD for value: WIN/FNLCLD
            /// </summary>
            [EnumMember(Value = "WIN/FNLCLD")]
            WINFNLCLD = 40,

            /// <summary>
            /// Enum WINHURR for value: WIN/HURR
            /// </summary>
            [EnumMember(Value = "WIN/HURR")]
            WINHURR = 41,

            /// <summary>
            /// Enum WINSNDSTR for value: WIN/SNDSTR
            /// </summary>
            [EnumMember(Value = "WIN/SNDSTR")]
            WINSNDSTR = 42,

            /// <summary>
            /// Enum WINSTORM for value: WIN/STORM
            /// </summary>
            [EnumMember(Value = "WIN/STORM")]
            WINSTORM = 43,

            /// <summary>
            /// Enum WINTORN for value: WIN/TORN
            /// </summary>
            [EnumMember(Value = "WIN/TORN")]
            WINTORN = 44,

            /// <summary>
            /// Enum WINTRST for value: WIN/TRST
            /// </summary>
            [EnumMember(Value = "WIN/TRST")]
            WINTRST = 45,

            /// <summary>
            /// Enum WINTYPH for value: WIN/TYPH
            /// </summary>
            [EnumMember(Value = "WIN/TYPH")]
            WINTYPH = 46,

            /// <summary>
            /// Enum WINWHIR for value: WIN/WHIR
            /// </summary>
            [EnumMember(Value = "WIN/WHIR")]
            WINWHIR = 47,

            /// <summary>
            /// Enum WINWTRSPT for value: WIN/WTRSPT
            /// </summary>
            [EnumMember(Value = "WIN/WTRSPT")]
            WINWTRSPT = 48
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Egeo" /> class.
        /// </summary>
        /// <param name="dATIME">Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION.</param>
        /// <param name="tYPE">Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d&#39;où un groupe&lt;EGEO&gt; à créer par type différents.</param>
        /// <param name="wEATHER">wEATHER.</param>
        /// <param name="fREETEXT">Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION.</param>
        /// <param name="pOSITION">pOSITION.</param>
        public Egeo(DateTime dATIME = default(DateTime), TYPEEnum? tYPE = default(TYPEEnum?), List<WEATHEREnum> wEATHER = default(List<WEATHEREnum>), string fREETEXT = default(string), Position pOSITION = default(Position))
        {
            this.DATIME = dATIME;
            this.TYPE = tYPE;
            this.WEATHER = wEATHER;
            this.FREETEXT = fREETEXT;
            this.POSITION = pOSITION;
        }

        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION</value>
        [DataMember(Name = "DATIME", EmitDefaultValue = false)]
        public DateTime DATIME { get; set; }

        /// <summary>
        /// Gets or Sets WEATHER
        /// </summary>
        [DataMember(Name = "WEATHER", EmitDefaultValue = false)]
        public List<Egeo.WEATHEREnum> WEATHER { get; set; }

        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION</value>
        /*
        <example>example.json#/EVENT/EGEO/0/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Gets or Sets POSITION
        /// </summary>
        [DataMember(Name = "POSITION", EmitDefaultValue = false)]
        public Position POSITION { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Egeo {\n");
            sb.Append("  DATIME: ").Append(DATIME).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  WEATHER: ").Append(WEATHER).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  POSITION: ").Append(POSITION).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DATIME != null) {
                // DATIME (DateTime) pattern
                Regex regexDATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDATIME.Match(this.DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DATIME, must match a pattern of " + regexDATIME, new [] { "DATIME" });
                }
            }

            yield break;
        }
    }

}
