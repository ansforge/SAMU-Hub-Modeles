/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Position
    /// </summary>
    [DataContract(Name = "position")]
    public partial class Position : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="lOCID">Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION.  Lorsque le lieu d&#39;intervention est identique à celle d&#39;une position de l&#39;affaire partagée dans le message RC-EDA, le champ MISSION.RGEO.POSITION.LOC_ID doit être alimenté valorisé comme le champ eventLocation.locId du message RC-EDA envoyé en amont. .</param>
        /// <param name="nAME">Optionnel, non utilisé par NexSIS nom de lieu.</param>
        /// <param name="tYPE">Optionnel Dans le cadre de l&#39;interface LRM NexSIS, seul le libellé POINT doit obligatoirement être interprétable par les deux partenaires. Cf. Nomenclature EMSI - POSITION pour plus de détails.</param>
        /// <param name="hEIGHTROLE">Optionnel.</param>
        /// <param name="cOORDSYS">Optionnel.</param>
        /// <param name="cOORD">cOORD.</param>
        /// <param name="aDDRESS">aDDRESS.</param>
        public Position(string lOCID = default(string), string nAME = default(string), string tYPE = default(string), string hEIGHTROLE = default(string), string cOORDSYS = default(string), List<Coord> cOORD = default(List<Coord>), List<string> aDDRESS = default(List<string>))
        {
            this.LOC_ID = lOCID;
            this.NAME = nAME;
            this.TYPE = tYPE;
            this.HEIGHT_ROLE = hEIGHTROLE;
            this.COORDSYS = cOORDSYS;
            this.COORD = cOORD;
            this.ADDRESS = aDDRESS;
        }

        /// <summary>
        /// Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION.  Lorsque le lieu d&#39;intervention est identique à celle d&#39;une position de l&#39;affaire partagée dans le message RC-EDA, le champ MISSION.RGEO.POSITION.LOC_ID doit être alimenté valorisé comme le champ eventLocation.locId du message RC-EDA envoyé en amont. 
        /// </summary>
        /// <value>Optionnel La localisation de l&#39;affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l&#39;intervention est systématiquement reprécisé dans un objet MISSION.  Lorsque le lieu d&#39;intervention est identique à celle d&#39;une position de l&#39;affaire partagée dans le message RC-EDA, le champ MISSION.RGEO.POSITION.LOC_ID doit être alimenté valorisé comme le champ eventLocation.locId du message RC-EDA envoyé en amont. </value>
        /*
        <example>example.json#/EVENT/EGEO/0/POSITION/LOC_ID</example>
        */
        [DataMember(Name = "LOC_ID", EmitDefaultValue = false)]
        public string LOC_ID { get; set; }

        /// <summary>
        /// Optionnel, non utilisé par NexSIS nom de lieu
        /// </summary>
        /// <value>Optionnel, non utilisé par NexSIS nom de lieu</value>
        /*
        <example>example.json#/EVENT/EGEO/0/POSITION/NAME</example>
        */
        [DataMember(Name = "NAME", EmitDefaultValue = false)]
        public string NAME { get; set; }

        /// <summary>
        /// Optionnel Dans le cadre de l&#39;interface LRM NexSIS, seul le libellé POINT doit obligatoirement être interprétable par les deux partenaires. Cf. Nomenclature EMSI - POSITION pour plus de détails
        /// </summary>
        /// <value>Optionnel Dans le cadre de l&#39;interface LRM NexSIS, seul le libellé POINT doit obligatoirement être interprétable par les deux partenaires. Cf. Nomenclature EMSI - POSITION pour plus de détails</value>
        /*
        <example>example.json#/EVENT/EGEO/0/POSITION/TYPE</example>
        */
        [DataMember(Name = "TYPE", EmitDefaultValue = false)]
        public string TYPE { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/EGEO/0/POSITION/HEIGHT_ROLE</example>
        */
        [DataMember(Name = "HEIGHT_ROLE", EmitDefaultValue = false)]
        public string HEIGHT_ROLE { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/EGEO/0/POSITION/COORDSYS</example>
        */
        [DataMember(Name = "COORDSYS", EmitDefaultValue = false)]
        public string COORDSYS { get; set; }

        /// <summary>
        /// Gets or Sets COORD
        /// </summary>
        [DataMember(Name = "COORD", EmitDefaultValue = false)]
        public List<Coord> COORD { get; set; }

        /// <summary>
        /// Gets or Sets ADDRESS
        /// </summary>
        [DataMember(Name = "ADDRESS", EmitDefaultValue = false)]
        public List<string> ADDRESS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  LOC_ID: ").Append(LOC_ID).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  HEIGHT_ROLE: ").Append(HEIGHT_ROLE).Append("\n");
            sb.Append("  COORDSYS: ").Append(COORDSYS).Append("\n");
            sb.Append("  COORD: ").Append(COORD).Append("\n");
            sb.Append("  ADDRESS: ").Append(ADDRESS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
