/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Etype
    /// </summary>
    [DataContract(Name = "etype")]
    public partial class Etype : IValidatableObject
    {
        /// <summary>
        /// Le champ peut ne pas être interprété ou renseigné avec une valeur comme &#39;UKN&#39; &#x3D; &#39;UNKOWN&#39; A constituer depuis ref_mapping_EMSI&lt;ETYPE&gt;&lt;CATEGORY&gt;_NEXSIS
        /// </summary>
        /// <value>Le champ peut ne pas être interprété ou renseigné avec une valeur comme &#39;UKN&#39; &#x3D; &#39;UNKOWN&#39; A constituer depuis ref_mapping_EMSI&lt;ETYPE&gt;&lt;CATEGORY&gt;_NEXSIS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CATEGORYEnum
        {
            /// <summary>
            /// Enum ASB for value: ASB
            /// </summary>
            [EnumMember(Value = "ASB")]
            ASB = 1,

            /// <summary>
            /// Enum ASR for value: ASR
            /// </summary>
            [EnumMember(Value = "ASR")]
            ASR = 2,

            /// <summary>
            /// Enum EXP for value: EXP
            /// </summary>
            [EnumMember(Value = "EXP")]
            EXP = 3,

            /// <summary>
            /// Enum FIR for value: FIR
            /// </summary>
            [EnumMember(Value = "FIR")]
            FIR = 4,

            /// <summary>
            /// Enum FLD for value: FLD
            /// </summary>
            [EnumMember(Value = "FLD")]
            FLD = 5,

            /// <summary>
            /// Enum GND for value: GND
            /// </summary>
            [EnumMember(Value = "GND")]
            GND = 6,

            /// <summary>
            /// Enum HLT for value: HLT
            /// </summary>
            [EnumMember(Value = "HLT")]
            HLT = 7,

            /// <summary>
            /// Enum POL for value: POL
            /// </summary>
            [EnumMember(Value = "POL")]
            POL = 8,

            /// <summary>
            /// Enum PSW for value: PSW
            /// </summary>
            [EnumMember(Value = "PSW")]
            PSW = 9,

            /// <summary>
            /// Enum TRP for value: TRP
            /// </summary>
            [EnumMember(Value = "TRP")]
            TRP = 10,

            /// <summary>
            /// Enum ASBABV for value: ASB/ABV
            /// </summary>
            [EnumMember(Value = "ASB/ABV")]
            ASBABV = 11,

            /// <summary>
            /// Enum ASRATM for value: ASR/ATM
            /// </summary>
            [EnumMember(Value = "ASR/ATM")]
            ASRATM = 12,

            /// <summary>
            /// Enum ASRHGT for value: ASR/HGT
            /// </summary>
            [EnumMember(Value = "ASR/HGT")]
            ASRHGT = 13,

            /// <summary>
            /// Enum ASRICE for value: ASR/ICE
            /// </summary>
            [EnumMember(Value = "ASR/ICE")]
            ASRICE = 14,

            /// <summary>
            /// Enum ASRMAR for value: ASR/MAR
            /// </summary>
            [EnumMember(Value = "ASR/MAR")]
            ASRMAR = 15,

            /// <summary>
            /// Enum ASRSIL for value: ASR/SIL
            /// </summary>
            [EnumMember(Value = "ASR/SIL")]
            ASRSIL = 16,

            /// <summary>
            /// Enum ASRTRP for value: ASR/TRP
            /// </summary>
            [EnumMember(Value = "ASR/TRP")]
            ASRTRP = 17,

            /// <summary>
            /// Enum ASRUDG for value: ASR/UDG
            /// </summary>
            [EnumMember(Value = "ASR/UDG")]
            ASRUDG = 18,

            /// <summary>
            /// Enum ASRWAT for value: ASR/WAT
            /// </summary>
            [EnumMember(Value = "ASR/WAT")]
            ASRWAT = 19,

            /// <summary>
            /// Enum EXPAER for value: EXP/AER
            /// </summary>
            [EnumMember(Value = "EXP/AER")]
            EXPAER = 20,

            /// <summary>
            /// Enum EXPAMM for value: EXP/AMM
            /// </summary>
            [EnumMember(Value = "EXP/AMM")]
            EXPAMM = 21,

            /// <summary>
            /// Enum EXPBLEVE for value: EXP/BLEVE
            /// </summary>
            [EnumMember(Value = "EXP/BLEVE")]
            EXPBLEVE = 22,

            /// <summary>
            /// Enum EXPCHM for value: EXP/CHM
            /// </summary>
            [EnumMember(Value = "EXP/CHM")]
            EXPCHM = 23,

            /// <summary>
            /// Enum EXPCYL for value: EXP/CYL
            /// </summary>
            [EnumMember(Value = "EXP/CYL")]
            EXPCYL = 24,

            /// <summary>
            /// Enum EXPDST for value: EXP/DST
            /// </summary>
            [EnumMember(Value = "EXP/DST")]
            EXPDST = 25,

            /// <summary>
            /// Enum EXPFRW for value: EXP/FRW
            /// </summary>
            [EnumMember(Value = "EXP/FRW")]
            EXPFRW = 26,

            /// <summary>
            /// Enum EXPGAS for value: EXP/GAS
            /// </summary>
            [EnumMember(Value = "EXP/GAS")]
            EXPGAS = 27,

            /// <summary>
            /// Enum EXPHGHFLM for value: EXP/HGHFLM
            /// </summary>
            [EnumMember(Value = "EXP/HGHFLM")]
            EXPHGHFLM = 28,

            /// <summary>
            /// Enum EXPHPP for value: EXP/HPP
            /// </summary>
            [EnumMember(Value = "EXP/HPP")]
            EXPHPP = 29,

            /// <summary>
            /// Enum EXPIMP for value: EXP/IMP
            /// </summary>
            [EnumMember(Value = "EXP/IMP")]
            EXPIMP = 30,

            /// <summary>
            /// Enum EXPLPG for value: EXP/LPG
            /// </summary>
            [EnumMember(Value = "EXP/LPG")]
            EXPLPG = 31,

            /// <summary>
            /// Enum EXPNUK for value: EXP/NUK
            /// </summary>
            [EnumMember(Value = "EXP/NUK")]
            EXPNUK = 32,

            /// <summary>
            /// Enum EXPPRD for value: EXP/PRD
            /// </summary>
            [EnumMember(Value = "EXP/PRD")]
            EXPPRD = 33,

            /// <summary>
            /// Enum EXPUKN for value: EXP/UKN
            /// </summary>
            [EnumMember(Value = "EXP/UKN")]
            EXPUKN = 34,

            /// <summary>
            /// Enum FIRCLA for value: FIR/CLA
            /// </summary>
            [EnumMember(Value = "FIR/CLA")]
            FIRCLA = 35,

            /// <summary>
            /// Enum FIRCLB for value: FIR/CLB
            /// </summary>
            [EnumMember(Value = "FIR/CLB")]
            FIRCLB = 36,

            /// <summary>
            /// Enum FIRCLC for value: FIR/CLC
            /// </summary>
            [EnumMember(Value = "FIR/CLC")]
            FIRCLC = 37,

            /// <summary>
            /// Enum FIRCLD for value: FIR/CLD
            /// </summary>
            [EnumMember(Value = "FIR/CLD")]
            FIRCLD = 38,

            /// <summary>
            /// Enum FIRUKN for value: FIR/UKN
            /// </summary>
            [EnumMember(Value = "FIR/UKN")]
            FIRUKN = 39,

            /// <summary>
            /// Enum FLDFLS for value: FLD/FLS
            /// </summary>
            [EnumMember(Value = "FLD/FLS")]
            FLDFLS = 40,

            /// <summary>
            /// Enum FLDPLN for value: FLD/PLN
            /// </summary>
            [EnumMember(Value = "FLD/PLN")]
            FLDPLN = 41,

            /// <summary>
            /// Enum FLDTID for value: FLD/TID
            /// </summary>
            [EnumMember(Value = "FLD/TID")]
            FLDTID = 42,

            /// <summary>
            /// Enum GNDAVL for value: GND/AVL
            /// </summary>
            [EnumMember(Value = "GND/AVL")]
            GNDAVL = 43,

            /// <summary>
            /// Enum GNDEQK for value: GND/EQK
            /// </summary>
            [EnumMember(Value = "GND/EQK")]
            GNDEQK = 44,

            /// <summary>
            /// Enum GNDGEY for value: GND/GEY
            /// </summary>
            [EnumMember(Value = "GND/GEY")]
            GNDGEY = 45,

            /// <summary>
            /// Enum GNDLDS for value: GND/LDS
            /// </summary>
            [EnumMember(Value = "GND/LDS")]
            GNDLDS = 46,

            /// <summary>
            /// Enum GNDMUD for value: GND/MUD
            /// </summary>
            [EnumMember(Value = "GND/MUD")]
            GNDMUD = 47,

            /// <summary>
            /// Enum GNDSUB for value: GND/SUB
            /// </summary>
            [EnumMember(Value = "GND/SUB")]
            GNDSUB = 48,

            /// <summary>
            /// Enum GNDVUL for value: GND/VUL
            /// </summary>
            [EnumMember(Value = "GND/VUL")]
            GNDVUL = 49,

            /// <summary>
            /// Enum HLTEPI for value: HLT/EPI
            /// </summary>
            [EnumMember(Value = "HLT/EPI")]
            HLTEPI = 50,

            /// <summary>
            /// Enum HLTFMN for value: HLT/FMN
            /// </summary>
            [EnumMember(Value = "HLT/FMN")]
            HLTFMN = 51,

            /// <summary>
            /// Enum HLTNDS for value: HLT/NDS
            /// </summary>
            [EnumMember(Value = "HLT/NDS")]
            HLTNDS = 52,

            /// <summary>
            /// Enum POLBIO for value: POL/BIO
            /// </summary>
            [EnumMember(Value = "POL/BIO")]
            POLBIO = 53,

            /// <summary>
            /// Enum POLCHM for value: POL/CHM
            /// </summary>
            [EnumMember(Value = "POL/CHM")]
            POLCHM = 54,

            /// <summary>
            /// Enum POLNUK for value: POL/NUK
            /// </summary>
            [EnumMember(Value = "POL/NUK")]
            POLNUK = 55,

            /// <summary>
            /// Enum POLRAD for value: POL/RAD
            /// </summary>
            [EnumMember(Value = "POL/RAD")]
            POLRAD = 56,

            /// <summary>
            /// Enum PSWALM for value: PSW/ALM
            /// </summary>
            [EnumMember(Value = "PSW/ALM")]
            PSWALM = 57,

            /// <summary>
            /// Enum PSWASY for value: PSW/ASY
            /// </summary>
            [EnumMember(Value = "PSW/ASY")]
            PSWASY = 58,

            /// <summary>
            /// Enum PSWDEM for value: PSW/DEM
            /// </summary>
            [EnumMember(Value = "PSW/DEM")]
            PSWDEM = 59,

            /// <summary>
            /// Enum PSWIMM for value: PSW/IMM
            /// </summary>
            [EnumMember(Value = "PSW/IMM")]
            PSWIMM = 60,

            /// <summary>
            /// Enum PSWMEV for value: PSW/MEV
            /// </summary>
            [EnumMember(Value = "PSW/MEV")]
            PSWMEV = 61,

            /// <summary>
            /// Enum PSWMIS for value: PSW/MIS
            /// </summary>
            [EnumMember(Value = "PSW/MIS")]
            PSWMIS = 62,

            /// <summary>
            /// Enum PSWPKG for value: PSW/PKG
            /// </summary>
            [EnumMember(Value = "PSW/PKG")]
            PSWPKG = 63,

            /// <summary>
            /// Enum PSWPRO for value: PSW/PRO
            /// </summary>
            [EnumMember(Value = "PSW/PRO")]
            PSWPRO = 64,

            /// <summary>
            /// Enum PSWPRSUIT for value: PSW/PRSUIT
            /// </summary>
            [EnumMember(Value = "PSW/PRSUIT")]
            PSWPRSUIT = 65,

            /// <summary>
            /// Enum PSWRIOT for value: PSW/RIOT
            /// </summary>
            [EnumMember(Value = "PSW/RIOT")]
            PSWRIOT = 66,

            /// <summary>
            /// Enum PSWSUS for value: PSW/SUS
            /// </summary>
            [EnumMember(Value = "PSW/SUS")]
            PSWSUS = 67,

            /// <summary>
            /// Enum PSWWNG for value: PSW/WNG
            /// </summary>
            [EnumMember(Value = "PSW/WNG")]
            PSWWNG = 68,

            /// <summary>
            /// Enum TRPBRK for value: TRP/BRK
            /// </summary>
            [EnumMember(Value = "TRP/BRK")]
            TRPBRK = 69,

            /// <summary>
            /// Enum TRPCOL for value: TRP/COL
            /// </summary>
            [EnumMember(Value = "TRP/COL")]
            TRPCOL = 70,

            /// <summary>
            /// Enum TRPCRS for value: TRP/CRS
            /// </summary>
            [EnumMember(Value = "TRP/CRS")]
            TRPCRS = 71
        }

        /// <summary>
        /// Dans de futures versions de NexSIS, les demandes de concours seront diffusées à plusieurs partenaires. Seul le système de la force concernée par la demande de concours devra répondre effectivement à la demande. Ce système de la force concernée sera identifié comme le \&quot;concourant\&quot; à la demande de concours. Le libellé du champ ACTOR permet d&#39;identifier le concourant souhaité dans la demande de concours. Pour les premières implémentations du contrat d&#39;interface 15-18, il n&#39;y a pas de nécessité pour les systèmes récepteurs de filtrer les demandes de concours reçues via le Hub Santé. Le champ MISSION TYPE permet en complément d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. Le transcodage entre ces deux nomenclature est décrit dans l&#39;annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;
        /// </summary>
        /// <value>Dans de futures versions de NexSIS, les demandes de concours seront diffusées à plusieurs partenaires. Seul le système de la force concernée par la demande de concours devra répondre effectivement à la demande. Ce système de la force concernée sera identifié comme le \&quot;concourant\&quot; à la demande de concours. Le libellé du champ ACTOR permet d&#39;identifier le concourant souhaité dans la demande de concours. Pour les premières implémentations du contrat d&#39;interface 15-18, il n&#39;y a pas de nécessité pour les systèmes récepteurs de filtrer les demandes de concours reçues via le Hub Santé. Le champ MISSION TYPE permet en complément d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. Le transcodage entre ces deux nomenclature est décrit dans l&#39;annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ACTOREnum
        {
            /// <summary>
            /// Enum ANI for value: ANI
            /// </summary>
            [EnumMember(Value = "ANI")]
            ANI = 1,

            /// <summary>
            /// Enum BEV for value: BEV
            /// </summary>
            [EnumMember(Value = "BEV")]
            BEV = 2,

            /// <summary>
            /// Enum PPL for value: PPL
            /// </summary>
            [EnumMember(Value = "PPL")]
            PPL = 3,

            /// <summary>
            /// Enum VEH for value: VEH
            /// </summary>
            [EnumMember(Value = "VEH")]
            VEH = 4,

            /// <summary>
            /// Enum ANICON for value: ANI/CON
            /// </summary>
            [EnumMember(Value = "ANI/CON")]
            ANICON = 5,

            /// <summary>
            /// Enum ANIDEA for value: ANI/DEA
            /// </summary>
            [EnumMember(Value = "ANI/DEA")]
            ANIDEA = 6,

            /// <summary>
            /// Enum ANIDGR for value: ANI/DGR
            /// </summary>
            [EnumMember(Value = "ANI/DGR")]
            ANIDGR = 7,

            /// <summary>
            /// Enum ANIFRM for value: ANI/FRM
            /// </summary>
            [EnumMember(Value = "ANI/FRM")]
            ANIFRM = 8,

            /// <summary>
            /// Enum ANIHRD for value: ANI/HRD
            /// </summary>
            [EnumMember(Value = "ANI/HRD")]
            ANIHRD = 9,

            /// <summary>
            /// Enum ANIINJ for value: ANI/INJ
            /// </summary>
            [EnumMember(Value = "ANI/INJ")]
            ANIINJ = 10,

            /// <summary>
            /// Enum ANILIV for value: ANI/LIV
            /// </summary>
            [EnumMember(Value = "ANI/LIV")]
            ANILIV = 11,

            /// <summary>
            /// Enum ANIPET for value: ANI/PET
            /// </summary>
            [EnumMember(Value = "ANI/PET")]
            ANIPET = 12,

            /// <summary>
            /// Enum ANIPRO for value: ANI/PRO
            /// </summary>
            [EnumMember(Value = "ANI/PRO")]
            ANIPRO = 13,

            /// <summary>
            /// Enum ANISPC for value: ANI/SPC
            /// </summary>
            [EnumMember(Value = "ANI/SPC")]
            ANISPC = 14,

            /// <summary>
            /// Enum ANIWLD for value: ANI/WLD
            /// </summary>
            [EnumMember(Value = "ANI/WLD")]
            ANIWLD = 15,

            /// <summary>
            /// Enum BEVASR for value: BEV/ASR
            /// </summary>
            [EnumMember(Value = "BEV/ASR")]
            BEVASR = 16,

            /// <summary>
            /// Enum BEVIND for value: BEV/IND
            /// </summary>
            [EnumMember(Value = "BEV/IND")]
            BEVIND = 17,

            /// <summary>
            /// Enum BEVNRES for value: BEV/NRES
            /// </summary>
            [EnumMember(Value = "BEV/NRES")]
            BEVNRES = 18,

            /// <summary>
            /// Enum BEVOFF for value: BEV/OFF
            /// </summary>
            [EnumMember(Value = "BEV/OFF")]
            BEVOFF = 19,

            /// <summary>
            /// Enum BEVOTH for value: BEV/OTH
            /// </summary>
            [EnumMember(Value = "BEV/OTH")]
            BEVOTH = 20,

            /// <summary>
            /// Enum BEVRESDW for value: BEV/RESDW
            /// </summary>
            [EnumMember(Value = "BEV/RESDW")]
            BEVRESDW = 21,

            /// <summary>
            /// Enum BEVRESIN for value: BEV/RESIN
            /// </summary>
            [EnumMember(Value = "BEV/RESIN")]
            BEVRESIN = 22,

            /// <summary>
            /// Enum BEVRESINT for value: BEV/RESINT
            /// </summary>
            [EnumMember(Value = "BEV/RESINT")]
            BEVRESINT = 23,

            /// <summary>
            /// Enum BEVRESOTH for value: BEV/RESOTH
            /// </summary>
            [EnumMember(Value = "BEV/RESOTH")]
            BEVRESOTH = 24,

            /// <summary>
            /// Enum BEVSHP for value: BEV/SHP
            /// </summary>
            [EnumMember(Value = "BEV/SHP")]
            BEVSHP = 25,

            /// <summary>
            /// Enum PPL1 for value: PPL/1
            /// </summary>
            [EnumMember(Value = "PPL/1")]
            PPL1 = 26,

            /// <summary>
            /// Enum PPLADU for value: PPL/ADU
            /// </summary>
            [EnumMember(Value = "PPL/ADU")]
            PPLADU = 27,

            /// <summary>
            /// Enum PPLCHD for value: PPL/CHD
            /// </summary>
            [EnumMember(Value = "PPL/CHD")]
            PPLCHD = 28,

            /// <summary>
            /// Enum PPLCNT for value: PPL/CNT
            /// </summary>
            [EnumMember(Value = "PPL/CNT")]
            PPLCNT = 29,

            /// <summary>
            /// Enum PPLDED for value: PPL/DED
            /// </summary>
            [EnumMember(Value = "PPL/DED")]
            PPLDED = 30,

            /// <summary>
            /// Enum PPLEVC for value: PPL/EVC
            /// </summary>
            [EnumMember(Value = "PPL/EVC")]
            PPLEVC = 31,

            /// <summary>
            /// Enum PPLGND for value: PPL/GND
            /// </summary>
            [EnumMember(Value = "PPL/GND")]
            PPLGND = 32,

            /// <summary>
            /// Enum PPLGRP for value: PPL/GRP
            /// </summary>
            [EnumMember(Value = "PPL/GRP")]
            PPLGRP = 33,

            /// <summary>
            /// Enum PPLHST for value: PPL/HST
            /// </summary>
            [EnumMember(Value = "PPL/HST")]
            PPLHST = 34,

            /// <summary>
            /// Enum PPLINT for value: PPL/INT
            /// </summary>
            [EnumMember(Value = "PPL/INT")]
            PPLINT = 35,

            /// <summary>
            /// Enum PPLOTH for value: PPL/OTH
            /// </summary>
            [EnumMember(Value = "PPL/OTH")]
            PPLOTH = 36,

            /// <summary>
            /// Enum PPLPRS for value: PPL/PRS
            /// </summary>
            [EnumMember(Value = "PPL/PRS")]
            PPLPRS = 37,

            /// <summary>
            /// Enum PPLSNS for value: PPL/SNS
            /// </summary>
            [EnumMember(Value = "PPL/SNS")]
            PPLSNS = 38,

            /// <summary>
            /// Enum PPLVIO for value: PPL/VIO
            /// </summary>
            [EnumMember(Value = "PPL/VIO")]
            PPLVIO = 39,

            /// <summary>
            /// Enum PPLVLN for value: PPL/VLN
            /// </summary>
            [EnumMember(Value = "PPL/VLN")]
            PPLVLN = 40,

            /// <summary>
            /// Enum PPLWTN for value: PPL/WTN
            /// </summary>
            [EnumMember(Value = "PPL/WTN")]
            PPLWTN = 41,

            /// <summary>
            /// Enum PPLCHDBAB for value: PPL/CHD/BAB
            /// </summary>
            [EnumMember(Value = "PPL/CHD/BAB")]
            PPLCHDBAB = 42,

            /// <summary>
            /// Enum PPLCHDCHILD for value: PPL/CHD/CHILD
            /// </summary>
            [EnumMember(Value = "PPL/CHD/CHILD")]
            PPLCHDCHILD = 43,

            /// <summary>
            /// Enum PPLCHDINF for value: PPL/CHD/INF
            /// </summary>
            [EnumMember(Value = "PPL/CHD/INF")]
            PPLCHDINF = 44,

            /// <summary>
            /// Enum PPLCHDYOUTH for value: PPL/CHD/YOUTH
            /// </summary>
            [EnumMember(Value = "PPL/CHD/YOUTH")]
            PPLCHDYOUTH = 45,

            /// <summary>
            /// Enum PPLGNDFML for value: PPL/GND/FML
            /// </summary>
            [EnumMember(Value = "PPL/GND/FML")]
            PPLGNDFML = 46,

            /// <summary>
            /// Enum PPLGNDMAL for value: PPL/GND/MAL
            /// </summary>
            [EnumMember(Value = "PPL/GND/MAL")]
            PPLGNDMAL = 47,

            /// <summary>
            /// Enum PPLGNDUND for value: PPL/GND/UND
            /// </summary>
            [EnumMember(Value = "PPL/GND/UND")]
            PPLGNDUND = 48,

            /// <summary>
            /// Enum PPLHSTPCF for value: PPL/HST/PCF
            /// </summary>
            [EnumMember(Value = "PPL/HST/PCF")]
            PPLHSTPCF = 49,

            /// <summary>
            /// Enum PPLHSTSUI for value: PPL/HST/SUI
            /// </summary>
            [EnumMember(Value = "PPL/HST/SUI")]
            PPLHSTSUI = 50,

            /// <summary>
            /// Enum PPLHSTTHT for value: PPL/HST/THT
            /// </summary>
            [EnumMember(Value = "PPL/HST/THT")]
            PPLHSTTHT = 51,

            /// <summary>
            /// Enum PPLHSTWPN for value: PPL/HST/WPN
            /// </summary>
            [EnumMember(Value = "PPL/HST/WPN")]
            PPLHSTWPN = 52,

            /// <summary>
            /// Enum PPLPRSCST for value: PPL/PRS/CST
            /// </summary>
            [EnumMember(Value = "PPL/PRS/CST")]
            PPLPRSCST = 53,

            /// <summary>
            /// Enum PPLPRSESC for value: PPL/PRS/ESC
            /// </summary>
            [EnumMember(Value = "PPL/PRS/ESC")]
            PPLPRSESC = 54,

            /// <summary>
            /// Enum PPLPRSHGS for value: PPL/PRS/HGS
            /// </summary>
            [EnumMember(Value = "PPL/PRS/HGS")]
            PPLPRSHGS = 55,

            /// <summary>
            /// Enum PPLSNSETH for value: PPL/SNS/ETH
            /// </summary>
            [EnumMember(Value = "PPL/SNS/ETH")]
            PPLSNSETH = 56,

            /// <summary>
            /// Enum PPLSNSFOR for value: PPL/SNS/FOR
            /// </summary>
            [EnumMember(Value = "PPL/SNS/FOR")]
            PPLSNSFOR = 57,

            /// <summary>
            /// Enum PPLSNSLAN for value: PPL/SNS/LAN
            /// </summary>
            [EnumMember(Value = "PPL/SNS/LAN")]
            PPLSNSLAN = 58,

            /// <summary>
            /// Enum PPLSNSREL for value: PPL/SNS/REL
            /// </summary>
            [EnumMember(Value = "PPL/SNS/REL")]
            PPLSNSREL = 59,

            /// <summary>
            /// Enum PPLSNSVIP for value: PPL/SNS/VIP
            /// </summary>
            [EnumMember(Value = "PPL/SNS/VIP")]
            PPLSNSVIP = 60,

            /// <summary>
            /// Enum PPLVLNBLD for value: PPL/VLN/BLD
            /// </summary>
            [EnumMember(Value = "PPL/VLN/BLD")]
            PPLVLNBLD = 61,

            /// <summary>
            /// Enum PPLVLNDEF for value: PPL/VLN/DEF
            /// </summary>
            [EnumMember(Value = "PPL/VLN/DEF")]
            PPLVLNDEF = 62,

            /// <summary>
            /// Enum PPLVLNDSB for value: PPL/VLN/DSB
            /// </summary>
            [EnumMember(Value = "PPL/VLN/DSB")]
            PPLVLNDSB = 63,

            /// <summary>
            /// Enum PPLVLNELD for value: PPL/VLN/ELD
            /// </summary>
            [EnumMember(Value = "PPL/VLN/ELD")]
            PPLVLNELD = 64,

            /// <summary>
            /// Enum PPLVLNINJ for value: PPL/VLN/INJ
            /// </summary>
            [EnumMember(Value = "PPL/VLN/INJ")]
            PPLVLNINJ = 65,

            /// <summary>
            /// Enum PPLVLNLDF for value: PPL/VLN/LDF
            /// </summary>
            [EnumMember(Value = "PPL/VLN/LDF")]
            PPLVLNLDF = 66,

            /// <summary>
            /// Enum PPLVLNOBS for value: PPL/VLN/OBS
            /// </summary>
            [EnumMember(Value = "PPL/VLN/OBS")]
            PPLVLNOBS = 67,

            /// <summary>
            /// Enum PPLVLNPAT for value: PPL/VLN/PAT
            /// </summary>
            [EnumMember(Value = "PPL/VLN/PAT")]
            PPLVLNPAT = 68,

            /// <summary>
            /// Enum PPLVLNPGN for value: PPL/VLN/PGN
            /// </summary>
            [EnumMember(Value = "PPL/VLN/PGN")]
            PPLVLNPGN = 69,

            /// <summary>
            /// Enum PPLVLNSLFPRS for value: PPL/VLN/SLFPRS
            /// </summary>
            [EnumMember(Value = "PPL/VLN/SLFPRS")]
            PPLVLNSLFPRS = 70,

            /// <summary>
            /// Enum PPLVLNUNC for value: PPL/VLN/UNC
            /// </summary>
            [EnumMember(Value = "PPL/VLN/UNC")]
            PPLVLNUNC = 71,

            /// <summary>
            /// Enum VEHAIR for value: VEH/AIR
            /// </summary>
            [EnumMember(Value = "VEH/AIR")]
            VEHAIR = 72,

            /// <summary>
            /// Enum VEHANI for value: VEH/ANI
            /// </summary>
            [EnumMember(Value = "VEH/ANI")]
            VEHANI = 73,

            /// <summary>
            /// Enum VEHBIC for value: VEH/BIC
            /// </summary>
            [EnumMember(Value = "VEH/BIC")]
            VEHBIC = 74,

            /// <summary>
            /// Enum VEHCAR for value: VEH/CAR
            /// </summary>
            [EnumMember(Value = "VEH/CAR")]
            VEHCAR = 75,

            /// <summary>
            /// Enum VEHEMG for value: VEH/EMG
            /// </summary>
            [EnumMember(Value = "VEH/EMG")]
            VEHEMG = 76,

            /// <summary>
            /// Enum VEHMBK for value: VEH/MBK
            /// </summary>
            [EnumMember(Value = "VEH/MBK")]
            VEHMBK = 77,

            /// <summary>
            /// Enum VEHMIL for value: VEH/MIL
            /// </summary>
            [EnumMember(Value = "VEH/MIL")]
            VEHMIL = 78,

            /// <summary>
            /// Enum VEHOTH for value: VEH/OTH
            /// </summary>
            [EnumMember(Value = "VEH/OTH")]
            VEHOTH = 79,

            /// <summary>
            /// Enum VEHTRK for value: VEH/TRK
            /// </summary>
            [EnumMember(Value = "VEH/TRK")]
            VEHTRK = 80,

            /// <summary>
            /// Enum VEHTRN for value: VEH/TRN
            /// </summary>
            [EnumMember(Value = "VEH/TRN")]
            VEHTRN = 81,

            /// <summary>
            /// Enum VEHVES for value: VEH/VES
            /// </summary>
            [EnumMember(Value = "VEH/VES")]
            VEHVES = 82,

            /// <summary>
            /// Enum VEHAIRARM for value: VEH/AIR/ARM
            /// </summary>
            [EnumMember(Value = "VEH/AIR/ARM")]
            VEHAIRARM = 83,

            /// <summary>
            /// Enum VEHAIRFLBA for value: VEH/AIR/FLBA
            /// </summary>
            [EnumMember(Value = "VEH/AIR/FLBA")]
            VEHAIRFLBA = 84,

            /// <summary>
            /// Enum VEHAIRFRG for value: VEH/AIR/FRG
            /// </summary>
            [EnumMember(Value = "VEH/AIR/FRG")]
            VEHAIRFRG = 85,

            /// <summary>
            /// Enum VEHAIRFXBA for value: VEH/AIR/FXBA
            /// </summary>
            [EnumMember(Value = "VEH/AIR/FXBA")]
            VEHAIRFXBA = 86,

            /// <summary>
            /// Enum VEHAIRGLD for value: VEH/AIR/GLD
            /// </summary>
            [EnumMember(Value = "VEH/AIR/GLD")]
            VEHAIRGLD = 87,

            /// <summary>
            /// Enum VEHAIRHEL for value: VEH/AIR/HEL
            /// </summary>
            [EnumMember(Value = "VEH/AIR/HEL")]
            VEHAIRHEL = 88,

            /// <summary>
            /// Enum VEHAIRHVY for value: VEH/AIR/HVY
            /// </summary>
            [EnumMember(Value = "VEH/AIR/HVY")]
            VEHAIRHVY = 89,

            /// <summary>
            /// Enum VEHAIRJET for value: VEH/AIR/JET
            /// </summary>
            [EnumMember(Value = "VEH/AIR/JET")]
            VEHAIRJET = 90,

            /// <summary>
            /// Enum VEHAIRLGT for value: VEH/AIR/LGT
            /// </summary>
            [EnumMember(Value = "VEH/AIR/LGT")]
            VEHAIRLGT = 91,

            /// <summary>
            /// Enum VEHAIRMIL for value: VEH/AIR/MIL
            /// </summary>
            [EnumMember(Value = "VEH/AIR/MIL")]
            VEHAIRMIL = 92,

            /// <summary>
            /// Enum VEHAIRORD for value: VEH/AIR/ORD
            /// </summary>
            [EnumMember(Value = "VEH/AIR/ORD")]
            VEHAIRORD = 93,

            /// <summary>
            /// Enum VEHAIROTH for value: VEH/AIR/OTH
            /// </summary>
            [EnumMember(Value = "VEH/AIR/OTH")]
            VEHAIROTH = 94,

            /// <summary>
            /// Enum VEHAIRPAS for value: VEH/AIR/PAS
            /// </summary>
            [EnumMember(Value = "VEH/AIR/PAS")]
            VEHAIRPAS = 95,

            /// <summary>
            /// Enum VEHAIRPRBA for value: VEH/AIR/PRBA
            /// </summary>
            [EnumMember(Value = "VEH/AIR/PRBA")]
            VEHAIRPRBA = 96,

            /// <summary>
            /// Enum VEHAIRPST for value: VEH/AIR/PST
            /// </summary>
            [EnumMember(Value = "VEH/AIR/PST")]
            VEHAIRPST = 97,

            /// <summary>
            /// Enum VEHAIRRKT for value: VEH/AIR/RKT
            /// </summary>
            [EnumMember(Value = "VEH/AIR/RKT")]
            VEHAIRRKT = 98,

            /// <summary>
            /// Enum VEHAIRSEA for value: VEH/AIR/SEA
            /// </summary>
            [EnumMember(Value = "VEH/AIR/SEA")]
            VEHAIRSEA = 99,

            /// <summary>
            /// Enum VEHAIRSNO for value: VEH/AIR/SNO
            /// </summary>
            [EnumMember(Value = "VEH/AIR/SNO")]
            VEHAIRSNO = 100,

            /// <summary>
            /// Enum VEHAIRTNK for value: VEH/AIR/TNK
            /// </summary>
            [EnumMember(Value = "VEH/AIR/TNK")]
            VEHAIRTNK = 101,

            /// <summary>
            /// Enum VEHAIRUAV for value: VEH/AIR/UAV
            /// </summary>
            [EnumMember(Value = "VEH/AIR/UAV")]
            VEHAIRUAV = 102,

            /// <summary>
            /// Enum VEHAIRULG for value: VEH/AIR/ULG
            /// </summary>
            [EnumMember(Value = "VEH/AIR/ULG")]
            VEHAIRULG = 103,

            /// <summary>
            /// Enum VEHOTHHIL for value: VEH/OTH/HIL
            /// </summary>
            [EnumMember(Value = "VEH/OTH/HIL")]
            VEHOTHHIL = 104,

            /// <summary>
            /// Enum VEHOTHSNO for value: VEH/OTH/SNO
            /// </summary>
            [EnumMember(Value = "VEH/OTH/SNO")]
            VEHOTHSNO = 105,

            /// <summary>
            /// Enum VEHTRKART for value: VEH/TRK/ART
            /// </summary>
            [EnumMember(Value = "VEH/TRK/ART")]
            VEHTRKART = 106,

            /// <summary>
            /// Enum VEHTRKEXC for value: VEH/TRK/EXC
            /// </summary>
            [EnumMember(Value = "VEH/TRK/EXC")]
            VEHTRKEXC = 107,

            /// <summary>
            /// Enum VEHTRKHZD for value: VEH/TRK/HZD
            /// </summary>
            [EnumMember(Value = "VEH/TRK/HZD")]
            VEHTRKHZD = 108,

            /// <summary>
            /// Enum VEHTRKNHZ for value: VEH/TRK/NHZ
            /// </summary>
            [EnumMember(Value = "VEH/TRK/NHZ")]
            VEHTRKNHZ = 109,

            /// <summary>
            /// Enum VEHTRKNUK for value: VEH/TRK/NUK
            /// </summary>
            [EnumMember(Value = "VEH/TRK/NUK")]
            VEHTRKNUK = 110,

            /// <summary>
            /// Enum VEHTRKREF for value: VEH/TRK/REF
            /// </summary>
            [EnumMember(Value = "VEH/TRK/REF")]
            VEHTRKREF = 111,

            /// <summary>
            /// Enum VEHTRKUND for value: VEH/TRK/UND
            /// </summary>
            [EnumMember(Value = "VEH/TRK/UND")]
            VEHTRKUND = 112,

            /// <summary>
            /// Enum VEHTRN3RL for value: VEH/TRN/3RL
            /// </summary>
            [EnumMember(Value = "VEH/TRN/3RL")]
            VEHTRN3RL = 113,

            /// <summary>
            /// Enum VEHTRNDSL for value: VEH/TRN/DSL
            /// </summary>
            [EnumMember(Value = "VEH/TRN/DSL")]
            VEHTRNDSL = 114,

            /// <summary>
            /// Enum VEHTRNHZD for value: VEH/TRN/HZD
            /// </summary>
            [EnumMember(Value = "VEH/TRN/HZD")]
            VEHTRNHZD = 115,

            /// <summary>
            /// Enum VEHTRNLOC for value: VEH/TRN/LOC
            /// </summary>
            [EnumMember(Value = "VEH/TRN/LOC")]
            VEHTRNLOC = 116,

            /// <summary>
            /// Enum VEHTRNNHZ for value: VEH/TRN/NHZ
            /// </summary>
            [EnumMember(Value = "VEH/TRN/NHZ")]
            VEHTRNNHZ = 117,

            /// <summary>
            /// Enum VEHTRNNUK for value: VEH/TRN/NUK
            /// </summary>
            [EnumMember(Value = "VEH/TRN/NUK")]
            VEHTRNNUK = 118,

            /// <summary>
            /// Enum VEHTRNOVH for value: VEH/TRN/OVH
            /// </summary>
            [EnumMember(Value = "VEH/TRN/OVH")]
            VEHTRNOVH = 119,

            /// <summary>
            /// Enum VEHTRNPAS for value: VEH/TRN/PAS
            /// </summary>
            [EnumMember(Value = "VEH/TRN/PAS")]
            VEHTRNPAS = 120,

            /// <summary>
            /// Enum VEHTRNREF for value: VEH/TRN/REF
            /// </summary>
            [EnumMember(Value = "VEH/TRN/REF")]
            VEHTRNREF = 121,

            /// <summary>
            /// Enum VEHTRNSTM for value: VEH/TRN/STM
            /// </summary>
            [EnumMember(Value = "VEH/TRN/STM")]
            VEHTRNSTM = 122,

            /// <summary>
            /// Enum VEHTRNTRM for value: VEH/TRN/TRM
            /// </summary>
            [EnumMember(Value = "VEH/TRN/TRM")]
            VEHTRNTRM = 123,

            /// <summary>
            /// Enum VEHTRNUDG for value: VEH/TRN/UDG
            /// </summary>
            [EnumMember(Value = "VEH/TRN/UDG")]
            VEHTRNUDG = 124,

            /// <summary>
            /// Enum VEHTRNUND for value: VEH/TRN/UND
            /// </summary>
            [EnumMember(Value = "VEH/TRN/UND")]
            VEHTRNUND = 125,

            /// <summary>
            /// Enum VEHTRNVIP for value: VEH/TRN/VIP
            /// </summary>
            [EnumMember(Value = "VEH/TRN/VIP")]
            VEHTRNVIP = 126,

            /// <summary>
            /// Enum VEHTRNVLT for value: VEH/TRN/VLT
            /// </summary>
            [EnumMember(Value = "VEH/TRN/VLT")]
            VEHTRNVLT = 127,

            /// <summary>
            /// Enum VEHVESAMB for value: VEH/VES/AMB
            /// </summary>
            [EnumMember(Value = "VEH/VES/AMB")]
            VEHVESAMB = 128,

            /// <summary>
            /// Enum VEHVESBOT for value: VEH/VES/BOT
            /// </summary>
            [EnumMember(Value = "VEH/VES/BOT")]
            VEHVESBOT = 129,

            /// <summary>
            /// Enum VEHVESCNO for value: VEH/VES/CNO
            /// </summary>
            [EnumMember(Value = "VEH/VES/CNO")]
            VEHVESCNO = 130,

            /// <summary>
            /// Enum VEHVESCRG for value: VEH/VES/CRG
            /// </summary>
            [EnumMember(Value = "VEH/VES/CRG")]
            VEHVESCRG = 131,

            /// <summary>
            /// Enum VEHVESDSL for value: VEH/VES/DSL
            /// </summary>
            [EnumMember(Value = "VEH/VES/DSL")]
            VEHVESDSL = 132,

            /// <summary>
            /// Enum VEHVESFLO for value: VEH/VES/FLO
            /// </summary>
            [EnumMember(Value = "VEH/VES/FLO")]
            VEHVESFLO = 133,

            /// <summary>
            /// Enum VEHVESFRY for value: VEH/VES/FRY
            /// </summary>
            [EnumMember(Value = "VEH/VES/FRY")]
            VEHVESFRY = 134,

            /// <summary>
            /// Enum VEHVESHOV for value: VEH/VES/HOV
            /// </summary>
            [EnumMember(Value = "VEH/VES/HOV")]
            VEHVESHOV = 135,

            /// <summary>
            /// Enum VEHVESHZD for value: VEH/VES/HZD
            /// </summary>
            [EnumMember(Value = "VEH/VES/HZD")]
            VEHVESHZD = 136,

            /// <summary>
            /// Enum VEHVESJSK for value: VEH/VES/JSK
            /// </summary>
            [EnumMember(Value = "VEH/VES/JSK")]
            VEHVESJSK = 137,

            /// <summary>
            /// Enum VEHVESLEI for value: VEH/VES/LEI
            /// </summary>
            [EnumMember(Value = "VEH/VES/LEI")]
            VEHVESLEI = 138,

            /// <summary>
            /// Enum VEHVESLIS for value: VEH/VES/LIS
            /// </summary>
            [EnumMember(Value = "VEH/VES/LIS")]
            VEHVESLIS = 139,

            /// <summary>
            /// Enum VEHVESMIL for value: VEH/VES/MIL
            /// </summary>
            [EnumMember(Value = "VEH/VES/MIL")]
            VEHVESMIL = 140,

            /// <summary>
            /// Enum VEHVESMPW for value: VEH/VES/MPW
            /// </summary>
            [EnumMember(Value = "VEH/VES/MPW")]
            VEHVESMPW = 141,

            /// <summary>
            /// Enum VEHVESNHZ for value: VEH/VES/NHZ
            /// </summary>
            [EnumMember(Value = "VEH/VES/NHZ")]
            VEHVESNHZ = 142,

            /// <summary>
            /// Enum VEHVESNUK for value: VEH/VES/NUK
            /// </summary>
            [EnumMember(Value = "VEH/VES/NUK")]
            VEHVESNUK = 143,

            /// <summary>
            /// Enum VEHVESPAS for value: VEH/VES/PAS
            /// </summary>
            [EnumMember(Value = "VEH/VES/PAS")]
            VEHVESPAS = 144,

            /// <summary>
            /// Enum VEHVESPOL for value: VEH/VES/POL
            /// </summary>
            [EnumMember(Value = "VEH/VES/POL")]
            VEHVESPOL = 145,

            /// <summary>
            /// Enum VEHVESPTL for value: VEH/VES/PTL
            /// </summary>
            [EnumMember(Value = "VEH/VES/PTL")]
            VEHVESPTL = 146,

            /// <summary>
            /// Enum VEHVESRSC for value: VEH/VES/RSC
            /// </summary>
            [EnumMember(Value = "VEH/VES/RSC")]
            VEHVESRSC = 147,

            /// <summary>
            /// Enum VEHVESSAI for value: VEH/VES/SAI
            /// </summary>
            [EnumMember(Value = "VEH/VES/SAI")]
            VEHVESSAI = 148,

            /// <summary>
            /// Enum VEHVESSBM for value: VEH/VES/SBM
            /// </summary>
            [EnumMember(Value = "VEH/VES/SBM")]
            VEHVESSBM = 149,

            /// <summary>
            /// Enum VEHVESSINK for value: VEH/VES/SINK
            /// </summary>
            [EnumMember(Value = "VEH/VES/SINK")]
            VEHVESSINK = 150,

            /// <summary>
            /// Enum VEHVESSPC for value: VEH/VES/SPC
            /// </summary>
            [EnumMember(Value = "VEH/VES/SPC")]
            VEHVESSPC = 151,

            /// <summary>
            /// Enum VEHVESSTE for value: VEH/VES/STE
            /// </summary>
            [EnumMember(Value = "VEH/VES/STE")]
            VEHVESSTE = 152,

            /// <summary>
            /// Enum VEHVESSUNK for value: VEH/VES/SUNK
            /// </summary>
            [EnumMember(Value = "VEH/VES/SUNK")]
            VEHVESSUNK = 153,

            /// <summary>
            /// Enum VEHVESUNM for value: VEH/VES/UNM
            /// </summary>
            [EnumMember(Value = "VEH/VES/UNM")]
            VEHVESUNM = 154
        }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ENVEnum
        {
            /// <summary>
            /// Enum CDIS for value: CDIS
            /// </summary>
            [EnumMember(Value = "CDIS")]
            CDIS = 1,

            /// <summary>
            /// Enum DIS for value: DIS
            /// </summary>
            [EnumMember(Value = "DIS")]
            DIS = 2,

            /// <summary>
            /// Enum TER for value: TER
            /// </summary>
            [EnumMember(Value = "TER")]
            TER = 3,

            /// <summary>
            /// Enum CDISRIOT for value: CDIS/RIOT
            /// </summary>
            [EnumMember(Value = "CDIS/RIOT")]
            CDISRIOT = 4,

            /// <summary>
            /// Enum DISCBRN for value: DIS/CBRN
            /// </summary>
            [EnumMember(Value = "DIS/CBRN")]
            DISCBRN = 5,

            /// <summary>
            /// Enum DISERTHQK for value: DIS/ERTHQK
            /// </summary>
            [EnumMember(Value = "DIS/ERTHQK")]
            DISERTHQK = 6,

            /// <summary>
            /// Enum DISFIRE for value: DIS/FIRE
            /// </summary>
            [EnumMember(Value = "DIS/FIRE")]
            DISFIRE = 7,

            /// <summary>
            /// Enum DISFLOOD for value: DIS/FLOOD
            /// </summary>
            [EnumMember(Value = "DIS/FLOOD")]
            DISFLOOD = 8,

            /// <summary>
            /// Enum DISINDHAZ for value: DIS/INDHAZ
            /// </summary>
            [EnumMember(Value = "DIS/INDHAZ")]
            DISINDHAZ = 9,

            /// <summary>
            /// Enum DISLNDSLD for value: DIS/LNDSLD
            /// </summary>
            [EnumMember(Value = "DIS/LNDSLD")]
            DISLNDSLD = 10,

            /// <summary>
            /// Enum DISPWROUT for value: DIS/PWROUT
            /// </summary>
            [EnumMember(Value = "DIS/PWROUT")]
            DISPWROUT = 11,

            /// <summary>
            /// Enum DISRADCNT for value: DIS/RADCNT
            /// </summary>
            [EnumMember(Value = "DIS/RADCNT")]
            DISRADCNT = 12,

            /// <summary>
            /// Enum DISSNOW for value: DIS/SNOW
            /// </summary>
            [EnumMember(Value = "DIS/SNOW")]
            DISSNOW = 13,

            /// <summary>
            /// Enum DISSTCLPS for value: DIS/STCLPS
            /// </summary>
            [EnumMember(Value = "DIS/STCLPS")]
            DISSTCLPS = 14,

            /// <summary>
            /// Enum DISSTORM for value: DIS/STORM
            /// </summary>
            [EnumMember(Value = "DIS/STORM")]
            DISSTORM = 15,

            /// <summary>
            /// Enum DISTRSPRT for value: DIS/TRSPRT
            /// </summary>
            [EnumMember(Value = "DIS/TRSPRT")]
            DISTRSPRT = 16,

            /// <summary>
            /// Enum DISTSNAMI for value: DIS/TSNAMI
            /// </summary>
            [EnumMember(Value = "DIS/TSNAMI")]
            DISTSNAMI = 17
        }


        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/ETYPE/ENV</example>
        */
        [DataMember(Name = "ENV", EmitDefaultValue = false)]
        public ENVEnum? ENV { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Etype" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Etype() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Etype" /> class.
        /// </summary>
        /// <param name="cATEGORY">cATEGORY (required).</param>
        /// <param name="aCTOR">aCTOR (required).</param>
        /// <param name="lOCTYPE">lOCTYPE (required).</param>
        /// <param name="eNV">Optionnel.</param>
        public Etype(List<CATEGORYEnum> cATEGORY = default(List<CATEGORYEnum>), List<ACTOREnum> aCTOR = default(List<ACTOREnum>), List<string> lOCTYPE = default(List<string>), ENVEnum? eNV = default(ENVEnum?))
        {
            // to ensure "cATEGORY" is required (not null)
            if (cATEGORY == null)
            {
                throw new ArgumentNullException("cATEGORY is a required property for Etype and cannot be null");
            }
            this.CATEGORY = cATEGORY;
            // to ensure "aCTOR" is required (not null)
            if (aCTOR == null)
            {
                throw new ArgumentNullException("aCTOR is a required property for Etype and cannot be null");
            }
            this.ACTOR = aCTOR;
            // to ensure "lOCTYPE" is required (not null)
            if (lOCTYPE == null)
            {
                throw new ArgumentNullException("lOCTYPE is a required property for Etype and cannot be null");
            }
            this.LOCTYPE = lOCTYPE;
            this.ENV = eNV;
        }

        /// <summary>
        /// Gets or Sets CATEGORY
        /// </summary>
        [DataMember(Name = "CATEGORY", IsRequired = true, EmitDefaultValue = true)]
        public List<Etype.CATEGORYEnum> CATEGORY { get; set; }

        /// <summary>
        /// Gets or Sets ACTOR
        /// </summary>
        [DataMember(Name = "ACTOR", IsRequired = true, EmitDefaultValue = true)]
        public List<Etype.ACTOREnum> ACTOR { get; set; }

        /// <summary>
        /// Gets or Sets LOCTYPE
        /// </summary>
        [DataMember(Name = "LOCTYPE", IsRequired = true, EmitDefaultValue = true)]
        public List<string> LOCTYPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Etype {\n");
            sb.Append("  CATEGORY: ").Append(CATEGORY).Append("\n");
            sb.Append("  ACTOR: ").Append(ACTOR).Append("\n");
            sb.Append("  LOCTYPE: ").Append(LOCTYPE).Append("\n");
            sb.Append("  ENV: ").Append(ENV).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
