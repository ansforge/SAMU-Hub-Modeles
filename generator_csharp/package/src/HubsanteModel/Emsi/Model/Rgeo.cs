/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Rgeo
    /// </summary>
    [DataContract(Name = "rgeo")]
    public partial class Rgeo : IValidatableObject
    {
        /// <summary>
        /// Type de position indiqué pour la ressource : - ASP : assembly point. Point de rassemblement par défaut des ressources liées à la mission. Peut ne pas être utilisé - CUR : current. Position actualisée de la ressource permettant le suivi géolocalisé des véhicules notamment. Peut ne pas être utilisé - INC : incident. Consigne relative au positionnement de la ressource sur le lieu d&#39;intervention. Peut ne pas être utilisé - STG : staging point. Consigne relative au stationnement des véhicules ou au stockage du matériel par exemple. peut ne pas être utilisé - TGT : targer location. Si renseigné, doit être cohérent avec la position renseignée pour la mission. Plusieurs positions du même type avec des horodatages différents peuvent être fournies. 
        /// </summary>
        /// <value>Type de position indiqué pour la ressource : - ASP : assembly point. Point de rassemblement par défaut des ressources liées à la mission. Peut ne pas être utilisé - CUR : current. Position actualisée de la ressource permettant le suivi géolocalisé des véhicules notamment. Peut ne pas être utilisé - INC : incident. Consigne relative au positionnement de la ressource sur le lieu d&#39;intervention. Peut ne pas être utilisé - STG : staging point. Consigne relative au stationnement des véhicules ou au stockage du matériel par exemple. peut ne pas être utilisé - TGT : targer location. Si renseigné, doit être cohérent avec la position renseignée pour la mission. Plusieurs positions du même type avec des horodatages différents peuvent être fournies. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TYPEEnum
        {
            /// <summary>
            /// Enum ASP for value: ASP
            /// </summary>
            [EnumMember(Value = "ASP")]
            ASP = 1,

            /// <summary>
            /// Enum CUR for value: CUR
            /// </summary>
            [EnumMember(Value = "CUR")]
            CUR = 2,

            /// <summary>
            /// Enum INC for value: INC
            /// </summary>
            [EnumMember(Value = "INC")]
            INC = 3,

            /// <summary>
            /// Enum STG for value: STG
            /// </summary>
            [EnumMember(Value = "STG")]
            STG = 4,

            /// <summary>
            /// Enum TGT for value: TGT
            /// </summary>
            [EnumMember(Value = "TGT")]
            TGT = 5
        }


        /// <summary>
        /// Type de position indiqué pour la ressource : - ASP : assembly point. Point de rassemblement par défaut des ressources liées à la mission. Peut ne pas être utilisé - CUR : current. Position actualisée de la ressource permettant le suivi géolocalisé des véhicules notamment. Peut ne pas être utilisé - INC : incident. Consigne relative au positionnement de la ressource sur le lieu d&#39;intervention. Peut ne pas être utilisé - STG : staging point. Consigne relative au stationnement des véhicules ou au stockage du matériel par exemple. peut ne pas être utilisé - TGT : targer location. Si renseigné, doit être cohérent avec la position renseignée pour la mission. Plusieurs positions du même type avec des horodatages différents peuvent être fournies. 
        /// </summary>
        /// <value>Type de position indiqué pour la ressource : - ASP : assembly point. Point de rassemblement par défaut des ressources liées à la mission. Peut ne pas être utilisé - CUR : current. Position actualisée de la ressource permettant le suivi géolocalisé des véhicules notamment. Peut ne pas être utilisé - INC : incident. Consigne relative au positionnement de la ressource sur le lieu d&#39;intervention. Peut ne pas être utilisé - STG : staging point. Consigne relative au stationnement des véhicules ou au stockage du matériel par exemple. peut ne pas être utilisé - TGT : targer location. Si renseigné, doit être cohérent avec la position renseignée pour la mission. Plusieurs positions du même type avec des horodatages différents peuvent être fournies. </value>
        /*
        <example>example.json#/RESOURCE/0/RGEO/0/TYPE</example>
        */
        [DataMember(Name = "TYPE", IsRequired = true, EmitDefaultValue = true)]
        public TYPEEnum TYPE { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rgeo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Rgeo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rgeo" /> class.
        /// </summary>
        /// <param name="dATIME">Horaire associé à l&#39;arrivée de la ressource sur la position. En fonction du TYPE de position, peut indiquer un horaire de relevé de position, un horaire cible d&#39;arrivée..</param>
        /// <param name="tYPE">Type de position indiqué pour la ressource : - ASP : assembly point. Point de rassemblement par défaut des ressources liées à la mission. Peut ne pas être utilisé - CUR : current. Position actualisée de la ressource permettant le suivi géolocalisé des véhicules notamment. Peut ne pas être utilisé - INC : incident. Consigne relative au positionnement de la ressource sur le lieu d&#39;intervention. Peut ne pas être utilisé - STG : staging point. Consigne relative au stationnement des véhicules ou au stockage du matériel par exemple. peut ne pas être utilisé - TGT : targer location. Si renseigné, doit être cohérent avec la position renseignée pour la mission. Plusieurs positions du même type avec des horodatages différents peuvent être fournies.  (required).</param>
        /// <param name="fREETEXT">Permet de rajouter des précisions sur la localisation de la ressource transmise.</param>
        /// <param name="iD">Identifiant unique de la position dans le système du partenaire.</param>
        /// <param name="pOSITION">pOSITION.</param>
        public Rgeo(DateTime dATIME = default(DateTime), TYPEEnum tYPE = default(TYPEEnum), string fREETEXT = default(string), string iD = default(string), List<Position> pOSITION = default(List<Position>))
        {
            this.TYPE = tYPE;
            this.DATIME = dATIME;
            this.FREETEXT = fREETEXT;
            this.ID = iD;
            this.POSITION = pOSITION;
        }

        /// <summary>
        /// Horaire associé à l&#39;arrivée de la ressource sur la position. En fonction du TYPE de position, peut indiquer un horaire de relevé de position, un horaire cible d&#39;arrivée.
        /// </summary>
        /// <value>Horaire associé à l&#39;arrivée de la ressource sur la position. En fonction du TYPE de position, peut indiquer un horaire de relevé de position, un horaire cible d&#39;arrivée.</value>
        [DataMember(Name = "DATIME", EmitDefaultValue = false)]
        public DateTime DATIME { get; set; }

        /// <summary>
        /// Permet de rajouter des précisions sur la localisation de la ressource transmise
        /// </summary>
        /// <value>Permet de rajouter des précisions sur la localisation de la ressource transmise</value>
        /*
        <example>example.json#/RESOURCE/0/RGEO/0/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Identifiant unique de la position dans le système du partenaire
        /// </summary>
        /// <value>Identifiant unique de la position dans le système du partenaire</value>
        /*
        <example>example.json#/RESOURCE/0/RGEO/0/ID</example>
        */
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets POSITION
        /// </summary>
        [DataMember(Name = "POSITION", EmitDefaultValue = false)]
        public List<Position> POSITION { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Rgeo {\n");
            sb.Append("  DATIME: ").Append(DATIME).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  POSITION: ").Append(POSITION).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DATIME != null) {
                // DATIME (DateTime) pattern
                Regex regexDATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDATIME.Match(this.DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DATIME, must match a pattern of " + regexDATIME, new [] { "DATIME" });
                }
            }

            yield break;
        }
    }

}
