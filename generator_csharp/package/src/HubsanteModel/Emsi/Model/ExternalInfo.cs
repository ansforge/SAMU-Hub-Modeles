/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// ExternalInfo
    /// </summary>
    [DataContract(Name = "externalInfo")]
    public partial class ExternalInfo : IValidatableObject
    {
        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TYPEEnum
        {
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 1,

            /// <summary>
            /// Enum MAP for value: MAP
            /// </summary>
            [EnumMember(Value = "MAP")]
            MAP = 2,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 3,

            /// <summary>
            /// Enum PHOTO for value: PHOTO
            /// </summary>
            [EnumMember(Value = "PHOTO")]
            PHOTO = 4,

            /// <summary>
            /// Enum WEBSIT for value: WEBSIT
            /// </summary>
            [EnumMember(Value = "WEBSIT")]
            WEBSIT = 5
        }


        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/CONTEXT/EXTERNAL_INFO/0/TYPE</example>
        */
        [DataMember(Name = "TYPE", EmitDefaultValue = false)]
        public TYPEEnum? TYPE { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalInfo" /> class.
        /// </summary>
        /// <param name="fREETEXT">Optionnel.</param>
        /// <param name="uRI">Optionnel (required).</param>
        /// <param name="tYPE">Optionnel.</param>
        public ExternalInfo(string fREETEXT = default(string), string uRI = default(string), TYPEEnum? tYPE = default(TYPEEnum?))
        {
            // to ensure "uRI" is required (not null)
            if (uRI == null)
            {
                throw new ArgumentNullException("uRI is a required property for ExternalInfo and cannot be null");
            }
            this.URI = uRI;
            this.FREETEXT = fREETEXT;
            this.TYPE = tYPE;
        }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/CONTEXT/EXTERNAL_INFO/0/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/CONTEXT/EXTERNAL_INFO/0/URI</example>
        */
        [DataMember(Name = "URI", IsRequired = true, EmitDefaultValue = true)]
        public string URI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalInfo {\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
