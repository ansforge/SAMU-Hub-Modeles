/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract(Name = "varEvent")]
    public partial class Event : IValidatableObject
    {
        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SOURCEEnum
        {
            /// <summary>
            /// Enum COMFOR for value: COMFOR
            /// </summary>
            [EnumMember(Value = "COMFOR")]
            COMFOR = 1,

            /// <summary>
            /// Enum HUMDED for value: HUMDED
            /// </summary>
            [EnumMember(Value = "HUMDED")]
            HUMDED = 2,

            /// <summary>
            /// Enum HUMOBS for value: HUMOBS
            /// </summary>
            [EnumMember(Value = "HUMOBS")]
            HUMOBS = 3,

            /// <summary>
            /// Enum SENSOR for value: SENSOR
            /// </summary>
            [EnumMember(Value = "SENSOR")]
            SENSOR = 4
        }


        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/SOURCE</example>
        */
        [DataMember(Name = "SOURCE", EmitDefaultValue = false)]
        public SOURCEEnum? SOURCE { get; set; }
        /// <summary>
        /// Optionnel, Niveau de criticité de l&#39;opération
        /// </summary>
        /// <value>Optionnel, Niveau de criticité de l&#39;opération</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SCALEEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5
        }


        /// <summary>
        /// Optionnel, Niveau de criticité de l&#39;opération
        /// </summary>
        /// <value>Optionnel, Niveau de criticité de l&#39;opération</value>
        /*
        <example>example.json#/EVENT/SCALE</example>
        */
        [DataMember(Name = "SCALE", EmitDefaultValue = false)]
        public SCALEEnum? SCALE { get; set; }
        /// <summary>
        /// Permet de décrire le status de l&#39;affaire en cours. Ce champ suit une nomenclature EMSI. (COM &#x3D; event complete, IPR &#x3D; event in progress, NST &#x3D; event not started, STOP &#x3D; STOP &#x3D; event under control, no need for additional resource) Dans le cadre d&#39;une opération : - si l&#39;opération est encore en cours : rensigner &#39;IPR&#39;, - si le dispatching de moyens est encore en cours ou que seulement des qualifications d&#39;alertes ont été échangées sans aucune décision de régulation &#39;NST&#39;, - si l&#39;opération est en pause/veille : &#39;STOP&#39; - si le message d&#39;échange opérationnel décrit une fin d&#39;opération, à renseigner avec &#39;COM&#39; Un message EMSI-EO sans RESSOURCE ni 
        /// </summary>
        /// <value>Permet de décrire le status de l&#39;affaire en cours. Ce champ suit une nomenclature EMSI. (COM &#x3D; event complete, IPR &#x3D; event in progress, NST &#x3D; event not started, STOP &#x3D; STOP &#x3D; event under control, no need for additional resource) Dans le cadre d&#39;une opération : - si l&#39;opération est encore en cours : rensigner &#39;IPR&#39;, - si le dispatching de moyens est encore en cours ou que seulement des qualifications d&#39;alertes ont été échangées sans aucune décision de régulation &#39;NST&#39;, - si l&#39;opération est en pause/veille : &#39;STOP&#39; - si le message d&#39;échange opérationnel décrit une fin d&#39;opération, à renseigner avec &#39;COM&#39; Un message EMSI-EO sans RESSOURCE ni </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum STATUSEnum
        {
            /// <summary>
            /// Enum COM for value: COM
            /// </summary>
            [EnumMember(Value = "COM")]
            COM = 1,

            /// <summary>
            /// Enum IPR for value: IPR
            /// </summary>
            [EnumMember(Value = "IPR")]
            IPR = 2,

            /// <summary>
            /// Enum NST for value: NST
            /// </summary>
            [EnumMember(Value = "NST")]
            NST = 3,

            /// <summary>
            /// Enum STOP for value: STOP
            /// </summary>
            [EnumMember(Value = "STOP")]
            STOP = 4
        }


        /// <summary>
        /// Permet de décrire le status de l&#39;affaire en cours. Ce champ suit une nomenclature EMSI. (COM &#x3D; event complete, IPR &#x3D; event in progress, NST &#x3D; event not started, STOP &#x3D; STOP &#x3D; event under control, no need for additional resource) Dans le cadre d&#39;une opération : - si l&#39;opération est encore en cours : rensigner &#39;IPR&#39;, - si le dispatching de moyens est encore en cours ou que seulement des qualifications d&#39;alertes ont été échangées sans aucune décision de régulation &#39;NST&#39;, - si l&#39;opération est en pause/veille : &#39;STOP&#39; - si le message d&#39;échange opérationnel décrit une fin d&#39;opération, à renseigner avec &#39;COM&#39; Un message EMSI-EO sans RESSOURCE ni 
        /// </summary>
        /// <value>Permet de décrire le status de l&#39;affaire en cours. Ce champ suit une nomenclature EMSI. (COM &#x3D; event complete, IPR &#x3D; event in progress, NST &#x3D; event not started, STOP &#x3D; STOP &#x3D; event under control, no need for additional resource) Dans le cadre d&#39;une opération : - si l&#39;opération est encore en cours : rensigner &#39;IPR&#39;, - si le dispatching de moyens est encore en cours ou que seulement des qualifications d&#39;alertes ont été échangées sans aucune décision de régulation &#39;NST&#39;, - si l&#39;opération est en pause/veille : &#39;STOP&#39; - si le message d&#39;échange opérationnel décrit une fin d&#39;opération, à renseigner avec &#39;COM&#39; Un message EMSI-EO sans RESSOURCE ni </value>
        /*
        <example>example.json#/EVENT/STATUS</example>
        */
        [DataMember(Name = "STATUS", EmitDefaultValue = false)]
        public STATUSEnum? STATUS { get; set; }
        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RISKASSESMENTEnum
        {
            /// <summary>
            /// Enum NCREA for value: NCREA
            /// </summary>
            [EnumMember(Value = "NCREA")]
            NCREA = 1,

            /// <summary>
            /// Enum DECREA for value: DECREA
            /// </summary>
            [EnumMember(Value = "DECREA")]
            DECREA = 2,

            /// <summary>
            /// Enum STABLE for value: STABLE
            /// </summary>
            [EnumMember(Value = "STABLE")]
            STABLE = 3
        }


        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/RISK_ASSESMENT</example>
        */
        [DataMember(Name = "RISK_ASSESMENT", EmitDefaultValue = false)]
        public RISKASSESMENTEnum? RISK_ASSESMENT { get; set; }
        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CAUSEEnum
        {
            /// <summary>
            /// Enum ACC for value: ACC
            /// </summary>
            [EnumMember(Value = "ACC")]
            ACC = 1,

            /// <summary>
            /// Enum DEL for value: DEL
            /// </summary>
            [EnumMember(Value = "DEL")]
            DEL = 2,

            /// <summary>
            /// Enum NAT for value: NAT
            /// </summary>
            [EnumMember(Value = "NAT")]
            NAT = 3
        }


        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/CAUSE</example>
        */
        [DataMember(Name = "CAUSE", EmitDefaultValue = false)]
        public CAUSEEnum? CAUSE { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Event() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="iD">A renseigner avec l&#39;identifiant local de l&#39;affaire dans le LRM ou NexSIS (required).</param>
        /// <param name="nAME">Optionnel Dans nexSIS; [libelle NF 1 métier] &amp; \&quot; - \&quot; &amp; [libelle TL 1 métier] &amp; \&quot; - \&quot; &amp; [libellé commune].</param>
        /// <param name="mAINEVENTID">A renseigner avec l&#39;identifiant de l&#39;organisation (champ organization du message RC-EDA) suivi de l&#39;identifiant local de l&#39;affaire du partenaire requérant (champ senderCaseId du message RC-EDA). {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.{numéro de dossier}  NB : Si l&#39;initiateur du partage de dossier est le même que l&#39;initiateur du message EMSI, l&#39;EVENT.ID &#x3D; EVENT.MAIN_EVENT_ID.</param>
        /// <param name="eTYPE">eTYPE.</param>
        /// <param name="sOURCE">Optionnel.</param>
        /// <param name="sCALE">Optionnel, Niveau de criticité de l&#39;opération.</param>
        /// <param name="cERTAINTY">Prend une valeur entière entre 0 et 100, et décrit à quel point l&#39;alerte associée à l&#39;événement est fiable Optionnel.</param>
        /// <param name="dECLDATIME">Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date/heure de création de l&#39;affaire ou de l&#39;opération. NexSIS transmettra la date/heure de création de l&#39;opération dans ses systèmes (qui peut diverger de la date/heure de création de l&#39;affaire).</param>
        /// <param name="oCCDATIME">Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date de la première alerte ou la date évaluée de début de la situation d&#39;urgence. Par exemple : Si un incendie est déclaré est 9h02, il a pu démarré à 8h55 par exemple. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale.</param>
        /// <param name="oBSDATIME">Ce champ est idéalement à valoriser avec la date/heure à laquelle l&#39;observation de la situation d&#39;urgence de l&#39;affaire la plus récente a été réalisée. NexSIS transmettra la date/heure d&#39;envoi de la demande de concours dans son système. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale.</param>
        /// <param name="sTATUS">Permet de décrire le status de l&#39;affaire en cours. Ce champ suit une nomenclature EMSI. (COM &#x3D; event complete, IPR &#x3D; event in progress, NST &#x3D; event not started, STOP &#x3D; STOP &#x3D; event under control, no need for additional resource) Dans le cadre d&#39;une opération : - si l&#39;opération est encore en cours : rensigner &#39;IPR&#39;, - si le dispatching de moyens est encore en cours ou que seulement des qualifications d&#39;alertes ont été échangées sans aucune décision de régulation &#39;NST&#39;, - si l&#39;opération est en pause/veille : &#39;STOP&#39; - si le message d&#39;échange opérationnel décrit une fin d&#39;opération, à renseigner avec &#39;COM&#39; Un message EMSI-EO sans RESSOURCE ni .</param>
        /// <param name="rISKASSESMENT">Optionnel.</param>
        /// <param name="rEFERENCE">rEFERENCE.</param>
        /// <param name="cASUALTIES">cASUALTIES.</param>
        /// <param name="eVAC">eVAC.</param>
        /// <param name="eGEO">eGEO.</param>
        /// <param name="cAUSE">Optionnel.</param>
        /// <param name="fREETEXT">Optionnel.</param>
        public Event(string iD = default(string), string nAME = default(string), string mAINEVENTID = default(string), Etype eTYPE = default(Etype), SOURCEEnum? sOURCE = default(SOURCEEnum?), SCALEEnum? sCALE = default(SCALEEnum?), int cERTAINTY = default(int), DateTime dECLDATIME = default(DateTime), DateTime oCCDATIME = default(DateTime), DateTime oBSDATIME = default(DateTime), STATUSEnum? sTATUS = default(STATUSEnum?), RISKASSESMENTEnum? rISKASSESMENT = default(RISKASSESMENTEnum?), List<Reference> rEFERENCE = default(List<Reference>), List<Casualties> cASUALTIES = default(List<Casualties>), List<Evac> eVAC = default(List<Evac>), List<Egeo> eGEO = default(List<Egeo>), CAUSEEnum? cAUSE = default(CAUSEEnum?), string fREETEXT = default(string))
        {
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new ArgumentNullException("iD is a required property for Event and cannot be null");
            }
            this.ID = iD;
            this.NAME = nAME;
            this.MAIN_EVENT_ID = mAINEVENTID;
            this.ETYPE = eTYPE;
            this.SOURCE = sOURCE;
            this.SCALE = sCALE;
            this.CERTAINTY = cERTAINTY;
            this.DECL_DATIME = dECLDATIME;
            this.OCC_DATIME = oCCDATIME;
            this.OBS_DATIME = oBSDATIME;
            this.STATUS = sTATUS;
            this.RISK_ASSESMENT = rISKASSESMENT;
            this.REFERENCE = rEFERENCE;
            this.CASUALTIES = cASUALTIES;
            this.EVAC = eVAC;
            this.EGEO = eGEO;
            this.CAUSE = cAUSE;
            this.FREETEXT = fREETEXT;
        }

        /// <summary>
        /// A renseigner avec l&#39;identifiant local de l&#39;affaire dans le LRM ou NexSIS
        /// </summary>
        /// <value>A renseigner avec l&#39;identifiant local de l&#39;affaire dans le LRM ou NexSIS</value>
        /*
        <example>example.json#/EVENT/ID</example>
        */
        [DataMember(Name = "ID", IsRequired = true, EmitDefaultValue = true)]
        public string ID { get; set; }

        /// <summary>
        /// Optionnel Dans nexSIS; [libelle NF 1 métier] &amp; \&quot; - \&quot; &amp; [libelle TL 1 métier] &amp; \&quot; - \&quot; &amp; [libellé commune]
        /// </summary>
        /// <value>Optionnel Dans nexSIS; [libelle NF 1 métier] &amp; \&quot; - \&quot; &amp; [libelle TL 1 métier] &amp; \&quot; - \&quot; &amp; [libellé commune]</value>
        /*
        <example>example.json#/EVENT/NAME</example>
        */
        [DataMember(Name = "NAME", EmitDefaultValue = false)]
        public string NAME { get; set; }

        /// <summary>
        /// A renseigner avec l&#39;identifiant de l&#39;organisation (champ organization du message RC-EDA) suivi de l&#39;identifiant local de l&#39;affaire du partenaire requérant (champ senderCaseId du message RC-EDA). {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.{numéro de dossier}  NB : Si l&#39;initiateur du partage de dossier est le même que l&#39;initiateur du message EMSI, l&#39;EVENT.ID &#x3D; EVENT.MAIN_EVENT_ID
        /// </summary>
        /// <value>A renseigner avec l&#39;identifiant de l&#39;organisation (champ organization du message RC-EDA) suivi de l&#39;identifiant local de l&#39;affaire du partenaire requérant (champ senderCaseId du message RC-EDA). {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.{numéro de dossier}  NB : Si l&#39;initiateur du partage de dossier est le même que l&#39;initiateur du message EMSI, l&#39;EVENT.ID &#x3D; EVENT.MAIN_EVENT_ID</value>
        /*
        <example>example.json#/EVENT/MAIN_EVENT_ID</example>
        */
        [DataMember(Name = "MAIN_EVENT_ID", EmitDefaultValue = false)]
        public string MAIN_EVENT_ID { get; set; }

        /// <summary>
        /// Gets or Sets ETYPE
        /// </summary>
        [DataMember(Name = "ETYPE", EmitDefaultValue = false)]
        public Etype ETYPE { get; set; }

        /// <summary>
        /// Prend une valeur entière entre 0 et 100, et décrit à quel point l&#39;alerte associée à l&#39;événement est fiable Optionnel
        /// </summary>
        /// <value>Prend une valeur entière entre 0 et 100, et décrit à quel point l&#39;alerte associée à l&#39;événement est fiable Optionnel</value>
        [DataMember(Name = "CERTAINTY", EmitDefaultValue = false)]
        public int CERTAINTY { get; set; }

        /// <summary>
        /// Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date/heure de création de l&#39;affaire ou de l&#39;opération. NexSIS transmettra la date/heure de création de l&#39;opération dans ses systèmes (qui peut diverger de la date/heure de création de l&#39;affaire)
        /// </summary>
        /// <value>Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date/heure de création de l&#39;affaire ou de l&#39;opération. NexSIS transmettra la date/heure de création de l&#39;opération dans ses systèmes (qui peut diverger de la date/heure de création de l&#39;affaire)</value>
        [DataMember(Name = "DECL_DATIME", EmitDefaultValue = false)]
        public DateTime DECL_DATIME { get; set; }

        /// <summary>
        /// Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date de la première alerte ou la date évaluée de début de la situation d&#39;urgence. Par exemple : Si un incendie est déclaré est 9h02, il a pu démarré à 8h55 par exemple. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale
        /// </summary>
        /// <value>Dans le cadre d&#39;une demande de concours, ce champ est valorisé avec la date de la première alerte ou la date évaluée de début de la situation d&#39;urgence. Par exemple : Si un incendie est déclaré est 9h02, il a pu démarré à 8h55 par exemple. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale</value>
        [DataMember(Name = "OCC_DATIME", EmitDefaultValue = false)]
        public DateTime OCC_DATIME { get; set; }

        /// <summary>
        /// Ce champ est idéalement à valoriser avec la date/heure à laquelle l&#39;observation de la situation d&#39;urgence de l&#39;affaire la plus récente a été réalisée. NexSIS transmettra la date/heure d&#39;envoi de la demande de concours dans son système. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale
        /// </summary>
        /// <value>Ce champ est idéalement à valoriser avec la date/heure à laquelle l&#39;observation de la situation d&#39;urgence de l&#39;affaire la plus récente a été réalisée. NexSIS transmettra la date/heure d&#39;envoi de la demande de concours dans son système. NB : temporairement, NexSIS renseignera ce champ avec la date de réception de l&#39;alerte initiale</value>
        [DataMember(Name = "OBS_DATIME", EmitDefaultValue = false)]
        public DateTime OBS_DATIME { get; set; }

        /// <summary>
        /// Gets or Sets REFERENCE
        /// </summary>
        [DataMember(Name = "REFERENCE", EmitDefaultValue = false)]
        public List<Reference> REFERENCE { get; set; }

        /// <summary>
        /// Gets or Sets CASUALTIES
        /// </summary>
        [DataMember(Name = "CASUALTIES", EmitDefaultValue = false)]
        public List<Casualties> CASUALTIES { get; set; }

        /// <summary>
        /// Gets or Sets EVAC
        /// </summary>
        [DataMember(Name = "EVAC", EmitDefaultValue = false)]
        public List<Evac> EVAC { get; set; }

        /// <summary>
        /// Gets or Sets EGEO
        /// </summary>
        [DataMember(Name = "EGEO", EmitDefaultValue = false)]
        public List<Egeo> EGEO { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        /*
        <example>example.json#/EVENT/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  MAIN_EVENT_ID: ").Append(MAIN_EVENT_ID).Append("\n");
            sb.Append("  ETYPE: ").Append(ETYPE).Append("\n");
            sb.Append("  SOURCE: ").Append(SOURCE).Append("\n");
            sb.Append("  SCALE: ").Append(SCALE).Append("\n");
            sb.Append("  CERTAINTY: ").Append(CERTAINTY).Append("\n");
            sb.Append("  DECL_DATIME: ").Append(DECL_DATIME).Append("\n");
            sb.Append("  OCC_DATIME: ").Append(OCC_DATIME).Append("\n");
            sb.Append("  OBS_DATIME: ").Append(OBS_DATIME).Append("\n");
            sb.Append("  STATUS: ").Append(STATUS).Append("\n");
            sb.Append("  RISK_ASSESMENT: ").Append(RISK_ASSESMENT).Append("\n");
            sb.Append("  REFERENCE: ").Append(REFERENCE).Append("\n");
            sb.Append("  CASUALTIES: ").Append(CASUALTIES).Append("\n");
            sb.Append("  EVAC: ").Append(EVAC).Append("\n");
            sb.Append("  EGEO: ").Append(EGEO).Append("\n");
            sb.Append("  CAUSE: ").Append(CAUSE).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DECL_DATIME != null) {
                // DECL_DATIME (DateTime) pattern
                Regex regexDECL_DATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDECL_DATIME.Match(this.DECL_DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DECL_DATIME, must match a pattern of " + regexDECL_DATIME, new [] { "DECL_DATIME" });
                }
            }

            if (this.OCC_DATIME != null) {
                // OCC_DATIME (DateTime) pattern
                Regex regexOCC_DATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexOCC_DATIME.Match(this.OCC_DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OCC_DATIME, must match a pattern of " + regexOCC_DATIME, new [] { "OCC_DATIME" });
                }
            }

            if (this.OBS_DATIME != null) {
                // OBS_DATIME (DateTime) pattern
                Regex regexOBS_DATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexOBS_DATIME.Match(this.OBS_DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OBS_DATIME, must match a pattern of " + regexOBS_DATIME, new [] { "OBS_DATIME" });
                }
            }

            yield break;
        }
    }

}
