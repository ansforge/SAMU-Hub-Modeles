/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Mission
    /// </summary>
    [DataContract(Name = "mission")]
    public partial class Mission : IValidatableObject
    {
        /// <summary>
        /// Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. &#x3D;&gt; La table de transcodage permettant d&#39;identifier les concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;. Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une mission décrivant les opérations en cours : - reprendre la nomenclature EMSI pour caractériser la mission en cours.
        /// </summary>
        /// <value>Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. &#x3D;&gt; La table de transcodage permettant d&#39;identifier les concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;. Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une mission décrivant les opérations en cours : - reprendre la nomenclature EMSI pour caractériser la mission en cours.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TYPEEnum
        {
            /// <summary>
            /// Enum SAVASC for value: SAV/ASC
            /// </summary>
            [EnumMember(Value = "SAV/ASC")]
            SAVASC = 1,

            /// <summary>
            /// Enum FRMEDREGLTN for value: FR_MED/REGLTN
            /// </summary>
            [EnumMember(Value = "FR_MED/REGLTN")]
            FRMEDREGLTN = 2,

            /// <summary>
            /// Enum GENSUPRTN for value: GEN/SUPRTN
            /// </summary>
            [EnumMember(Value = "GEN/SUPRTN")]
            GENSUPRTN = 3,

            /// <summary>
            /// Enum SAVARFRMED for value: SAV/AR/FR_MED
            /// </summary>
            [EnumMember(Value = "SAV/AR/FR_MED")]
            SAVARFRMED = 4,

            /// <summary>
            /// Enum SAVARFRPARAMD for value: SAV/AR/FR_PARAMD
            /// </summary>
            [EnumMember(Value = "SAV/AR/FR_PARAMD")]
            SAVARFRPARAMD = 5,

            /// <summary>
            /// Enum SAV for value: SAV
            /// </summary>
            [EnumMember(Value = "SAV")]
            SAV = 6,

            /// <summary>
            /// Enum GENTRNSPN for value: GEN/TRNSPN
            /// </summary>
            [EnumMember(Value = "GEN/TRNSPN")]
            GENTRNSPN = 7,

            /// <summary>
            /// Enum SAVSARCSL for value: SAV/SARCSL
            /// </summary>
            [EnumMember(Value = "SAV/SARCSL")]
            SAVSARCSL = 8,

            /// <summary>
            /// Enum SAVASCFRPPLLIFT for value: SAV/ASC/FR_PPL/LIFT
            /// </summary>
            [EnumMember(Value = "SAV/ASC/FR_PPL/LIFT")]
            SAVASCFRPPLLIFT = 9,

            /// <summary>
            /// Enum GENRECVRY for value: GEN/RECVRY
            /// </summary>
            [EnumMember(Value = "GEN/RECVRY")]
            GENRECVRY = 10,

            /// <summary>
            /// Enum SAVRHD for value: SAV/RHD
            /// </summary>
            [EnumMember(Value = "SAV/RHD")]
            SAVRHD = 11,

            /// <summary>
            /// Enum FFSTFRFIRE for value: FFST/FR_FIRE
            /// </summary>
            [EnumMember(Value = "FFST/FR_FIRE")]
            FFSTFRFIRE = 12,

            /// <summary>
            /// Enum FSTTRRHAZFRCO for value: FSTT/RRHAZ/FR_CO
            /// </summary>
            [EnumMember(Value = "FSTT/RRHAZ/FR_CO")]
            FSTTRRHAZFRCO = 13,

            /// <summary>
            /// Enum CBRNTSA for value: CBRN/TSA
            /// </summary>
            [EnumMember(Value = "CBRN/TSA")]
            CBRNTSA = 14,

            /// <summary>
            /// Enum INTRECCEFRSMLL for value: INT/RECCE/FR_SMLL
            /// </summary>
            [EnumMember(Value = "INT/RECCE/FR_SMLL")]
            INTRECCEFRSMLL = 15,

            /// <summary>
            /// Enum FSTTTA for value: FSTT/TA
            /// </summary>
            [EnumMember(Value = "FSTT/TA")]
            FSTTTA = 16,

            /// <summary>
            /// Enum SAVARFRPPLGRP for value: SAV/AR/FR_PPL/GRP
            /// </summary>
            [EnumMember(Value = "SAV/AR/FR_PPL/GRP")]
            SAVARFRPPLGRP = 17,

            /// <summary>
            /// Enum INTRECCE for value: INT/RECCE
            /// </summary>
            [EnumMember(Value = "INT/RECCE")]
            INTRECCE = 18,

            /// <summary>
            /// Enum GENTRNSPNFRSECNDRY for value: GEN/TRNSPN/FR_SECNDRY
            /// </summary>
            [EnumMember(Value = "GEN/TRNSPN/FR_SECNDRY")]
            GENTRNSPNFRSECNDRY = 19,

            /// <summary>
            /// Enum OPRLOG for value: OPR/LOG
            /// </summary>
            [EnumMember(Value = "OPR/LOG")]
            OPRLOG = 20,

            /// <summary>
            /// Enum SAVARFRPPLOBS for value: SAV/AR/FR_PPL/OBS
            /// </summary>
            [EnumMember(Value = "SAV/AR/FR_PPL/OBS")]
            SAVARFRPPLOBS = 21,

            /// <summary>
            /// Enum FSTTTAFRCLRACCSS for value: FSTT/TA/FR_CLRACCSS
            /// </summary>
            [EnumMember(Value = "FSTT/TA/FR_CLRACCSS")]
            FSTTTAFRCLRACCSS = 22
        }


        /// <summary>
        /// Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. &#x3D;&gt; La table de transcodage permettant d&#39;identifier les concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;. Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une mission décrivant les opérations en cours : - reprendre la nomenclature EMSI pour caractériser la mission en cours.
        /// </summary>
        /// <value>Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. &#x3D;&gt; La table de transcodage permettant d&#39;identifier les concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;. Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une mission décrivant les opérations en cours : - reprendre la nomenclature EMSI pour caractériser la mission en cours.</value>
        /*
        <example>example.json#/MISSION/0/TYPE</example>
        */
        [DataMember(Name = "TYPE", IsRequired = true, EmitDefaultValue = true)]
        public TYPEEnum TYPE { get; set; }
        /// <summary>
        /// Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn) spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté, en pause pour métier, pas de besoin supplémentaire - COM : événement terminé pour le métier (COMplete) Le status de la mission et celui des RESSOURCE associées doit être cohérent et transcodable avec un status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de concours, le champ doit être valorisé à \&quot;NST\&quot;
        /// </summary>
        /// <value>Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn) spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté, en pause pour métier, pas de besoin supplémentaire - COM : événement terminé pour le métier (COMplete) Le status de la mission et celui des RESSOURCE associées doit être cohérent et transcodable avec un status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de concours, le champ doit être valorisé à \&quot;NST\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum STATUSEnum
        {
            /// <summary>
            /// Enum ABO for value: ABO
            /// </summary>
            [EnumMember(Value = "ABO")]
            ABO = 1,

            /// <summary>
            /// Enum NST for value: NST
            /// </summary>
            [EnumMember(Value = "NST")]
            NST = 2,

            /// <summary>
            /// Enum CANCLD for value: CANCLD
            /// </summary>
            [EnumMember(Value = "CANCLD")]
            CANCLD = 3,

            /// <summary>
            /// Enum COM for value: COM
            /// </summary>
            [EnumMember(Value = "COM")]
            COM = 4,

            /// <summary>
            /// Enum IPR for value: IPR
            /// </summary>
            [EnumMember(Value = "IPR")]
            IPR = 5,

            /// <summary>
            /// Enum PAU for value: PAU
            /// </summary>
            [EnumMember(Value = "PAU")]
            PAU = 6
        }


        /// <summary>
        /// Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn) spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté, en pause pour métier, pas de besoin supplémentaire - COM : événement terminé pour le métier (COMplete) Le status de la mission et celui des RESSOURCE associées doit être cohérent et transcodable avec un status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de concours, le champ doit être valorisé à \&quot;NST\&quot;
        /// </summary>
        /// <value>Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn) spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté, en pause pour métier, pas de besoin supplémentaire - COM : événement terminé pour le métier (COMplete) Le status de la mission et celui des RESSOURCE associées doit être cohérent et transcodable avec un status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de concours, le champ doit être valorisé à \&quot;NST\&quot;</value>
        /*
        <example>example.json#/MISSION/0/STATUS</example>
        */
        [DataMember(Name = "STATUS", IsRequired = true, EmitDefaultValue = true)]
        public STATUSEnum STATUS { get; set; }
        /// <summary>
        /// Indique une échelle de priorité pour la demande de concours. Dans le cadre du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété.
        /// </summary>
        /// <value>Indique une échelle de priorité pour la demande de concours. Dans le cadre du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PRIORITYEnum
        {
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 2,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 3,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 4,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 5,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 6
        }


        /// <summary>
        /// Indique une échelle de priorité pour la demande de concours. Dans le cadre du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété.
        /// </summary>
        /// <value>Indique une échelle de priorité pour la demande de concours. Dans le cadre du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété.</value>
        /*
        <example>example.json#/MISSION/0/PRIORITY</example>
        */
        [DataMember(Name = "PRIORITY", EmitDefaultValue = false)]
        public PRIORITYEnum? PRIORITY { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Mission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Mission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Mission" /> class.
        /// </summary>
        /// <param name="tYPE">Le champ MISSION TYPE permet d&#39;identifier l&#39;effet à obtenir souhaité à partir de la combinaison du code ACTOR et du code TYPE. &#x3D;&gt; La table de transcodage permettant d&#39;identifier les concourants et les effets à obtenir à partir d&#39;un code EMSI est fournie en annexe \&quot;Référentiel Effets à Obtenir - correspondance EMSI\&quot;. Dans le cadre d&#39;une réponse à DC : - reprendre le type de la DC si le code réponse choisi est vien \&quot;VALIDE\&quot; Dans le cadre d&#39;une mission décrivant les opérations en cours : - reprendre la nomenclature EMSI pour caractériser la mission en cours. (required).</param>
        /// <param name="fREETEXT">Contient des commentaires relatifs aux objectifs et  moyens sollicités dans le cadre de la demande de concours. Les équipements supplémentaires souhaités ou le nom/ prénom des patients à prendre en charge peuvent être explicitement indiqués ici..</param>
        /// <param name="iD">Contient un identifiant de demande de concours unique. Cet identifiant sera réutilisable par le partenaire pour répondre à cette demande. Identifiant unique de la mission dans le système du partenaire la conduisant. (required).</param>
        /// <param name="oRGID">Indique l&#39;organisation du partenaire concerné par la Demande de Concours (voir DSF). Le code CRRA ou le code du SIS peut être utilisé. Indique l&#39;organisation du service réalisant la mission.  Dans le cas d&#39;une réponse, c&#39;est l&#39;organisation du concourant qui doit être indiquée. Se référer au DSF pour la structure normée des organisations Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*..</param>
        /// <param name="nAME">Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#DEMANDE_CONCOURS#\&quot;{libelle_cadre_conventionnel}\&quot;#\&quot;{code_cadre_conventionnel}\&quot;#\&quot; où le code_cadre_conventionnel est issue d&#39;une nomenclature CISU-Cadre Conventionnel (A Venir) NB : ce champ est détourné par rapport au standard EMSI pour permettre l&#39;expression d&#39;une demande de concours et indiquer le cadre conventionnel dans lequel elle est effectuée. Pour une réponse à demande de concours : - Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#REPONSE_DEMANDE_CONCOURS#\&quot;{code_reponse}\&quot;#\&quot; où le code_reponse peut prendre les valeurs ACCEPTE, REFUS, PARTIELLE, DIVERGENTE - sinon libre (required).</param>
        /// <param name="sTATUS">Les valeurs possibles avec lesquelles valoriser ce champ sont détaillées au sein d&#39;une nomenclature EMSI - ABO : mission refusée (ABOrted) - CANCLD : mission annulée (CANCeLeD)** - NST : mission non débuté pour le métier (Not STarted) - IPR :  mission débuté pour le métier (In PRogress). la valeur IPR peut être suivi d&#39;une valeur numérique de 00 à 100 (IPRnn) spécifiant le degré d&#39;avancement de la mission. Ce principe n&#39;est pas retenu au sein de NexSIS qui ne transmettra pas d&#39;indication sur le degré d&#39;avancement de la mission via ce champ. - PAU : événement arrêté, en pause pour métier, pas de besoin supplémentaire - COM : événement terminé pour le métier (COMplete) Le status de la mission et celui des RESSOURCE associées doit être cohérent et transcodable avec un status ANTARES (voir DSF)  Dans le cas d&#39;un objet MISSION générique de réponse à demande de concours, le champ doit être valorisé à \&quot;NST\&quot; (required).</param>
        /// <param name="sTARTTIME">- Dans le cadre d&#39;une réponse à Demande de Concours Horraire cible pour l&#39;arrivée sur les lieux décrites (peut diverger de l&#39;horaire demandé) - Dans le cadre d&#39;une mission décrivant les opérations en cours : Horaire effectif de début de la mission.</param>
        /// <param name="eNDTIME">A valoriser selon la catégorie de mission : - Dans le cadre d&#39;une mission de réponse à demande de concours : ne pas renseigner - Dans le cadre d&#39;une mission décrivant les opérations en cours :  Si c&#39;est un déplacement, l&#39;heure d&#39;arrivée, si c&#39;est une prise en charge patient/victime, la fin de la prise en charge..</param>
        /// <param name="rESOURCEID">rESOURCEID.</param>
        /// <param name="pARENTMISSIONID">pARENTMISSIONID.</param>
        /// <param name="cHILDMISSIONID">cHILDMISSIONID.</param>
        /// <param name="mAINMISSIONID">- Dans le cas d&#39;une mission générique de réponse à demande de concours, indiquer l&#39;ID de la mission générique utilisée pour modéliser la demande de concours - Dans le cas d&#39;une mission déclenchée dans le cadre d&#39;une réponse à demande de concours, l&#39;ID de la mission générique de réponse peut être utilisée dans ce champ pour indiquer qu&#39;elle est liée à une réponse.</param>
        /// <param name="pOSITION">pOSITION.</param>
        /// <param name="pRIORITY">Indique une échelle de priorité pour la demande de concours. Dans le cadre du standard EMSI, cette échelle doit être comprise entre 0 et 5. Ce champ peut ne pas être interprété ni alimenté par les LRMs. Dans le cadre d&#39;un échange des opérations, optionnel. Le champ peut ne pas être émis ni interprété..</param>
        public Mission(TYPEEnum tYPE = default(TYPEEnum), string fREETEXT = default(string), string iD = default(string), string oRGID = default(string), string nAME = default(string), STATUSEnum sTATUS = default(STATUSEnum), DateTime sTARTTIME = default(DateTime), DateTime eNDTIME = default(DateTime), List<string> rESOURCEID = default(List<string>), List<string> pARENTMISSIONID = default(List<string>), List<string> cHILDMISSIONID = default(List<string>), string mAINMISSIONID = default(string), Position pOSITION = default(Position), PRIORITYEnum? pRIORITY = default(PRIORITYEnum?))
        {
            this.TYPE = tYPE;
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new ArgumentNullException("iD is a required property for Mission and cannot be null");
            }
            this.ID = iD;
            // to ensure "nAME" is required (not null)
            if (nAME == null)
            {
                throw new ArgumentNullException("nAME is a required property for Mission and cannot be null");
            }
            this.NAME = nAME;
            this.STATUS = sTATUS;
            this.FREETEXT = fREETEXT;
            this.ORG_ID = oRGID;
            this.START_TIME = sTARTTIME;
            this.END_TIME = eNDTIME;
            this.RESOURCE_ID = rESOURCEID;
            this.PARENT_MISSION_ID = pARENTMISSIONID;
            this.CHILD_MISSION_ID = cHILDMISSIONID;
            this.MAIN_MISSION_ID = mAINMISSIONID;
            this.POSITION = pOSITION;
            this.PRIORITY = pRIORITY;
        }

        /// <summary>
        /// Contient des commentaires relatifs aux objectifs et  moyens sollicités dans le cadre de la demande de concours. Les équipements supplémentaires souhaités ou le nom/ prénom des patients à prendre en charge peuvent être explicitement indiqués ici.
        /// </summary>
        /// <value>Contient des commentaires relatifs aux objectifs et  moyens sollicités dans le cadre de la demande de concours. Les équipements supplémentaires souhaités ou le nom/ prénom des patients à prendre en charge peuvent être explicitement indiqués ici.</value>
        /*
        <example>example.json#/MISSION/0/FREETEXT</example>
        */
        [DataMember(Name = "FREETEXT", EmitDefaultValue = false)]
        public string FREETEXT { get; set; }

        /// <summary>
        /// Contient un identifiant de demande de concours unique. Cet identifiant sera réutilisable par le partenaire pour répondre à cette demande. Identifiant unique de la mission dans le système du partenaire la conduisant.
        /// </summary>
        /// <value>Contient un identifiant de demande de concours unique. Cet identifiant sera réutilisable par le partenaire pour répondre à cette demande. Identifiant unique de la mission dans le système du partenaire la conduisant.</value>
        /*
        <example>example.json#/MISSION/0/ID</example>
        */
        [DataMember(Name = "ID", IsRequired = true, EmitDefaultValue = true)]
        public string ID { get; set; }

        /// <summary>
        /// Indique l&#39;organisation du partenaire concerné par la Demande de Concours (voir DSF). Le code CRRA ou le code du SIS peut être utilisé. Indique l&#39;organisation du service réalisant la mission.  Dans le cas d&#39;une réponse, c&#39;est l&#39;organisation du concourant qui doit être indiquée. Se référer au DSF pour la structure normée des organisations Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.
        /// </summary>
        /// <value>Indique l&#39;organisation du partenaire concerné par la Demande de Concours (voir DSF). Le code CRRA ou le code du SIS peut être utilisé. Indique l&#39;organisation du service réalisant la mission.  Dans le cas d&#39;une réponse, c&#39;est l&#39;organisation du concourant qui doit être indiquée. Se référer au DSF pour la structure normée des organisations Le format est le suivant {pays}.{domaine}.{organisation}.{structure interne}*.{unité fonctionnelle}*.</value>
        /*
        <example>example.json#/MISSION/0/ORG_ID</example>
        */
        [DataMember(Name = "ORG_ID", EmitDefaultValue = false)]
        public string ORG_ID { get; set; }

        /// <summary>
        /// Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#DEMANDE_CONCOURS#\&quot;{libelle_cadre_conventionnel}\&quot;#\&quot;{code_cadre_conventionnel}\&quot;#\&quot; où le code_cadre_conventionnel est issue d&#39;une nomenclature CISU-Cadre Conventionnel (A Venir) NB : ce champ est détourné par rapport au standard EMSI pour permettre l&#39;expression d&#39;une demande de concours et indiquer le cadre conventionnel dans lequel elle est effectuée. Pour une réponse à demande de concours : - Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#REPONSE_DEMANDE_CONCOURS#\&quot;{code_reponse}\&quot;#\&quot; où le code_reponse peut prendre les valeurs ACCEPTE, REFUS, PARTIELLE, DIVERGENTE - sinon libre
        /// </summary>
        /// <value>Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#DEMANDE_CONCOURS#\&quot;{libelle_cadre_conventionnel}\&quot;#\&quot;{code_cadre_conventionnel}\&quot;#\&quot; où le code_cadre_conventionnel est issue d&#39;une nomenclature CISU-Cadre Conventionnel (A Venir) NB : ce champ est détourné par rapport au standard EMSI pour permettre l&#39;expression d&#39;une demande de concours et indiquer le cadre conventionnel dans lequel elle est effectuée. Pour une réponse à demande de concours : - Le nom de la mission est construit à partir de l&#39;expression régulière suivante : \&quot;#REPONSE_DEMANDE_CONCOURS#\&quot;{code_reponse}\&quot;#\&quot; où le code_reponse peut prendre les valeurs ACCEPTE, REFUS, PARTIELLE, DIVERGENTE - sinon libre</value>
        /*
        <example>example.json#/MISSION/0/NAME</example>
        */
        [DataMember(Name = "NAME", IsRequired = true, EmitDefaultValue = true)]
        public string NAME { get; set; }

        /// <summary>
        /// - Dans le cadre d&#39;une réponse à Demande de Concours Horraire cible pour l&#39;arrivée sur les lieux décrites (peut diverger de l&#39;horaire demandé) - Dans le cadre d&#39;une mission décrivant les opérations en cours : Horaire effectif de début de la mission
        /// </summary>
        /// <value>- Dans le cadre d&#39;une réponse à Demande de Concours Horraire cible pour l&#39;arrivée sur les lieux décrites (peut diverger de l&#39;horaire demandé) - Dans le cadre d&#39;une mission décrivant les opérations en cours : Horaire effectif de début de la mission</value>
        [DataMember(Name = "START_TIME", EmitDefaultValue = false)]
        public DateTime START_TIME { get; set; }

        /// <summary>
        /// A valoriser selon la catégorie de mission : - Dans le cadre d&#39;une mission de réponse à demande de concours : ne pas renseigner - Dans le cadre d&#39;une mission décrivant les opérations en cours :  Si c&#39;est un déplacement, l&#39;heure d&#39;arrivée, si c&#39;est une prise en charge patient/victime, la fin de la prise en charge.
        /// </summary>
        /// <value>A valoriser selon la catégorie de mission : - Dans le cadre d&#39;une mission de réponse à demande de concours : ne pas renseigner - Dans le cadre d&#39;une mission décrivant les opérations en cours :  Si c&#39;est un déplacement, l&#39;heure d&#39;arrivée, si c&#39;est une prise en charge patient/victime, la fin de la prise en charge.</value>
        [DataMember(Name = "END_TIME", EmitDefaultValue = false)]
        public DateTime END_TIME { get; set; }

        /// <summary>
        /// Gets or Sets RESOURCE_ID
        /// </summary>
        [DataMember(Name = "RESOURCE_ID", EmitDefaultValue = false)]
        public List<string> RESOURCE_ID { get; set; }

        /// <summary>
        /// Gets or Sets PARENT_MISSION_ID
        /// </summary>
        [DataMember(Name = "PARENT_MISSION_ID", EmitDefaultValue = false)]
        public List<string> PARENT_MISSION_ID { get; set; }

        /// <summary>
        /// Gets or Sets CHILD_MISSION_ID
        /// </summary>
        [DataMember(Name = "CHILD_MISSION_ID", EmitDefaultValue = false)]
        public List<string> CHILD_MISSION_ID { get; set; }

        /// <summary>
        /// - Dans le cas d&#39;une mission générique de réponse à demande de concours, indiquer l&#39;ID de la mission générique utilisée pour modéliser la demande de concours - Dans le cas d&#39;une mission déclenchée dans le cadre d&#39;une réponse à demande de concours, l&#39;ID de la mission générique de réponse peut être utilisée dans ce champ pour indiquer qu&#39;elle est liée à une réponse
        /// </summary>
        /// <value>- Dans le cas d&#39;une mission générique de réponse à demande de concours, indiquer l&#39;ID de la mission générique utilisée pour modéliser la demande de concours - Dans le cas d&#39;une mission déclenchée dans le cadre d&#39;une réponse à demande de concours, l&#39;ID de la mission générique de réponse peut être utilisée dans ce champ pour indiquer qu&#39;elle est liée à une réponse</value>
        /*
        <example>example.json#/MISSION/0/MAIN_MISSION_ID</example>
        */
        [DataMember(Name = "MAIN_MISSION_ID", EmitDefaultValue = false)]
        public string MAIN_MISSION_ID { get; set; }

        /// <summary>
        /// Gets or Sets POSITION
        /// </summary>
        [DataMember(Name = "POSITION", EmitDefaultValue = false)]
        public Position POSITION { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Mission {\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  FREETEXT: ").Append(FREETEXT).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ORG_ID: ").Append(ORG_ID).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  STATUS: ").Append(STATUS).Append("\n");
            sb.Append("  START_TIME: ").Append(START_TIME).Append("\n");
            sb.Append("  END_TIME: ").Append(END_TIME).Append("\n");
            sb.Append("  RESOURCE_ID: ").Append(RESOURCE_ID).Append("\n");
            sb.Append("  PARENT_MISSION_ID: ").Append(PARENT_MISSION_ID).Append("\n");
            sb.Append("  CHILD_MISSION_ID: ").Append(CHILD_MISSION_ID).Append("\n");
            sb.Append("  MAIN_MISSION_ID: ").Append(MAIN_MISSION_ID).Append("\n");
            sb.Append("  POSITION: ").Append(POSITION).Append("\n");
            sb.Append("  PRIORITY: ").Append(PRIORITY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.START_TIME != null) {
                // START_TIME (DateTime) pattern
                Regex regexSTART_TIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexSTART_TIME.Match(this.START_TIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for START_TIME, must match a pattern of " + regexSTART_TIME, new [] { "START_TIME" });
                }
            }

            if (this.END_TIME != null) {
                // END_TIME (DateTime) pattern
                Regex regexEND_TIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexEND_TIME.Match(this.END_TIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for END_TIME, must match a pattern of " + regexEND_TIME, new [] { "END_TIME" });
                }
            }

            yield break;
        }
    }

}
