/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract(Name = "contact")]
    public partial class Contact : IValidatableObject
    {
        /// <summary>
        /// Type de contact, voir énumération associée  1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie
        /// </summary>
        /// <value>Type de contact, voir énumération associée  1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TYPEEnum
        {
            /// <summary>
            /// Enum PSTADD for value: PSTADD
            /// </summary>
            [EnumMember(Value = "PSTADD")]
            PSTADD = 1,

            /// <summary>
            /// Enum EMLADD for value: EMLADD
            /// </summary>
            [EnumMember(Value = "EMLADD")]
            EMLADD = 2,

            /// <summary>
            /// Enum IPADD for value: IPADD
            /// </summary>
            [EnumMember(Value = "IPADD")]
            IPADD = 3,

            /// <summary>
            /// Enum FTPADD for value: FTPADD
            /// </summary>
            [EnumMember(Value = "FTPADD")]
            FTPADD = 4,

            /// <summary>
            /// Enum WWWADD for value: WWWADD
            /// </summary>
            [EnumMember(Value = "WWWADD")]
            WWWADD = 5,

            /// <summary>
            /// Enum PHNADD for value: PHNADD
            /// </summary>
            [EnumMember(Value = "PHNADD")]
            PHNADD = 6,

            /// <summary>
            /// Enum FAXADD for value: FAXADD
            /// </summary>
            [EnumMember(Value = "FAXADD")]
            FAXADD = 7,

            /// <summary>
            /// Enum PMRADD for value: PMRADD
            /// </summary>
            [EnumMember(Value = "PMRADD")]
            PMRADD = 8
        }


        /// <summary>
        /// Type de contact, voir énumération associée  1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie
        /// </summary>
        /// <value>Type de contact, voir énumération associée  1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie</value>
        /*
        <example>example.json#/RESOURCE/0/CONTACTS/0/TYPE</example>
        */
        [DataMember(Name = "TYPE", IsRequired = true, EmitDefaultValue = true)]
        public TYPEEnum TYPE { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="tYPE">Type de contact, voir énumération associée  1. PMRADD (si RFGI disponible) 2. PHNADD pour téléphonie (required).</param>
        /// <param name="dETAIL">1. RFGI du moyen NEXSIS (si RFGI disponible) 2. Numéro de téléphone (required).</param>
        public Contact(TYPEEnum tYPE = default(TYPEEnum), string dETAIL = default(string))
        {
            this.TYPE = tYPE;
            // to ensure "dETAIL" is required (not null)
            if (dETAIL == null)
            {
                throw new ArgumentNullException("dETAIL is a required property for Contact and cannot be null");
            }
            this.DETAIL = dETAIL;
        }

        /// <summary>
        /// 1. RFGI du moyen NEXSIS (si RFGI disponible) 2. Numéro de téléphone
        /// </summary>
        /// <value>1. RFGI du moyen NEXSIS (si RFGI disponible) 2. Numéro de téléphone</value>
        /*
        <example>example.json#/RESOURCE/0/CONTACTS/0/DETAIL</example>
        */
        [DataMember(Name = "DETAIL", IsRequired = true, EmitDefaultValue = true)]
        public string DETAIL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("  DETAIL: ").Append(DETAIL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
