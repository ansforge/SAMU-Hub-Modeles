/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Emsi.Client.OpenAPIDateConverter;

namespace HubsanteModel/Emsi.Model
{
    /// <summary>
    /// Casualties
    /// </summary>
    [DataContract(Name = "casualties")]
    public partial class Casualties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Casualties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Casualties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Casualties" /> class.
        /// </summary>
        /// <param name="cONTEXT">Le champ doit être renseigné mais peut ne pas être interprété (required).</param>
        /// <param name="dATIME">Optionnel.</param>
        /// <param name="dECONT">Optionnel.</param>
        /// <param name="tRIAGERED">Optionnel, Triage victime au sens EMSI.</param>
        /// <param name="tRIAGEYELLOW">Optionnel.</param>
        /// <param name="tRIAGEGREEN">Optionnel.</param>
        /// <param name="tRIAGEBLACK">Optionnel.</param>
        /// <param name="mISSING">Optionnel.</param>
        public Casualties(string cONTEXT = default(string), DateTime dATIME = default(DateTime), int dECONT = default(int), int tRIAGERED = default(int), int tRIAGEYELLOW = default(int), int tRIAGEGREEN = default(int), int tRIAGEBLACK = default(int), int mISSING = default(int))
        {
            // to ensure "cONTEXT" is required (not null)
            if (cONTEXT == null)
            {
                throw new ArgumentNullException("cONTEXT is a required property for Casualties and cannot be null");
            }
            this.CONTEXT = cONTEXT;
            this.DATIME = dATIME;
            this.DECONT = dECONT;
            this.TRIAGERED = tRIAGERED;
            this.TRIAGEYELLOW = tRIAGEYELLOW;
            this.TRIAGEGREEN = tRIAGEGREEN;
            this.TRIAGEBLACK = tRIAGEBLACK;
            this.MISSING = mISSING;
        }

        /// <summary>
        /// Le champ doit être renseigné mais peut ne pas être interprété
        /// </summary>
        /// <value>Le champ doit être renseigné mais peut ne pas être interprété</value>
        /*
        <example>example.json#/EVENT/CASUALTIES/0/CONTEXT</example>
        */
        [DataMember(Name = "CONTEXT", IsRequired = true, EmitDefaultValue = true)]
        public string CONTEXT { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "DATIME", EmitDefaultValue = false)]
        public DateTime DATIME { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "DECONT", EmitDefaultValue = false)]
        public int DECONT { get; set; }

        /// <summary>
        /// Optionnel, Triage victime au sens EMSI
        /// </summary>
        /// <value>Optionnel, Triage victime au sens EMSI</value>
        [DataMember(Name = "TRIAGERED", EmitDefaultValue = false)]
        public int TRIAGERED { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "TRIAGEYELLOW", EmitDefaultValue = false)]
        public int TRIAGEYELLOW { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "TRIAGEGREEN", EmitDefaultValue = false)]
        public int TRIAGEGREEN { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "TRIAGEBLACK", EmitDefaultValue = false)]
        public int TRIAGEBLACK { get; set; }

        /// <summary>
        /// Optionnel
        /// </summary>
        /// <value>Optionnel</value>
        [DataMember(Name = "MISSING", EmitDefaultValue = false)]
        public int MISSING { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Casualties {\n");
            sb.Append("  CONTEXT: ").Append(CONTEXT).Append("\n");
            sb.Append("  DATIME: ").Append(DATIME).Append("\n");
            sb.Append("  DECONT: ").Append(DECONT).Append("\n");
            sb.Append("  TRIAGERED: ").Append(TRIAGERED).Append("\n");
            sb.Append("  TRIAGEYELLOW: ").Append(TRIAGEYELLOW).Append("\n");
            sb.Append("  TRIAGEGREEN: ").Append(TRIAGEGREEN).Append("\n");
            sb.Append("  TRIAGEBLACK: ").Append(TRIAGEBLACK).Append("\n");
            sb.Append("  MISSING: ").Append(MISSING).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DATIME != null) {
                // DATIME (DateTime) pattern
                Regex regexDATIME = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDATIME.Match(this.DATIME).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DATIME, must match a pattern of " + regexDATIME, new [] { "DATIME" });
                }
            }

            yield break;
        }
    }

}
