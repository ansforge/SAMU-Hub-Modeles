/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Resources.status.Client.OpenAPIDateConverter;

namespace HubsanteModel/Resources.status.Model
{
    /// <summary>
    /// State
    /// </summary>
    [DataContract(Name = "state")]
    public partial class State : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le statut du vecteur. Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le statut du vecteur. Cf nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DECISION for value: DECISION
            /// </summary>
            [EnumMember(Value = "DECISION")]
            DECISION = 1,

            /// <summary>
            /// Enum DECLENCHE for value: DECLENCHE
            /// </summary>
            [EnumMember(Value = "DECLENCHE")]
            DECLENCHE = 2,

            /// <summary>
            /// Enum DEPART for value: DEPART
            /// </summary>
            [EnumMember(Value = "DEPART")]
            DEPART = 3,

            /// <summary>
            /// Enum ANNULE for value: ANNULE
            /// </summary>
            [EnumMember(Value = "ANNULE")]
            ANNULE = 4,

            /// <summary>
            /// Enum ARRIVEE for value: ARRIVEE
            /// </summary>
            [EnumMember(Value = "ARRIVEE")]
            ARRIVEE = 5,

            /// <summary>
            /// Enum PEC for value: PEC
            /// </summary>
            [EnumMember(Value = "PEC")]
            PEC = 6,

            /// <summary>
            /// Enum BILAN for value: BILAN
            /// </summary>
            [EnumMember(Value = "BILAN")]
            BILAN = 7,

            /// <summary>
            /// Enum ORIENTAT for value: ORIENTAT
            /// </summary>
            [EnumMember(Value = "ORIENTAT")]
            ORIENTAT = 8,

            /// <summary>
            /// Enum TRANSP for value: TRANSP
            /// </summary>
            [EnumMember(Value = "TRANSP")]
            TRANSP = 9,

            /// <summary>
            /// Enum ETAPE1 for value: ETAPE1
            /// </summary>
            [EnumMember(Value = "ETAPE1")]
            ETAPE1 = 10,

            /// <summary>
            /// Enum TRANSP2 for value: TRANSP2
            /// </summary>
            [EnumMember(Value = "TRANSP2")]
            TRANSP2 = 11,

            /// <summary>
            /// Enum ETAPE2 for value: ETAPE2
            /// </summary>
            [EnumMember(Value = "ETAPE2")]
            ETAPE2 = 12,

            /// <summary>
            /// Enum TRANSP3 for value: TRANSP3
            /// </summary>
            [EnumMember(Value = "TRANSP3")]
            TRANSP3 = 13,

            /// <summary>
            /// Enum DESTIN for value: DESTIN
            /// </summary>
            [EnumMember(Value = "DESTIN")]
            DESTIN = 14,

            /// <summary>
            /// Enum FINPEC for value: FINPEC
            /// </summary>
            [EnumMember(Value = "FINPEC")]
            FINPEC = 15,

            /// <summary>
            /// Enum RETOUR for value: RETOUR
            /// </summary>
            [EnumMember(Value = "RETOUR")]
            RETOUR = 16,

            /// <summary>
            /// Enum RETBASE for value: RET-BASE
            /// </summary>
            [EnumMember(Value = "RET-BASE")]
            RETBASE = 17,

            /// <summary>
            /// Enum RENBASE for value: REN-BASE
            /// </summary>
            [EnumMember(Value = "REN-BASE")]
            RENBASE = 18
        }


        /// <summary>
        /// A valoriser avec le statut du vecteur. Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le statut du vecteur. Cf nomenclature associée.</value>
        /*
        <example>example.json#/state/status</example>
        */
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="State" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected State() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="State" /> class.
        /// </summary>
        /// <param name="datetime">A valoriser avec la date et heure d&#39;engagement de changement vers le nouveau statut (required).</param>
        /// <param name="status">A valoriser avec le statut du vecteur. Cf nomenclature associée. (required).</param>
        /// <param name="availability">A valoriser de manière à indiquer la disponibilité du vecteur. TRUE &#x3D; DISPONIBLE FALSE &#x3D; INDISPONIBLE VIDE &#x3D; INCONNU.</param>
        public State(DateTime datetime = default(DateTime), StatusEnum status = default(StatusEnum), bool availability = default(bool))
        {
            this.Datetime = datetime;
            this.Status = status;
            this.Availability = availability;
        }

        /// <summary>
        /// A valoriser avec la date et heure d&#39;engagement de changement vers le nouveau statut
        /// </summary>
        /// <value>A valoriser avec la date et heure d&#39;engagement de changement vers le nouveau statut</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// A valoriser de manière à indiquer la disponibilité du vecteur. TRUE &#x3D; DISPONIBLE FALSE &#x3D; INDISPONIBLE VIDE &#x3D; INCONNU
        /// </summary>
        /// <value>A valoriser de manière à indiquer la disponibilité du vecteur. TRUE &#x3D; DISPONIBLE FALSE &#x3D; INDISPONIBLE VIDE &#x3D; INCONNU</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "availability", EmitDefaultValue = true)]
        public bool Availability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class State {\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Datetime != null) {
                // Datetime (DateTime) pattern
                Regex regexDatetime = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDatetime.Match(this.Datetime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Datetime, must match a pattern of " + regexDatetime, new [] { "Datetime" });
                }
            }

            yield break;
        }
    }

}
