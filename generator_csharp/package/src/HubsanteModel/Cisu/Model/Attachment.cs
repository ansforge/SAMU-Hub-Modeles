/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Cisu.Client.OpenAPIDateConverter;

namespace HubsanteModel/Cisu.Model
{
    /// <summary>
    /// Attachment
    /// </summary>
    [DataContract(Name = "attachment")]
    public partial class Attachment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Attachment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachment" /> class.
        /// </summary>
        /// <param name="description">Décrit la ressource en précisant le type et le contenu, tels que «carte» ou «photo».</param>
        /// <param name="mimeType">L&#39;identifiant du type MIME de contenu et sous-type décrivant la ressource.</param>
        /// <param name="size">Taille approximative de la ressource en kO.</param>
        /// <param name="uRI">Une URI, généralement une URL, qui permet d&#39;atteindre la ressource sur Internet ou sur un réseau privé Nous suggérons d&#39;employer le format suivant de regex (https?|ftp|file)://([\\w-]+(\\.[\\w-]+)*)(/[\\w\\-\\.]*)*_/?(\\?[^\\s]*)? (required).</param>
        /// <param name="derefURI">Peut être utilisé à la place de l&#39;élément &#39;URI&#39; pour envoyer la ressource encodée en base64 pour éviter des problèmes de transcodage (sur des double quotes qui casseraient le message, …).</param>
        /// <param name="digest">Hash de la ressource pour confirmer la réception de la bonne ressource La ressource est hashée avec le protocole SHA-256.</param>
        public Attachment(string description = default(string), string mimeType = default(string), int size = default(int), string uRI = default(string), string derefURI = default(string), string digest = default(string))
        {
            // to ensure "uRI" is required (not null)
            if (uRI == null)
            {
                throw new ArgumentNullException("uRI is a required property for Attachment and cannot be null");
            }
            this.URI = uRI;
            this.Description = description;
            this.MimeType = mimeType;
            this.Size = size;
            this.DerefURI = derefURI;
            this.Digest = digest;
        }

        /// <summary>
        /// Décrit la ressource en précisant le type et le contenu, tels que «carte» ou «photo»
        /// </summary>
        /// <value>Décrit la ressource en précisant le type et le contenu, tels que «carte» ou «photo»</value>
        /*
        <example>example.json#/initialAlert/attachment/0/description</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// L&#39;identifiant du type MIME de contenu et sous-type décrivant la ressource
        /// </summary>
        /// <value>L&#39;identifiant du type MIME de contenu et sous-type décrivant la ressource</value>
        /*
        <example>example.json#/initialAlert/attachment/0/mimeType</example>
        */
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Taille approximative de la ressource en kO
        /// </summary>
        /// <value>Taille approximative de la ressource en kO</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Une URI, généralement une URL, qui permet d&#39;atteindre la ressource sur Internet ou sur un réseau privé Nous suggérons d&#39;employer le format suivant de regex (https?|ftp|file)://([\\w-]+(\\.[\\w-]+)*)(/[\\w\\-\\.]*)*_/?(\\?[^\\s]*)?
        /// </summary>
        /// <value>Une URI, généralement une URL, qui permet d&#39;atteindre la ressource sur Internet ou sur un réseau privé Nous suggérons d&#39;employer le format suivant de regex (https?|ftp|file)://([\\w-]+(\\.[\\w-]+)*)(/[\\w\\-\\.]*)*_/?(\\?[^\\s]*)?</value>
        /*
        <example>example.json#/initialAlert/attachment/0/URI</example>
        */
        [DataMember(Name = "URI", IsRequired = true, EmitDefaultValue = true)]
        public string URI { get; set; }

        /// <summary>
        /// Peut être utilisé à la place de l&#39;élément &#39;URI&#39; pour envoyer la ressource encodée en base64 pour éviter des problèmes de transcodage (sur des double quotes qui casseraient le message, …)
        /// </summary>
        /// <value>Peut être utilisé à la place de l&#39;élément &#39;URI&#39; pour envoyer la ressource encodée en base64 pour éviter des problèmes de transcodage (sur des double quotes qui casseraient le message, …)</value>
        /*
        <example>example.json#/initialAlert/attachment/0/derefURI</example>
        */
        [DataMember(Name = "derefURI", EmitDefaultValue = false)]
        public string DerefURI { get; set; }

        /// <summary>
        /// Hash de la ressource pour confirmer la réception de la bonne ressource La ressource est hashée avec le protocole SHA-256
        /// </summary>
        /// <value>Hash de la ressource pour confirmer la réception de la bonne ressource La ressource est hashée avec le protocole SHA-256</value>
        /*
        <example>example.json#/initialAlert/attachment/0/digest</example>
        */
        [DataMember(Name = "digest", EmitDefaultValue = false)]
        public string Digest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("  DerefURI: ").Append(DerefURI).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
