/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Cisu.Client.OpenAPIDateConverter;

namespace HubsanteModel/Cisu.Model
{
    /// <summary>
    /// Qualification
    /// </summary>
    [DataContract(Name = "qualification")]
    public partial class Qualification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Qualification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Qualification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Qualification" /> class.
        /// </summary>
        /// <param name="riskThreat">riskThreat.</param>
        /// <param name="whatsHappen">whatsHappen (required).</param>
        /// <param name="locationKind">locationKind.</param>
        /// <param name="healthMotive">healthMotive.</param>
        /// <param name="victims">victims.</param>
        public Qualification(List<RiskThreat> riskThreat = default(List<RiskThreat>), WhatsHappen whatsHappen = default(WhatsHappen), LocationKind locationKind = default(LocationKind), HealthMotive healthMotive = default(HealthMotive), Victims victims = default(Victims))
        {
            // to ensure "whatsHappen" is required (not null)
            if (whatsHappen == null)
            {
                throw new ArgumentNullException("whatsHappen is a required property for Qualification and cannot be null");
            }
            this.WhatsHappen = whatsHappen;
            this.RiskThreat = riskThreat;
            this.LocationKind = locationKind;
            this.HealthMotive = healthMotive;
            this.Victims = victims;
        }

        /// <summary>
        /// Gets or Sets RiskThreat
        /// </summary>
        [DataMember(Name = "riskThreat", EmitDefaultValue = false)]
        public List<RiskThreat> RiskThreat { get; set; }

        /// <summary>
        /// Gets or Sets WhatsHappen
        /// </summary>
        [DataMember(Name = "whatsHappen", IsRequired = true, EmitDefaultValue = true)]
        public WhatsHappen WhatsHappen { get; set; }

        /// <summary>
        /// Gets or Sets LocationKind
        /// </summary>
        [DataMember(Name = "locationKind", EmitDefaultValue = false)]
        public LocationKind LocationKind { get; set; }

        /// <summary>
        /// Gets or Sets HealthMotive
        /// </summary>
        [DataMember(Name = "healthMotive", EmitDefaultValue = false)]
        public HealthMotive HealthMotive { get; set; }

        /// <summary>
        /// Gets or Sets Victims
        /// </summary>
        [DataMember(Name = "victims", EmitDefaultValue = false)]
        public Victims Victims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Qualification {\n");
            sb.Append("  RiskThreat: ").Append(RiskThreat).Append("\n");
            sb.Append("  WhatsHappen: ").Append(WhatsHappen).Append("\n");
            sb.Append("  LocationKind: ").Append(LocationKind).Append("\n");
            sb.Append("  HealthMotive: ").Append(HealthMotive).Append("\n");
            sb.Append("  Victims: ").Append(Victims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
