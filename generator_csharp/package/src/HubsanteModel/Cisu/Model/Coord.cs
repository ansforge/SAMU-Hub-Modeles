/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Cisu.Client.OpenAPIDateConverter;

namespace HubsanteModel/Cisu.Model
{
    /// <summary>
    /// Coord
    /// </summary>
    [DataContract(Name = "coord")]
    public partial class Coord : IValidatableObject
    {
        /// <summary>
        /// Indique via une nomenclature le niveau de précision des coordonnées fournies par le système emetteur. VILLE : Précision à l&#39;échelle de la ville,  RUE : Précision à l&#39;échelle de la rue,  ADRESSE : Adresse précise,  EXACTE : Point coordonnée GPS exact,  INCONNUE : Précision de la localisation non évaluable par l&#39;émetteur
        /// </summary>
        /// <value>Indique via une nomenclature le niveau de précision des coordonnées fournies par le système emetteur. VILLE : Précision à l&#39;échelle de la ville,  RUE : Précision à l&#39;échelle de la rue,  ADRESSE : Adresse précise,  EXACTE : Point coordonnée GPS exact,  INCONNUE : Précision de la localisation non évaluable par l&#39;émetteur</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrecisionEnum
        {
            /// <summary>
            /// Enum VILLE for value: VILLE
            /// </summary>
            [EnumMember(Value = "VILLE")]
            VILLE = 1,

            /// <summary>
            /// Enum RUE for value: RUE
            /// </summary>
            [EnumMember(Value = "RUE")]
            RUE = 2,

            /// <summary>
            /// Enum ADRESSE for value: ADRESSE
            /// </summary>
            [EnumMember(Value = "ADRESSE")]
            ADRESSE = 3,

            /// <summary>
            /// Enum EXACTE for value: EXACTE
            /// </summary>
            [EnumMember(Value = "EXACTE")]
            EXACTE = 4,

            /// <summary>
            /// Enum INCONNUE for value: INCONNUE
            /// </summary>
            [EnumMember(Value = "INCONNUE")]
            INCONNUE = 5
        }


        /// <summary>
        /// Indique via une nomenclature le niveau de précision des coordonnées fournies par le système emetteur. VILLE : Précision à l&#39;échelle de la ville,  RUE : Précision à l&#39;échelle de la rue,  ADRESSE : Adresse précise,  EXACTE : Point coordonnée GPS exact,  INCONNUE : Précision de la localisation non évaluable par l&#39;émetteur
        /// </summary>
        /// <value>Indique via une nomenclature le niveau de précision des coordonnées fournies par le système emetteur. VILLE : Précision à l&#39;échelle de la ville,  RUE : Précision à l&#39;échelle de la rue,  ADRESSE : Adresse précise,  EXACTE : Point coordonnée GPS exact,  INCONNUE : Précision de la localisation non évaluable par l&#39;émetteur</value>
        /*
        <example>example.json#/location/geometry/point/coord/precision</example>
        */
        [DataMember(Name = "precision", IsRequired = true, EmitDefaultValue = true)]
        public PrecisionEnum Precision { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Coord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coord" /> class.
        /// </summary>
        /// <param name="lat">A valoriser avec la latitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84)  (required).</param>
        /// <param name="lon">A valoriser avec la longitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84)  (required).</param>
        /// <param name="height">A valoriser avec l&#39;altitude du point clé de la localisation, en mètres.  Spécificité 15-18 :  ignoré côté NexSIS. .</param>
        /// <param name="heading">A valoriser avec le cap, en degré.</param>
        /// <param name="speed">Vitesse en km/h, notamment fournie par eCall, tel, nouveau AML, ….</param>
        /// <param name="precision">Indique via une nomenclature le niveau de précision des coordonnées fournies par le système emetteur. VILLE : Précision à l&#39;échelle de la ville,  RUE : Précision à l&#39;échelle de la rue,  ADRESSE : Adresse précise,  EXACTE : Point coordonnée GPS exact,  INCONNUE : Précision de la localisation non évaluable par l&#39;émetteur (required).</param>
        public Coord(decimal lat = default(decimal), decimal lon = default(decimal), decimal height = default(decimal), decimal heading = default(decimal), decimal speed = default(decimal), PrecisionEnum precision = default(PrecisionEnum))
        {
            this.Lat = lat;
            this.Lon = lon;
            this.Precision = precision;
            this.Height = height;
            this.Heading = heading;
            this.Speed = speed;
        }

        /// <summary>
        /// A valoriser avec la latitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84) 
        /// </summary>
        /// <value>A valoriser avec la latitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84) </value>
        [DataMember(Name = "lat", IsRequired = true, EmitDefaultValue = true)]
        public decimal Lat { get; set; }

        /// <summary>
        /// A valoriser avec la longitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84) 
        /// </summary>
        /// <value>A valoriser avec la longitude du point clé de la localisation - dans le système de coordonnées EPSG-4326 (indiquant l&#39;utilisation de WGS-84) </value>
        [DataMember(Name = "lon", IsRequired = true, EmitDefaultValue = true)]
        public decimal Lon { get; set; }

        /// <summary>
        /// A valoriser avec l&#39;altitude du point clé de la localisation, en mètres.  Spécificité 15-18 :  ignoré côté NexSIS. 
        /// </summary>
        /// <value>A valoriser avec l&#39;altitude du point clé de la localisation, en mètres.  Spécificité 15-18 :  ignoré côté NexSIS. </value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal Height { get; set; }

        /// <summary>
        /// A valoriser avec le cap, en degré
        /// </summary>
        /// <value>A valoriser avec le cap, en degré</value>
        [DataMember(Name = "heading", EmitDefaultValue = false)]
        public decimal Heading { get; set; }

        /// <summary>
        /// Vitesse en km/h, notamment fournie par eCall, tel, nouveau AML, …
        /// </summary>
        /// <value>Vitesse en km/h, notamment fournie par eCall, tel, nouveau AML, …</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Coord {\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
