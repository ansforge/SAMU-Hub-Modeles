/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Cisu.Client.OpenAPIDateConverter;

namespace HubsanteModel/Cisu.Model
{
    /// <summary>
    /// Geometry
    /// </summary>
    [DataContract(Name = "geometry")]
    public partial class Geometry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Geometry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Geometry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Geometry" /> class.
        /// </summary>
        /// <param name="datetime">A valoriser avec le groupe date heure de renseignement des coordonnées du point clé de la localisation.  Permet de connaître la fraîcheur et donc la pertinence des informations pour intervenir. (required).</param>
        /// <param name="point">point.</param>
        /// <param name="sketch">Objet gml (équivalent xml du geojson). Le langage GML permet de décrire une forme dans un système de projection donné.  Dans le cas d&#39;une alerte donnée sur une zone géographique non précise (par exemple une section d&#39;autoroute ou une zone sur un chemin de randonnée), une indication sur la zone de recherche peut être fournie. En XML, un objet gml est encapsulé dans une balise &lt;sketch xmlns:gml&#x3D;&#39;http://www.opengis.net/gml&#39; version&#x3D;&#39;1.0&#39; &gt; &lt;/sketch&gt; En JSON, les balises sont reprises depuis le modèle gml Voir http://www.opengis.net/gml pour le format de l&#39;objet sketch.</param>
        public Geometry(DateTime datetime = default(DateTime), Point point = default(Point), string sketch = default(string))
        {
            this.Datetime = datetime;
            this.Point = point;
            this.Sketch = sketch;
        }

        /// <summary>
        /// A valoriser avec le groupe date heure de renseignement des coordonnées du point clé de la localisation.  Permet de connaître la fraîcheur et donc la pertinence des informations pour intervenir.
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de renseignement des coordonnées du point clé de la localisation.  Permet de connaître la fraîcheur et donc la pertinence des informations pour intervenir.</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// Gets or Sets Point
        /// </summary>
        [DataMember(Name = "point", EmitDefaultValue = false)]
        public Point Point { get; set; }

        /// <summary>
        /// Objet gml (équivalent xml du geojson). Le langage GML permet de décrire une forme dans un système de projection donné.  Dans le cas d&#39;une alerte donnée sur une zone géographique non précise (par exemple une section d&#39;autoroute ou une zone sur un chemin de randonnée), une indication sur la zone de recherche peut être fournie. En XML, un objet gml est encapsulé dans une balise &lt;sketch xmlns:gml&#x3D;&#39;http://www.opengis.net/gml&#39; version&#x3D;&#39;1.0&#39; &gt; &lt;/sketch&gt; En JSON, les balises sont reprises depuis le modèle gml Voir http://www.opengis.net/gml pour le format de l&#39;objet sketch
        /// </summary>
        /// <value>Objet gml (équivalent xml du geojson). Le langage GML permet de décrire une forme dans un système de projection donné.  Dans le cas d&#39;une alerte donnée sur une zone géographique non précise (par exemple une section d&#39;autoroute ou une zone sur un chemin de randonnée), une indication sur la zone de recherche peut être fournie. En XML, un objet gml est encapsulé dans une balise &lt;sketch xmlns:gml&#x3D;&#39;http://www.opengis.net/gml&#39; version&#x3D;&#39;1.0&#39; &gt; &lt;/sketch&gt; En JSON, les balises sont reprises depuis le modèle gml Voir http://www.opengis.net/gml pour le format de l&#39;objet sketch</value>
        /*
        <example>example.json#/location/geometry/sketch</example>
        */
        [DataMember(Name = "sketch", EmitDefaultValue = false)]
        public string Sketch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Geometry {\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("  Sketch: ").Append(Sketch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Datetime != null) {
                // Datetime (DateTime) pattern
                Regex regexDatetime = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDatetime.Match(this.Datetime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Datetime, must match a pattern of " + regexDatetime, new [] { "Datetime" });
                }
            }

            yield break;
        }
    }

}
