/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Cisu.Client.OpenAPIDateConverter;

namespace HubsanteModel/Cisu.Model
{
    /// <summary>
    /// CreateCase
    /// </summary>
    [DataContract(Name = "createCase")]
    public partial class CreateCase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCase" /> class.
        /// </summary>
        /// <param name="caseId">Identifiant partagé de l&#39;affaire/dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système. (required).</param>
        /// <param name="senderCaseId">A valoriser avec le numéro du dossier dans le SI de l&#39;émetteur du message. .</param>
        /// <param name="creation">A valoriser avec le groupe date heure de création du dossier/affaire.  Spécificité 15-18 : A valoriser avec le groupe date heure de début de partage lié à la création de l&#39;affaire (et donc de génération du caseId).  Lors de l&#39;ajout d&#39;une nouvelle alerte, la valeur de ce champ ne doit pas être modifiée.   L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. Il doit être renseigné à la fin du processus de la  création de la première alerte. (required).</param>
        /// <param name="referenceVersion">Indique le numéro de version du référentiel des nomenclatures des codes transmis.  Cela permet aux différents systèmes de s&#39;assurer qu&#39;ils utilisent la même version des codes de nomenclature que leurs partenaires. (required).</param>
        /// <param name="qualification">qualification (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="initialAlert">initialAlert.</param>
        /// <param name="newAlert">newAlert.</param>
        /// <param name="freetext">freetext.</param>
        /// <param name="additionalInformation">additionalInformation.</param>
        public CreateCase(string caseId = default(string), string senderCaseId = default(string), DateTime creation = default(DateTime), string referenceVersion = default(string), Qualification qualification = default(Qualification), Location location = default(Location), Alert initialAlert = default(Alert), List<Alert> newAlert = default(List<Alert>), List<string> freetext = default(List<string>), AdditionalInformation additionalInformation = default(AdditionalInformation))
        {
            // to ensure "caseId" is required (not null)
            if (caseId == null)
            {
                throw new ArgumentNullException("caseId is a required property for CreateCase and cannot be null");
            }
            this.CaseId = caseId;
            this.Creation = creation;
            // to ensure "referenceVersion" is required (not null)
            if (referenceVersion == null)
            {
                throw new ArgumentNullException("referenceVersion is a required property for CreateCase and cannot be null");
            }
            this.ReferenceVersion = referenceVersion;
            // to ensure "qualification" is required (not null)
            if (qualification == null)
            {
                throw new ArgumentNullException("qualification is a required property for CreateCase and cannot be null");
            }
            this.Qualification = qualification;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for CreateCase and cannot be null");
            }
            this.Location = location;
            this.SenderCaseId = senderCaseId;
            this.InitialAlert = initialAlert;
            this.NewAlert = newAlert;
            this.Freetext = freetext;
            this.AdditionalInformation = additionalInformation;
        }

        /// <summary>
        /// Identifiant partagé de l&#39;affaire/dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.
        /// </summary>
        /// <value>Identifiant partagé de l&#39;affaire/dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.</value>
        /*
        <example>example.json#/caseId</example>
        */
        [DataMember(Name = "caseId", IsRequired = true, EmitDefaultValue = true)]
        public string CaseId { get; set; }

        /// <summary>
        /// A valoriser avec le numéro du dossier dans le SI de l&#39;émetteur du message. 
        /// </summary>
        /// <value>A valoriser avec le numéro du dossier dans le SI de l&#39;émetteur du message. </value>
        /*
        <example>example.json#/senderCaseId</example>
        */
        [DataMember(Name = "senderCaseId", EmitDefaultValue = false)]
        public string SenderCaseId { get; set; }

        /// <summary>
        /// A valoriser avec le groupe date heure de création du dossier/affaire.  Spécificité 15-18 : A valoriser avec le groupe date heure de début de partage lié à la création de l&#39;affaire (et donc de génération du caseId).  Lors de l&#39;ajout d&#39;une nouvelle alerte, la valeur de ce champ ne doit pas être modifiée.   L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. Il doit être renseigné à la fin du processus de la  création de la première alerte.
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de création du dossier/affaire.  Spécificité 15-18 : A valoriser avec le groupe date heure de début de partage lié à la création de l&#39;affaire (et donc de génération du caseId).  Lors de l&#39;ajout d&#39;une nouvelle alerte, la valeur de ce champ ne doit pas être modifiée.   L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. Il doit être renseigné à la fin du processus de la  création de la première alerte.</value>
        [DataMember(Name = "creation", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Creation { get; set; }

        /// <summary>
        /// Indique le numéro de version du référentiel des nomenclatures des codes transmis.  Cela permet aux différents systèmes de s&#39;assurer qu&#39;ils utilisent la même version des codes de nomenclature que leurs partenaires.
        /// </summary>
        /// <value>Indique le numéro de version du référentiel des nomenclatures des codes transmis.  Cela permet aux différents systèmes de s&#39;assurer qu&#39;ils utilisent la même version des codes de nomenclature que leurs partenaires.</value>
        /*
        <example>example.json#/referenceVersion</example>
        */
        [DataMember(Name = "referenceVersion", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceVersion { get; set; }

        /// <summary>
        /// Gets or Sets Qualification
        /// </summary>
        [DataMember(Name = "qualification", IsRequired = true, EmitDefaultValue = true)]
        public Qualification Qualification { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets InitialAlert
        /// </summary>
        [DataMember(Name = "initialAlert", EmitDefaultValue = false)]
        public Alert InitialAlert { get; set; }

        /// <summary>
        /// Gets or Sets NewAlert
        /// </summary>
        [DataMember(Name = "newAlert", EmitDefaultValue = false)]
        public List<Alert> NewAlert { get; set; }

        /// <summary>
        /// Gets or Sets Freetext
        /// </summary>
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public List<string> Freetext { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name = "additionalInformation", EmitDefaultValue = false)]
        public AdditionalInformation AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCase {\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  SenderCaseId: ").Append(SenderCaseId).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  ReferenceVersion: ").Append(ReferenceVersion).Append("\n");
            sb.Append("  Qualification: ").Append(Qualification).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  InitialAlert: ").Append(InitialAlert).Append("\n");
            sb.Append("  NewAlert: ").Append(NewAlert).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CaseId != null) {
                // CaseId (string) pattern
                Regex regexCaseId = new Regex(@"^([\w-]+\.?){4,10}$", RegexOptions.CultureInvariant);
                if (!regexCaseId.Match(this.CaseId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CaseId, must match a pattern of " + regexCaseId, new [] { "CaseId" });
                }
            }

            if (this.Creation != null) {
                // Creation (DateTime) pattern
                Regex regexCreation = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexCreation.Match(this.Creation).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Creation, must match a pattern of " + regexCreation, new [] { "Creation" });
                }
            }

            yield break;
        }
    }

}
