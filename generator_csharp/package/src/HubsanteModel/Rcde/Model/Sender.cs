/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rcde.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rcde.Model
{
    /// <summary>
    /// Sender
    /// </summary>
    [DataContract(Name = "sender")]
    public partial class Sender : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sender" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sender() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sender" /> class.
        /// </summary>
        /// <param name="name">Identifiant technique du système emetteur Format :  &#x3D;&gt; Pour les SAMU : {nom solution LRM}-{clé de routage} où clé de routage désigne le nom de la clé de routage utilisée par le LRM pour les échanges et {nom solution LRM} est le nom donné par l&#39;éditeur à sa solution (libre) &#x3D;&gt; Pour NeXSIS : à définir {sga|sgo}-nexsis (required).</param>
        /// <param name="uRI">uri du système. Permet d&#39;identifier le vecteur utilisé par les échanges Format : &#x3D;&gt; Pour les LRM : {nom éditeur}:{sender:name} &#x3D;&gt; Pour NexSIS : sge:{sender:name} (required).</param>
        public Sender(string name = default(string), string uRI = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Sender and cannot be null");
            }
            this.Name = name;
            // to ensure "uRI" is required (not null)
            if (uRI == null)
            {
                throw new ArgumentNullException("uRI is a required property for Sender and cannot be null");
            }
            this.URI = uRI;
        }

        /// <summary>
        /// Identifiant technique du système emetteur Format :  &#x3D;&gt; Pour les SAMU : {nom solution LRM}-{clé de routage} où clé de routage désigne le nom de la clé de routage utilisée par le LRM pour les échanges et {nom solution LRM} est le nom donné par l&#39;éditeur à sa solution (libre) &#x3D;&gt; Pour NeXSIS : à définir {sga|sgo}-nexsis
        /// </summary>
        /// <value>Identifiant technique du système emetteur Format :  &#x3D;&gt; Pour les SAMU : {nom solution LRM}-{clé de routage} où clé de routage désigne le nom de la clé de routage utilisée par le LRM pour les échanges et {nom solution LRM} est le nom donné par l&#39;éditeur à sa solution (libre) &#x3D;&gt; Pour NeXSIS : à définir {sga|sgo}-nexsis</value>
        /*
        <example>example.json#/sender/name</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// uri du système. Permet d&#39;identifier le vecteur utilisé par les échanges Format : &#x3D;&gt; Pour les LRM : {nom éditeur}:{sender:name} &#x3D;&gt; Pour NexSIS : sge:{sender:name}
        /// </summary>
        /// <value>uri du système. Permet d&#39;identifier le vecteur utilisé par les échanges Format : &#x3D;&gt; Pour les LRM : {nom éditeur}:{sender:name} &#x3D;&gt; Pour NexSIS : sge:{sender:name}</value>
        /*
        <example>example.json#/sender/URI</example>
        */
        [DataMember(Name = "URI", IsRequired = true, EmitDefaultValue = true)]
        public string URI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sender {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
