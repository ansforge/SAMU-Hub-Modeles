/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Documentlink.Client.OpenAPIDateConverter;

namespace HubsanteModel/Documentlink.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract(Name = "document")]
    public partial class Document : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Document() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="documentType">Informe l&#39;utilisateur du type de document que le lien URL permet d&#39;ouvrir.</param>
        /// <param name="url">URL qui permet à l&#39;utilisateur du LRM d&#39;ouvrir le type de document précisé dans le champ précédent (required).</param>
        public Document(string documentType = default(string), string url = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Document and cannot be null");
            }
            this.Url = url;
            this.DocumentType = documentType;
        }

        /// <summary>
        /// Informe l&#39;utilisateur du type de document que le lien URL permet d&#39;ouvrir
        /// </summary>
        /// <value>Informe l&#39;utilisateur du type de document que le lien URL permet d&#39;ouvrir</value>
        /*
        <example>example.json#/document/0/documentType</example>
        */
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// URL qui permet à l&#39;utilisateur du LRM d&#39;ouvrir le type de document précisé dans le champ précédent
        /// </summary>
        /// <value>URL qui permet à l&#39;utilisateur du LRM d&#39;ouvrir le type de document précisé dans le champ précédent</value>
        /*
        <example>example.json#/document/0/url</example>
        */
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
