/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Documentlink.Client.OpenAPIDateConverter;

namespace HubsanteModel/Documentlink.Model
{
    /// <summary>
    /// DocumentLink
    /// </summary>
    [DataContract(Name = "documentLink")]
    public partial class DocumentLink : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentLink" /> class.
        /// </summary>
        /// <param name="caseId">Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système. (required).</param>
        /// <param name="patientId">Indique l&#39;identifiant partagé du patient auquel les documents sont rattachés.</param>
        /// <param name="code">Code unitaire par bilan qui permet à l&#39;utilisateur qui reçoit ce lien d&#39;ouvrir le bilan lorsque celui ci ne nécessite pas une connexion nominative mais un code bilan .</param>
        /// <param name="document">document (required).</param>
        public DocumentLink(string caseId = default(string), string patientId = default(string), string code = default(string), List<Document> document = default(List<Document>))
        {
            // to ensure "caseId" is required (not null)
            if (caseId == null)
            {
                throw new ArgumentNullException("caseId is a required property for DocumentLink and cannot be null");
            }
            this.CaseId = caseId;
            // to ensure "document" is required (not null)
            if (document == null)
            {
                throw new ArgumentNullException("document is a required property for DocumentLink and cannot be null");
            }
            this.Document = document;
            this.PatientId = patientId;
            this.Code = code;
        }

        /// <summary>
        /// Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.
        /// </summary>
        /// <value>Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.</value>
        /*
        <example>example.json#/caseId</example>
        */
        [DataMember(Name = "caseId", IsRequired = true, EmitDefaultValue = true)]
        public string CaseId { get; set; }

        /// <summary>
        /// Indique l&#39;identifiant partagé du patient auquel les documents sont rattachés
        /// </summary>
        /// <value>Indique l&#39;identifiant partagé du patient auquel les documents sont rattachés</value>
        /*
        <example>example.json#/patientId</example>
        */
        [DataMember(Name = "patientId", EmitDefaultValue = false)]
        public string PatientId { get; set; }

        /// <summary>
        /// Code unitaire par bilan qui permet à l&#39;utilisateur qui reçoit ce lien d&#39;ouvrir le bilan lorsque celui ci ne nécessite pas une connexion nominative mais un code bilan 
        /// </summary>
        /// <value>Code unitaire par bilan qui permet à l&#39;utilisateur qui reçoit ce lien d&#39;ouvrir le bilan lorsque celui ci ne nécessite pas une connexion nominative mais un code bilan </value>
        /*
        <example>example.json#/code</example>
        */
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", IsRequired = true, EmitDefaultValue = true)]
        public List<Document> Document { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentLink {\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PatientId != null) {
                // PatientId (string) pattern
                Regex regexPatientId = new Regex(@"^([\w-]+\.){3,4}patient(\.[\w-]+){1,2}$", RegexOptions.CultureInvariant);
                if (!regexPatientId.Match(this.PatientId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PatientId, must match a pattern of " + regexPatientId, new [] { "PatientId" });
                }
            }

            yield break;
        }
    }

}
