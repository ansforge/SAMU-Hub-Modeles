/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Reference.Client.OpenAPIDateConverter;

namespace HubsanteModel/Reference.Model
{
    /// <summary>
    /// Reference
    /// </summary>
    [DataContract(Name = "reference")]
    public partial class Reference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Reference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Reference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reference" /> class.
        /// </summary>
        /// <param name="distributionID">Identifiant unique du message référencé (required).</param>
        /// <param name="refused">Indique si le message acquitté a été refusé.</param>
        /// <param name="errorDistributionID">Identifiant unique du message d&#39;erreur lié.</param>
        /// <param name="step">Nomenclature permettant d&#39;identifier les différentes étapes d&#39;intégration et de consultation du dossier dans le système émetteur.</param>
        public Reference(string distributionID = default(string), bool refused = default(bool), string errorDistributionID = default(string), string step = default(string))
        {
            // to ensure "distributionID" is required (not null)
            if (distributionID == null)
            {
                throw new ArgumentNullException("distributionID is a required property for Reference and cannot be null");
            }
            this.DistributionID = distributionID;
            this.Refused = refused;
            this.ErrorDistributionID = errorDistributionID;
            this.Step = step;
        }

        /// <summary>
        /// Identifiant unique du message référencé
        /// </summary>
        /// <value>Identifiant unique du message référencé</value>
        /*
        <example>example.json#/distributionID</example>
        */
        [DataMember(Name = "distributionID", IsRequired = true, EmitDefaultValue = true)]
        public string DistributionID { get; set; }

        /// <summary>
        /// Indique si le message acquitté a été refusé
        /// </summary>
        /// <value>Indique si le message acquitté a été refusé</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "refused", EmitDefaultValue = true)]
        public bool Refused { get; set; }

        /// <summary>
        /// Identifiant unique du message d&#39;erreur lié
        /// </summary>
        /// <value>Identifiant unique du message d&#39;erreur lié</value>
        /*
        <example>example.json#/errorDistributionID</example>
        */
        [DataMember(Name = "errorDistributionID", EmitDefaultValue = false)]
        public string ErrorDistributionID { get; set; }

        /// <summary>
        /// Nomenclature permettant d&#39;identifier les différentes étapes d&#39;intégration et de consultation du dossier dans le système émetteur
        /// </summary>
        /// <value>Nomenclature permettant d&#39;identifier les différentes étapes d&#39;intégration et de consultation du dossier dans le système émetteur</value>
        /*
        <example>example.json#/step</example>
        */
        [DataMember(Name = "step", EmitDefaultValue = false)]
        public string Step { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Reference {\n");
            sb.Append("  DistributionID: ").Append(DistributionID).Append("\n");
            sb.Append("  Refused: ").Append(Refused).Append("\n");
            sb.Append("  ErrorDistributionID: ").Append(ErrorDistributionID).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
