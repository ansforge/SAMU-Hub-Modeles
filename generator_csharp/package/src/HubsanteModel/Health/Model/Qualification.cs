/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// Qualification
    /// </summary>
    [DataContract(Name = "qualification")]
    public partial class Qualification : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le numéro de provenance de l&#39;appel.
        /// </summary>
        /// <value>A valoriser avec le numéro de provenance de l&#39;appel.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginEnum
        {
            /// <summary>
            /// Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")]
            _15 = 1,

            /// <summary>
            /// Enum _116117 for value: 116117
            /// </summary>
            [EnumMember(Value = "116117")]
            _116117 = 2,

            /// <summary>
            /// Enum AUTOCOM for value: AUTOCOM
            /// </summary>
            [EnumMember(Value = "AUTOCOM")]
            AUTOCOM = 3,

            /// <summary>
            /// Enum _112 for value: 112
            /// </summary>
            [EnumMember(Value = "112")]
            _112 = 4,

            /// <summary>
            /// Enum _115 for value: 115
            /// </summary>
            [EnumMember(Value = "115")]
            _115 = 5,

            /// <summary>
            /// Enum CRRA for value: CRRA
            /// </summary>
            [EnumMember(Value = "CRRA")]
            CRRA = 6,

            /// <summary>
            /// Enum AUTREC15 for value: AUTREC15
            /// </summary>
            [EnumMember(Value = "AUTREC15")]
            AUTREC15 = 7,

            /// <summary>
            /// Enum CTACONF for value: CTA-CONF
            /// </summary>
            [EnumMember(Value = "CTA-CONF")]
            CTACONF = 8,

            /// <summary>
            /// Enum CTAPI for value: CTA-PI
            /// </summary>
            [EnumMember(Value = "CTA-PI")]
            CTAPI = 9,

            /// <summary>
            /// Enum AUTRECTA for value: AUTRECTA
            /// </summary>
            [EnumMember(Value = "AUTRECTA")]
            AUTRECTA = 10,

            /// <summary>
            /// Enum CNR for value: CNR
            /// </summary>
            [EnumMember(Value = "CNR")]
            CNR = 11,

            /// <summary>
            /// Enum FDO for value: FDO
            /// </summary>
            [EnumMember(Value = "FDO")]
            FDO = 12,

            /// <summary>
            /// Enum SNATED for value: SNATED
            /// </summary>
            [EnumMember(Value = "SNATED")]
            SNATED = 13,

            /// <summary>
            /// Enum PDSSOS for value: PDSSOS
            /// </summary>
            [EnumMember(Value = "PDSSOS")]
            PDSSOS = 14,

            /// <summary>
            /// Enum TELASSIST for value: TELASSIST
            /// </summary>
            [EnumMember(Value = "TELASSIST")]
            TELASSIST = 15,

            /// <summary>
            /// Enum CROSS for value: CROSS
            /// </summary>
            [EnumMember(Value = "CROSS")]
            CROSS = 16,

            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 17,

            /// <summary>
            /// Enum DATA for value: DATA
            /// </summary>
            [EnumMember(Value = "DATA")]
            DATA = 18,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 19
        }


        /// <summary>
        /// A valoriser avec le numéro de provenance de l&#39;appel.
        /// </summary>
        /// <value>A valoriser avec le numéro de provenance de l&#39;appel.</value>
        /*
        <example>example.json#/qualification/origin</example>
        */
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Qualification" /> class.
        /// </summary>
        /// <param name="origin">A valoriser avec le numéro de provenance de l&#39;appel..</param>
        /// <param name="riskThreat">riskThreat.</param>
        /// <param name="whatsHappen">whatsHappen.</param>
        /// <param name="locationKind">locationKind.</param>
        /// <param name="healthMotive">healthMotive.</param>
        /// <param name="details">details.</param>
        public Qualification(OriginEnum? origin = default(OriginEnum?), List<RiskThreat> riskThreat = default(List<RiskThreat>), WhatsHappen whatsHappen = default(WhatsHappen), LocationKind locationKind = default(LocationKind), HealthMotive healthMotive = default(HealthMotive), CaseDetails details = default(CaseDetails))
        {
            this.Origin = origin;
            this.RiskThreat = riskThreat;
            this.WhatsHappen = whatsHappen;
            this.LocationKind = locationKind;
            this.HealthMotive = healthMotive;
            this.Details = details;
        }

        /// <summary>
        /// Gets or Sets RiskThreat
        /// </summary>
        [DataMember(Name = "riskThreat", EmitDefaultValue = false)]
        public List<RiskThreat> RiskThreat { get; set; }

        /// <summary>
        /// Gets or Sets WhatsHappen
        /// </summary>
        [DataMember(Name = "whatsHappen", EmitDefaultValue = false)]
        public WhatsHappen WhatsHappen { get; set; }

        /// <summary>
        /// Gets or Sets LocationKind
        /// </summary>
        [DataMember(Name = "locationKind", EmitDefaultValue = false)]
        public LocationKind LocationKind { get; set; }

        /// <summary>
        /// Gets or Sets HealthMotive
        /// </summary>
        [DataMember(Name = "healthMotive", EmitDefaultValue = false)]
        public HealthMotive HealthMotive { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public CaseDetails Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Qualification {\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RiskThreat: ").Append(RiskThreat).Append("\n");
            sb.Append("  WhatsHappen: ").Append(WhatsHappen).Append("\n");
            sb.Append("  LocationKind: ").Append(LocationKind).Append("\n");
            sb.Append("  HealthMotive: ").Append(HealthMotive).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
