/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// Alert
    /// </summary>
    [DataContract(Name = "alert")]
    public partial class Alert : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Alert() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        /// <param name="reception">A valoriser avec le groupe date heure de réception de l&#39;alerte/appel (required).</param>
        /// <param name="notes">notes.</param>
        /// <param name="caller">caller (required).</param>
        public Alert(DateTime reception = default(DateTime), List<Notes> notes = default(List<Notes>), Caller caller = default(Caller))
        {
            this.Reception = reception;
            // to ensure "caller" is required (not null)
            if (caller == null)
            {
                throw new ArgumentNullException("caller is a required property for Alert and cannot be null");
            }
            this.Caller = caller;
            this.Notes = notes;
        }

        /// <summary>
        /// A valoriser avec le groupe date heure de réception de l&#39;alerte/appel
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de réception de l&#39;alerte/appel</value>
        [DataMember(Name = "reception", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Reception { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<Notes> Notes { get; set; }

        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name = "caller", IsRequired = true, EmitDefaultValue = true)]
        public Caller Caller { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Alert {\n");
            sb.Append("  Reception: ").Append(Reception).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Reception != null) {
                // Reception (DateTime) pattern
                Regex regexReception = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexReception.Match(this.Reception).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reception, must match a pattern of " + regexReception, new [] { "Reception" });
                }
            }

            yield break;
        }
    }

}
