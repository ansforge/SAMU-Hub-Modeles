/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// DetailedName
    /// </summary>
    [DataContract(Name = "detailedName")]
    public partial class DetailedName : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailedName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedName" /> class.
        /// </summary>
        /// <param name="complete">A valoriser avec le prénom et le nom usuel du requérant/appelant. Si les champs callerLastName et callerFirstName sont également renseignés, le champ callerName doit être valorisé ainsi : \&quot;{callerFirstName} {callerLastName}\&quot;.  Spécificités 15-18  : NexSIS ne dispose que de ces informations (concaténées) et pas de deux champs séparés. (required).</param>
        /// <param name="lastName">A valoriser avec le nom usuel du requérant.</param>
        /// <param name="firstName">A valoriser avec le prénom usuel du réquérant. Par convention les prénoms composés doivent préférablement être séparés par le caractère \&quot;-\&quot;.</param>
        public DetailedName(string complete = default(string), string lastName = default(string), string firstName = default(string))
        {
            // to ensure "complete" is required (not null)
            if (complete == null)
            {
                throw new ArgumentNullException("complete is a required property for DetailedName and cannot be null");
            }
            this.Complete = complete;
            this.LastName = lastName;
            this.FirstName = firstName;
        }

        /// <summary>
        /// A valoriser avec le prénom et le nom usuel du requérant/appelant. Si les champs callerLastName et callerFirstName sont également renseignés, le champ callerName doit être valorisé ainsi : \&quot;{callerFirstName} {callerLastName}\&quot;.  Spécificités 15-18  : NexSIS ne dispose que de ces informations (concaténées) et pas de deux champs séparés.
        /// </summary>
        /// <value>A valoriser avec le prénom et le nom usuel du requérant/appelant. Si les champs callerLastName et callerFirstName sont également renseignés, le champ callerName doit être valorisé ainsi : \&quot;{callerFirstName} {callerLastName}\&quot;.  Spécificités 15-18  : NexSIS ne dispose que de ces informations (concaténées) et pas de deux champs séparés.</value>
        /*
        <example>example.json#/initialAlert/caller/detailedName/complete</example>
        */
        [DataMember(Name = "complete", IsRequired = true, EmitDefaultValue = true)]
        public string Complete { get; set; }

        /// <summary>
        /// A valoriser avec le nom usuel du requérant
        /// </summary>
        /// <value>A valoriser avec le nom usuel du requérant</value>
        /*
        <example>example.json#/initialAlert/caller/detailedName/lastName</example>
        */
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// A valoriser avec le prénom usuel du réquérant. Par convention les prénoms composés doivent préférablement être séparés par le caractère \&quot;-\&quot;
        /// </summary>
        /// <value>A valoriser avec le prénom usuel du réquérant. Par convention les prénoms composés doivent préférablement être séparés par le caractère \&quot;-\&quot;</value>
        /*
        <example>example.json#/initialAlert/caller/detailedName/firstName</example>
        */
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedName {\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
