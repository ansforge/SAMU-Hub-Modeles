/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// Hypothesis
    /// </summary>
    [DataContract(Name = "hypothesis")]
    public partial class Hypothesis : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hypothesis" /> class.
        /// </summary>
        /// <param name="mainDiagnosis">mainDiagnosis.</param>
        /// <param name="otherDiagnosis">otherDiagnosis.</param>
        public Hypothesis(MainDiagnosis mainDiagnosis = default(MainDiagnosis), List<OtherDiagnosis> otherDiagnosis = default(List<OtherDiagnosis>))
        {
            this.MainDiagnosis = mainDiagnosis;
            this.OtherDiagnosis = otherDiagnosis;
        }

        /// <summary>
        /// Gets or Sets MainDiagnosis
        /// </summary>
        [DataMember(Name = "mainDiagnosis", EmitDefaultValue = false)]
        public MainDiagnosis MainDiagnosis { get; set; }

        /// <summary>
        /// Gets or Sets OtherDiagnosis
        /// </summary>
        [DataMember(Name = "otherDiagnosis", EmitDefaultValue = false)]
        public List<OtherDiagnosis> OtherDiagnosis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Hypothesis {\n");
            sb.Append("  MainDiagnosis: ").Append(MainDiagnosis).Append("\n");
            sb.Append("  OtherDiagnosis: ").Append(OtherDiagnosis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
