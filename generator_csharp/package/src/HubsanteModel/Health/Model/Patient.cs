/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// Patient
    /// </summary>
    [DataContract(Name = "patient")]
    public partial class Patient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Patient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        /// <param name="patientId">Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}    (required).</param>
        /// <param name="administrativeFile">administrativeFile.</param>
        /// <param name="identity">identity.</param>
        /// <param name="detail">detail.</param>
        /// <param name="hypothesis">hypothesis.</param>
        public Patient(string patientId = default(string), AdministrativeFile administrativeFile = default(AdministrativeFile), Identity identity = default(Identity), PatientDetail detail = default(PatientDetail), Hypothesis hypothesis = default(Hypothesis))
        {
            // to ensure "patientId" is required (not null)
            if (patientId == null)
            {
                throw new ArgumentNullException("patientId is a required property for Patient and cannot be null");
            }
            this.PatientId = patientId;
            this.AdministrativeFile = administrativeFile;
            this.Identity = identity;
            this.Detail = detail;
            this.Hypothesis = hypothesis;
        }

        /// <summary>
        /// Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}   
        /// </summary>
        /// <value>Identifiant partagé du patient, généré une seule fois par le système du partenaire qui créé le patient. Il est valorisé comme suit lors de sa création :  {OrgId émetteur}.patient.{n°patient unique dans le système émetteur}  OU, si un n°patient unique n&#39;existe pas dans le système émetteur : {ID émetteur}.{senderCaseId}.patient.{numéro d’ordre chronologique au dossier}   </value>
        /*
        <example>example.json#/patient/0/patientId</example>
        */
        [DataMember(Name = "patientId", IsRequired = true, EmitDefaultValue = true)]
        public string PatientId { get; set; }

        /// <summary>
        /// Gets or Sets AdministrativeFile
        /// </summary>
        [DataMember(Name = "administrativeFile", EmitDefaultValue = false)]
        public AdministrativeFile AdministrativeFile { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name = "identity", EmitDefaultValue = false)]
        public Identity Identity { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public PatientDetail Detail { get; set; }

        /// <summary>
        /// Gets or Sets Hypothesis
        /// </summary>
        [DataMember(Name = "hypothesis", EmitDefaultValue = false)]
        public Hypothesis Hypothesis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  AdministrativeFile: ").Append(AdministrativeFile).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Hypothesis: ").Append(Hypothesis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.PatientId != null) {
                // PatientId (string) pattern
                Regex regexPatientId = new Regex(@"^([\w-]+\.){3,8}patient(\.[\w-]+){1,2}$", RegexOptions.CultureInvariant);
                if (!regexPatientId.Match(this.PatientId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PatientId, must match a pattern of " + regexPatientId, new [] { "PatientId" });
                }
            }

            yield break;
        }
    }

}
