/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// PersonalContact
    /// </summary>
    [DataContract(Name = "personalContact")]
    public partial class PersonalContact : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le type de l&#39;URI utilisée.  Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le type de l&#39;URI utilisée.  Cf nomenclature associée.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 1,

            /// <summary>
            /// Enum FAX for value: FAX
            /// </summary>
            [EnumMember(Value = "FAX")]
            FAX = 2,

            /// <summary>
            /// Enum MSS for value: MSS
            /// </summary>
            [EnumMember(Value = "MSS")]
            MSS = 3,

            /// <summary>
            /// Enum POSTAL for value: POSTAL
            /// </summary>
            [EnumMember(Value = "POSTAL")]
            POSTAL = 4,

            /// <summary>
            /// Enum RADIO for value: RADIO
            /// </summary>
            [EnumMember(Value = "RADIO")]
            RADIO = 5,

            /// <summary>
            /// Enum TEL for value: TEL
            /// </summary>
            [EnumMember(Value = "TEL")]
            TEL = 6,

            /// <summary>
            /// Enum WEB for value: WEB
            /// </summary>
            [EnumMember(Value = "WEB")]
            WEB = 7
        }


        /// <summary>
        /// A valoriser avec le type de l&#39;URI utilisée.  Cf nomenclature associée.
        /// </summary>
        /// <value>A valoriser avec le type de l&#39;URI utilisée.  Cf nomenclature associée.</value>
        /*
        <example>example.json#/patient/0/administrativeFile/generalPractitioner/contact/0/type</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonalContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalContact" /> class.
        /// </summary>
        /// <param name="type">A valoriser avec le type de l&#39;URI utilisée.  Cf nomenclature associée. (required).</param>
        /// <param name="detail">A valoriser avec la valeur de l&#39;URI utilisée. Le format attendu pour un numéro de téléphone est le suivant : +{indicatif pays}{numéro de téléphone}. (required).</param>
        public PersonalContact(TypeEnum type = default(TypeEnum), string detail = default(string))
        {
            this.Type = type;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for PersonalContact and cannot be null");
            }
            this.Detail = detail;
        }

        /// <summary>
        /// A valoriser avec la valeur de l&#39;URI utilisée. Le format attendu pour un numéro de téléphone est le suivant : +{indicatif pays}{numéro de téléphone}.
        /// </summary>
        /// <value>A valoriser avec la valeur de l&#39;URI utilisée. Le format attendu pour un numéro de téléphone est le suivant : +{indicatif pays}{numéro de téléphone}.</value>
        /*
        <example>example.json#/patient/0/administrativeFile/generalPractitioner/contact/0/detail</example>
        */
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalContact {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
