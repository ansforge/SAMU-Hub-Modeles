/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// DetailedAddress
    /// </summary>
    [DataContract(Name = "detailedAddress")]
    public partial class DetailedAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailedAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedAddress" /> class.
        /// </summary>
        /// <param name="highway">highway.</param>
        /// <param name="complete">A valoriser avec le numéro, le type et le nom de la voie. En réception, il est possible que seul cette information soit remplie.   Spécificités 15-15 : si les informations pour les autoroutes (voie férée ou voie navigable) ne sont pas structurées, il est possible de passer le nom, PK et sens ici, de manière concaténée.  Spécificités 15-18 : Obligatoire et seule valeur des détails de l&#39;adresse fournie par NexSIS. Utilisé pour tout type de voie :  autoroute (PK, nom et sens), voie ferrée, voie navigable… (required).</param>
        /// <param name="number">A valoriser avec le numéro dans l&#39;adresse. La valeur de l&#39;attribut inclut l&#39;indice de répétition associé au numéro (par exemple bis, a…).  Spécificités 15-18 :  inclut le point kilométrique sur l&#39;autoroute, voie ferrée ou voie navigable..</param>
        /// <param name="wayName">wayName.</param>
        public DetailedAddress(Highway highway = default(Highway), string complete = default(string), string number = default(string), WayName wayName = default(WayName))
        {
            // to ensure "complete" is required (not null)
            if (complete == null)
            {
                throw new ArgumentNullException("complete is a required property for DetailedAddress and cannot be null");
            }
            this.Complete = complete;
            this.Highway = highway;
            this.Number = number;
            this.WayName = wayName;
        }

        /// <summary>
        /// Gets or Sets Highway
        /// </summary>
        [DataMember(Name = "highway", EmitDefaultValue = false)]
        public Highway Highway { get; set; }

        /// <summary>
        /// A valoriser avec le numéro, le type et le nom de la voie. En réception, il est possible que seul cette information soit remplie.   Spécificités 15-15 : si les informations pour les autoroutes (voie férée ou voie navigable) ne sont pas structurées, il est possible de passer le nom, PK et sens ici, de manière concaténée.  Spécificités 15-18 : Obligatoire et seule valeur des détails de l&#39;adresse fournie par NexSIS. Utilisé pour tout type de voie :  autoroute (PK, nom et sens), voie ferrée, voie navigable…
        /// </summary>
        /// <value>A valoriser avec le numéro, le type et le nom de la voie. En réception, il est possible que seul cette information soit remplie.   Spécificités 15-15 : si les informations pour les autoroutes (voie férée ou voie navigable) ne sont pas structurées, il est possible de passer le nom, PK et sens ici, de manière concaténée.  Spécificités 15-18 : Obligatoire et seule valeur des détails de l&#39;adresse fournie par NexSIS. Utilisé pour tout type de voie :  autoroute (PK, nom et sens), voie ferrée, voie navigable…</value>
        /*
        <example>example.json#/location/detailedAddress/complete</example>
        */
        [DataMember(Name = "complete", IsRequired = true, EmitDefaultValue = true)]
        public string Complete { get; set; }

        /// <summary>
        /// A valoriser avec le numéro dans l&#39;adresse. La valeur de l&#39;attribut inclut l&#39;indice de répétition associé au numéro (par exemple bis, a…).  Spécificités 15-18 :  inclut le point kilométrique sur l&#39;autoroute, voie ferrée ou voie navigable.
        /// </summary>
        /// <value>A valoriser avec le numéro dans l&#39;adresse. La valeur de l&#39;attribut inclut l&#39;indice de répétition associé au numéro (par exemple bis, a…).  Spécificités 15-18 :  inclut le point kilométrique sur l&#39;autoroute, voie ferrée ou voie navigable.</value>
        /*
        <example>example.json#/location/detailedAddress/number</example>
        */
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets WayName
        /// </summary>
        [DataMember(Name = "wayName", EmitDefaultValue = false)]
        public WayName WayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedAddress {\n");
            sb.Append("  Highway: ").Append(Highway).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  WayName: ").Append(WayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
