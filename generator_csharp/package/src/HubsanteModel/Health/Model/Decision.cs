/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Health.Client.OpenAPIDateConverter;

namespace HubsanteModel/Health.Model
{
    /// <summary>
    /// Decision
    /// </summary>
    [DataContract(Name = "decision")]
    public partial class Decision : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le type de décision prise (cf.nomenclature associée)
        /// </summary>
        /// <value>A valoriser avec le type de décision prise (cf.nomenclature associée)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DecisionTypeEnum
        {
            /// <summary>
            /// Enum CONSEIL for value: CONSEIL
            /// </summary>
            [EnumMember(Value = "CONSEIL")]
            CONSEIL = 1,

            /// <summary>
            /// Enum PMT for value: PMT
            /// </summary>
            [EnumMember(Value = "PMT")]
            PMT = 2,

            /// <summary>
            /// Enum INTER for value: INTER
            /// </summary>
            [EnumMember(Value = "INTER")]
            INTER = 3,

            /// <summary>
            /// Enum ORIENT for value: ORIENT
            /// </summary>
            [EnumMember(Value = "ORIENT")]
            ORIENT = 4,

            /// <summary>
            /// Enum PASPLUS for value: PASPLUS
            /// </summary>
            [EnumMember(Value = "PASPLUS")]
            PASPLUS = 5
        }


        /// <summary>
        /// A valoriser avec le type de décision prise (cf.nomenclature associée)
        /// </summary>
        /// <value>A valoriser avec le type de décision prise (cf.nomenclature associée)</value>
        /*
        <example>example.json#/decision/0/decisionType</example>
        */
        [DataMember(Name = "decisionType", IsRequired = true, EmitDefaultValue = true)]
        public DecisionTypeEnum DecisionType { get; set; }
        /// <summary>
        /// A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum SMUR for value: SMUR
            /// </summary>
            [EnumMember(Value = "SMUR")]
            SMUR = 1,

            /// <summary>
            /// Enum SMURADULT for value: SMUR.ADULT
            /// </summary>
            [EnumMember(Value = "SMUR.ADULT")]
            SMURADULT = 2,

            /// <summary>
            /// Enum SMURPED for value: SMUR.PED
            /// </summary>
            [EnumMember(Value = "SMUR.PED")]
            SMURPED = 3,

            /// <summary>
            /// Enum SMURUMHS for value: SMUR.UMH-S
            /// </summary>
            [EnumMember(Value = "SMUR.UMH-S")]
            SMURUMHS = 4,

            /// <summary>
            /// Enum SMURCUMP for value: SMUR.CUMP
            /// </summary>
            [EnumMember(Value = "SMUR.CUMP")]
            SMURCUMP = 5,

            /// <summary>
            /// Enum HOSPIT for value: HOSPIT
            /// </summary>
            [EnumMember(Value = "HOSPIT")]
            HOSPIT = 6,

            /// <summary>
            /// Enum LIBERAL for value: LIBERAL
            /// </summary>
            [EnumMember(Value = "LIBERAL")]
            LIBERAL = 7,

            /// <summary>
            /// Enum LIBERALMG for value: LIBERAL.MG
            /// </summary>
            [EnumMember(Value = "LIBERAL.MG")]
            LIBERALMG = 8,

            /// <summary>
            /// Enum LIBERALPHARM for value: LIBERAL.PHARM
            /// </summary>
            [EnumMember(Value = "LIBERAL.PHARM")]
            LIBERALPHARM = 9,

            /// <summary>
            /// Enum LIBERALINF for value: LIBERAL.INF
            /// </summary>
            [EnumMember(Value = "LIBERAL.INF")]
            LIBERALINF = 10,

            /// <summary>
            /// Enum LIBERALKINE for value: LIBERAL.KINE
            /// </summary>
            [EnumMember(Value = "LIBERAL.KINE")]
            LIBERALKINE = 11,

            /// <summary>
            /// Enum LIBERALSOS for value: LIBERAL.SOS
            /// </summary>
            [EnumMember(Value = "LIBERAL.SOS")]
            LIBERALSOS = 12,

            /// <summary>
            /// Enum LIBERALMMG for value: LIBERAL.MMG
            /// </summary>
            [EnumMember(Value = "LIBERAL.MMG")]
            LIBERALMMG = 13,

            /// <summary>
            /// Enum LIBERALMSPD for value: LIBERAL.MSPD
            /// </summary>
            [EnumMember(Value = "LIBERAL.MSPD")]
            LIBERALMSPD = 14,

            /// <summary>
            /// Enum LIBERALMCS for value: LIBERAL.MCS
            /// </summary>
            [EnumMember(Value = "LIBERAL.MCS")]
            LIBERALMCS = 15,

            /// <summary>
            /// Enum LIBERALSPEMED for value: LIBERAL.SPEMED
            /// </summary>
            [EnumMember(Value = "LIBERAL.SPEMED")]
            LIBERALSPEMED = 16,

            /// <summary>
            /// Enum LIBERALDENT for value: LIBERAL.DENT
            /// </summary>
            [EnumMember(Value = "LIBERAL.DENT")]
            LIBERALDENT = 17,

            /// <summary>
            /// Enum LIBERALLABO for value: LIBERAL.LABO
            /// </summary>
            [EnumMember(Value = "LIBERAL.LABO")]
            LIBERALLABO = 18,

            /// <summary>
            /// Enum LIBERALAUTREPRO for value: LIBERAL.AUTREPRO
            /// </summary>
            [EnumMember(Value = "LIBERAL.AUTREPRO")]
            LIBERALAUTREPRO = 19,

            /// <summary>
            /// Enum TSU for value: TSU
            /// </summary>
            [EnumMember(Value = "TSU")]
            TSU = 20,

            /// <summary>
            /// Enum SIS for value: SIS
            /// </summary>
            [EnumMember(Value = "SIS")]
            SIS = 21,

            /// <summary>
            /// Enum SISMEDSP for value: SIS.MEDSP
            /// </summary>
            [EnumMember(Value = "SIS.MEDSP")]
            SISMEDSP = 22,

            /// <summary>
            /// Enum SISISP for value: SIS.ISP
            /// </summary>
            [EnumMember(Value = "SIS.ISP")]
            SISISP = 23,

            /// <summary>
            /// Enum SISSP for value: SIS.SP
            /// </summary>
            [EnumMember(Value = "SIS.SP")]
            SISSP = 24,

            /// <summary>
            /// Enum AASC for value: AASC
            /// </summary>
            [EnumMember(Value = "AASC")]
            AASC = 25,

            /// <summary>
            /// Enum FDO for value: FDO
            /// </summary>
            [EnumMember(Value = "FDO")]
            FDO = 26,

            /// <summary>
            /// Enum FDOPN for value: FDO.PN
            /// </summary>
            [EnumMember(Value = "FDO.PN")]
            FDOPN = 27,

            /// <summary>
            /// Enum FDOGEND for value: FDO.GEND
            /// </summary>
            [EnumMember(Value = "FDO.GEND")]
            FDOGEND = 28,

            /// <summary>
            /// Enum FDOPM for value: FDO.PM
            /// </summary>
            [EnumMember(Value = "FDO.PM")]
            FDOPM = 29,

            /// <summary>
            /// Enum FDODOUANES for value: FDO.DOUANES
            /// </summary>
            [EnumMember(Value = "FDO.DOUANES")]
            FDODOUANES = 30,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 31,

            /// <summary>
            /// Enum AUTREADM for value: AUTRE.ADM
            /// </summary>
            [EnumMember(Value = "AUTRE.ADM")]
            AUTREADM = 32,

            /// <summary>
            /// Enum AUTREDAE for value: AUTRE.DAE
            /// </summary>
            [EnumMember(Value = "AUTRE.DAE")]
            AUTREDAE = 33,

            /// <summary>
            /// Enum AUTREAUTRE for value: AUTRE.AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE.AUTRE")]
            AUTREAUTRE = 34
        }


        /// <summary>
        /// A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.
        /// </summary>
        /// <value>A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation.</value>
        /*
        <example>example.json#/decision/0/resourceType</example>
        */
        [DataMember(Name = "resourceType", EmitDefaultValue = false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)
        /// </summary>
        /// <value>Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationTypeEnum
        {
            /// <summary>
            /// Enum URGENCES for value: URGENCES
            /// </summary>
            [EnumMember(Value = "URGENCES")]
            URGENCES = 1,

            /// <summary>
            /// Enum REAUSI for value: REA-USI
            /// </summary>
            [EnumMember(Value = "REA-USI")]
            REAUSI = 2,

            /// <summary>
            /// Enum SANTE for value: SANTE
            /// </summary>
            [EnumMember(Value = "SANTE")]
            SANTE = 3,

            /// <summary>
            /// Enum CABINET for value: CABINET
            /// </summary>
            [EnumMember(Value = "CABINET")]
            CABINET = 4,

            /// <summary>
            /// Enum DOMICILE for value: DOMICILE
            /// </summary>
            [EnumMember(Value = "DOMICILE")]
            DOMICILE = 5,

            /// <summary>
            /// Enum EPHAD for value: EPHAD
            /// </summary>
            [EnumMember(Value = "EPHAD")]
            EPHAD = 6,

            /// <summary>
            /// Enum AUTRE for value: AUTRE
            /// </summary>
            [EnumMember(Value = "AUTRE")]
            AUTRE = 7
        }


        /// <summary>
        /// Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)
        /// </summary>
        /// <value>Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée)</value>
        /*
        <example>example.json#/decision/0/orientationType</example>
        */
        [DataMember(Name = "orientationType", EmitDefaultValue = false)]
        public OrientationTypeEnum? OrientationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decision" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Decision() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Decision" /> class.
        /// </summary>
        /// <param name="patientId">A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur.</param>
        /// <param name="creation">A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé. (required).</param>
        /// <param name="varOperator">varOperator (required).</param>
        /// <param name="decisionType">A valoriser avec le type de décision prise (cf.nomenclature associée) (required).</param>
        /// <param name="resourceType">A valoriser avec le type de ressource souhaitée ou engagée (cf.nomenclature associée) - en fonction du type de décision. A fournir obligatoirement pour une décision d&#39;intervention ou de transport/orientation..</param>
        /// <param name="medicalTransport">A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé.</param>
        /// <param name="orientationType">Indique le type de destination en cas de décision d&#39;orientation (cf. nomenclature associée).</param>
        /// <param name="destination">destination.</param>
        public Decision(string patientId = default(string), DateTime creation = default(DateTime), Operator varOperator = default(Operator), DecisionTypeEnum decisionType = default(DecisionTypeEnum), ResourceTypeEnum? resourceType = default(ResourceTypeEnum?), bool medicalTransport = default(bool), OrientationTypeEnum? orientationType = default(OrientationTypeEnum?), Destination destination = default(Destination))
        {
            this.Creation = creation;
            // to ensure "varOperator" is required (not null)
            if (varOperator == null)
            {
                throw new ArgumentNullException("varOperator is a required property for Decision and cannot be null");
            }
            this.Operator = varOperator;
            this.DecisionType = decisionType;
            this.PatientId = patientId;
            this.ResourceType = resourceType;
            this.MedicalTransport = medicalTransport;
            this.OrientationType = orientationType;
            this.Destination = destination;
        }

        /// <summary>
        /// A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur
        /// </summary>
        /// <value>A valoriser avec l&#39;ID partagé du patient concerné par la décision, à chaque fois que la décision est liée à un patient dans le système émetteur</value>
        /*
        <example>example.json#/decision/0/patientId</example>
        */
        [DataMember(Name = "patientId", EmitDefaultValue = false)]
        public string PatientId { get; set; }

        /// <summary>
        /// A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.
        /// </summary>
        /// <value>A valoriser avec le groupe date heure de création de la décision.  L&#39;indicateur de fuseau horaire Z ne doit pas être utilisé.</value>
        [DataMember(Name = "creation", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Creation { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public Operator Operator { get; set; }

        /// <summary>
        /// A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé
        /// </summary>
        /// <value>A valoriser obligatoirement en cas de décision de transport, pour indiquer si ce dernier est médicalisé. True &#x3D; transport médicalisé False &#x3D; transport non médicalisé</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "medicalTransport", EmitDefaultValue = true)]
        public bool MedicalTransport { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public Destination Destination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Decision {\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  DecisionType: ").Append(DecisionType).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  MedicalTransport: ").Append(MedicalTransport).Append("\n");
            sb.Append("  OrientationType: ").Append(OrientationType).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Creation != null) {
                // Creation (DateTime) pattern
                Regex regexCreation = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexCreation.Match(this.Creation).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Creation, must match a pattern of " + regexCreation, new [] { "Creation" });
                }
            }

            yield break;
        }
    }

}
