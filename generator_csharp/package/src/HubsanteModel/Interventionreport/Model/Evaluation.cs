/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Interventionreport.Client.OpenAPIDateConverter;

namespace HubsanteModel/Interventionreport.Model
{
    /// <summary>
    /// Evaluation
    /// </summary>
    [DataContract(Name = "evaluation")]
    public partial class Evaluation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evaluation" /> class.
        /// </summary>
        /// <param name="procedure">procedure.</param>
        /// <param name="mainDiagnosis">Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR..</param>
        /// <param name="associatedDiagnosis">associatedDiagnosis.</param>
        /// <param name="varParameter">varParameter.</param>
        /// <param name="medicalHistory">Précise les antécédents du patient.</param>
        /// <param name="treatment">Précise le traitement du patient.</param>
        /// <param name="freetext">freetext.</param>
        public Evaluation(List<string> procedure = default(List<string>), string mainDiagnosis = default(string), List<string> associatedDiagnosis = default(List<string>), List<Vital> varParameter = default(List<Vital>), string medicalHistory = default(string), string treatment = default(string), List<string> freetext = default(List<string>))
        {
            this.Procedure = procedure;
            this.MainDiagnosis = mainDiagnosis;
            this.AssociatedDiagnosis = associatedDiagnosis;
            this.Parameter = varParameter;
            this.MedicalHistory = medicalHistory;
            this.Treatment = treatment;
            this.Freetext = freetext;
        }

        /// <summary>
        /// Gets or Sets Procedure
        /// </summary>
        [DataMember(Name = "procedure", EmitDefaultValue = false)]
        public List<string> Procedure { get; set; }

        /// <summary>
        /// Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR.
        /// </summary>
        /// <value>Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR.</value>
        /*
        <example>example.json#/evaluation/mainDiagnosis</example>
        */
        [DataMember(Name = "mainDiagnosis", EmitDefaultValue = false)]
        public string MainDiagnosis { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedDiagnosis
        /// </summary>
        [DataMember(Name = "associatedDiagnosis", EmitDefaultValue = false)]
        public List<string> AssociatedDiagnosis { get; set; }

        /// <summary>
        /// Gets or Sets Parameter
        /// </summary>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public List<Vital> Parameter { get; set; }

        /// <summary>
        /// Précise les antécédents du patient
        /// </summary>
        /// <value>Précise les antécédents du patient</value>
        /*
        <example>example.json#/evaluation/medicalHistory</example>
        */
        [DataMember(Name = "medicalHistory", EmitDefaultValue = false)]
        public string MedicalHistory { get; set; }

        /// <summary>
        /// Précise le traitement du patient
        /// </summary>
        /// <value>Précise le traitement du patient</value>
        /*
        <example>example.json#/evaluation/treatment</example>
        */
        [DataMember(Name = "treatment", EmitDefaultValue = false)]
        public string Treatment { get; set; }

        /// <summary>
        /// Gets or Sets Freetext
        /// </summary>
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public List<string> Freetext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Evaluation {\n");
            sb.Append("  Procedure: ").Append(Procedure).Append("\n");
            sb.Append("  MainDiagnosis: ").Append(MainDiagnosis).Append("\n");
            sb.Append("  AssociatedDiagnosis: ").Append(AssociatedDiagnosis).Append("\n");
            sb.Append("  Parameter: ").Append(Parameter).Append("\n");
            sb.Append("  MedicalHistory: ").Append(MedicalHistory).Append("\n");
            sb.Append("  Treatment: ").Append(Treatment).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
