/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Interventionreport.Client.OpenAPIDateConverter;

namespace HubsanteModel/Interventionreport.Model
{
    /// <summary>
    /// Patient
    /// </summary>
    [DataContract(Name = "patient")]
    public partial class Patient : IValidatableObject
    {
        /// <summary>
        /// Sexe du patient, suivant le libellé court de la nomenclature SI-SAMU-NOMENC_SEXE
        /// </summary>
        /// <value>Sexe du patient, suivant le libellé court de la nomenclature SI-SAMU-NOMENC_SEXE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 3,

            /// <summary>
            /// Enum UN for value: UN
            /// </summary>
            [EnumMember(Value = "UN")]
            UN = 4
        }


        /// <summary>
        /// Sexe du patient, suivant le libellé court de la nomenclature SI-SAMU-NOMENC_SEXE
        /// </summary>
        /// <value>Sexe du patient, suivant le libellé court de la nomenclature SI-SAMU-NOMENC_SEXE</value>
        /*
        <example>example.json#/patient/sex</example>
        */
        [DataMember(Name = "sex", EmitDefaultValue = false)]
        public SexEnum? Sex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Patient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        /// <param name="patientId">Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01 (required).</param>
        /// <param name="birthName">Nom de naissance du patient.</param>
        /// <param name="lastName">Nom usuel du patient (required).</param>
        /// <param name="firstName">Prénom du patient (required).</param>
        /// <param name="birthDate">Date de naissance du patient.</param>
        /// <param name="age">La date de naissance n&#39;est pas tout le temps connu, cette donnée permet d&#39;indiquer un âge entier. .</param>
        /// <param name="sex">Sexe du patient, suivant le libellé court de la nomenclature SI-SAMU-NOMENC_SEXE.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="height">A valoriser avec le poids en kilogrammes.</param>
        /// <param name="weight">A valoriser avec la taille en centimètres du patient.</param>
        public Patient(string patientId = default(string), string birthName = default(string), string lastName = default(string), string firstName = default(string), string birthDate = default(string), string age = default(string), SexEnum? sex = default(SexEnum?), List<ExternalId> externalId = default(List<ExternalId>), int height = default(int), int weight = default(int))
        {
            // to ensure "patientId" is required (not null)
            if (patientId == null)
            {
                throw new ArgumentNullException("patientId is a required property for Patient and cannot be null");
            }
            this.PatientId = patientId;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for Patient and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for Patient and cannot be null");
            }
            this.FirstName = firstName;
            this.BirthName = birthName;
            this.BirthDate = birthDate;
            this.Age = age;
            this.Sex = sex;
            this.ExternalId = externalId;
            this.Height = height;
            this.Weight = weight;
        }

        /// <summary>
        /// Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01
        /// </summary>
        /// <value>Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01</value>
        /*
        <example>example.json#/patient/patientId</example>
        */
        [DataMember(Name = "patientId", IsRequired = true, EmitDefaultValue = true)]
        public string PatientId { get; set; }

        /// <summary>
        /// Nom de naissance du patient
        /// </summary>
        /// <value>Nom de naissance du patient</value>
        /*
        <example>example.json#/patient/birthName</example>
        */
        [DataMember(Name = "birthName", EmitDefaultValue = false)]
        public string BirthName { get; set; }

        /// <summary>
        /// Nom usuel du patient
        /// </summary>
        /// <value>Nom usuel du patient</value>
        /*
        <example>example.json#/patient/lastName</example>
        */
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Prénom du patient
        /// </summary>
        /// <value>Prénom du patient</value>
        /*
        <example>example.json#/patient/firstName</example>
        */
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Date de naissance du patient
        /// </summary>
        /// <value>Date de naissance du patient</value>
        /*
        <example>example.json#/patient/birthDate</example>
        */
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public string BirthDate { get; set; }

        /// <summary>
        /// La date de naissance n&#39;est pas tout le temps connu, cette donnée permet d&#39;indiquer un âge entier. 
        /// </summary>
        /// <value>La date de naissance n&#39;est pas tout le temps connu, cette donnée permet d&#39;indiquer un âge entier. </value>
        /*
        <example>example.json#/patient/age</example>
        */
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public string Age { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        public List<ExternalId> ExternalId { get; set; }

        /// <summary>
        /// A valoriser avec le poids en kilogrammes
        /// </summary>
        /// <value>A valoriser avec le poids en kilogrammes</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// A valoriser avec la taille en centimètres du patient
        /// </summary>
        /// <value>A valoriser avec la taille en centimètres du patient</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  BirthName: ").Append(BirthName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
