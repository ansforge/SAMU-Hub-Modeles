/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Interventionreport.Client.OpenAPIDateConverter;

namespace HubsanteModel/Interventionreport.Model
{
    /// <summary>
    /// InterventionReport
    /// </summary>
    [DataContract(Name = "interventionReport")]
    public partial class InterventionReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InterventionReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionReport" /> class.
        /// </summary>
        /// <param name="caseId">Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système. (required).</param>
        /// <param name="reportId">Identifiant du bilan du logiciel SMUR (required).</param>
        /// <param name="redactor">redactor (required).</param>
        /// <param name="creation">s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss (required).</param>
        /// <param name="patient">patient (required).</param>
        /// <param name="evaluation">evaluation.</param>
        public InterventionReport(string caseId = default(string), string reportId = default(string), Redactor redactor = default(Redactor), DateTime creation = default(DateTime), Patient patient = default(Patient), Evaluation evaluation = default(Evaluation))
        {
            // to ensure "caseId" is required (not null)
            if (caseId == null)
            {
                throw new ArgumentNullException("caseId is a required property for InterventionReport and cannot be null");
            }
            this.CaseId = caseId;
            // to ensure "reportId" is required (not null)
            if (reportId == null)
            {
                throw new ArgumentNullException("reportId is a required property for InterventionReport and cannot be null");
            }
            this.ReportId = reportId;
            // to ensure "redactor" is required (not null)
            if (redactor == null)
            {
                throw new ArgumentNullException("redactor is a required property for InterventionReport and cannot be null");
            }
            this.Redactor = redactor;
            this.Creation = creation;
            // to ensure "patient" is required (not null)
            if (patient == null)
            {
                throw new ArgumentNullException("patient is a required property for InterventionReport and cannot be null");
            }
            this.Patient = patient;
            this.Evaluation = evaluation;
        }

        /// <summary>
        /// Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.
        /// </summary>
        /// <value>Identifiant partagé du dossier, généré une seule fois par le système du partenaire qui recoit la primo-demande de secours (créateur du dossier).  Il est valorisé comme suit lors de sa création :  {pays}.{domaine}.{organisation}.{senderCaseId}  Il doit pouvoir être généré de façon décentralisée et ne présenter aucune ambiguïté.  Il doit être unique dans l&#39;ensemble des systèmes : le numéro de dossier fourni par celui qui génère l&#39;identifiant partagé doit donc être un numéro unique dans son système.</value>
        /*
        <example>example.json#/caseId</example>
        */
        [DataMember(Name = "caseId", IsRequired = true, EmitDefaultValue = true)]
        public string CaseId { get; set; }

        /// <summary>
        /// Identifiant du bilan du logiciel SMUR
        /// </summary>
        /// <value>Identifiant du bilan du logiciel SMUR</value>
        /*
        <example>example.json#/reportId</example>
        */
        [DataMember(Name = "reportId", IsRequired = true, EmitDefaultValue = true)]
        public string ReportId { get; set; }

        /// <summary>
        /// Gets or Sets Redactor
        /// </summary>
        [DataMember(Name = "redactor", IsRequired = true, EmitDefaultValue = true)]
        public Redactor Redactor { get; set; }

        /// <summary>
        /// s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss</value>
        [DataMember(Name = "creation", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Creation { get; set; }

        /// <summary>
        /// Gets or Sets Patient
        /// </summary>
        [DataMember(Name = "patient", IsRequired = true, EmitDefaultValue = true)]
        public Patient Patient { get; set; }

        /// <summary>
        /// Gets or Sets Evaluation
        /// </summary>
        [DataMember(Name = "evaluation", EmitDefaultValue = false)]
        public Evaluation Evaluation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterventionReport {\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  Redactor: ").Append(Redactor).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("  Evaluation: ").Append(Evaluation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CaseId != null) {
                // CaseId (string) pattern
                Regex regexCaseId = new Regex(@"^fr(\.[\w-]+){3,4}$", RegexOptions.CultureInvariant);
                if (!regexCaseId.Match(this.CaseId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CaseId, must match a pattern of " + regexCaseId, new [] { "CaseId" });
                }
            }

            if (this.Creation != null) {
                // Creation (DateTime) pattern
                Regex regexCreation = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexCreation.Match(this.Creation).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Creation, must match a pattern of " + regexCreation, new [] { "Creation" });
                }
            }

            yield break;
        }
    }

}
