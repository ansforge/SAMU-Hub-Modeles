/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Interventionreport.Client.OpenAPIDateConverter;

namespace HubsanteModel/Interventionreport.Model
{
    /// <summary>
    /// Vital
    /// </summary>
    [DataContract(Name = "vital")]
    public partial class Vital : IValidatableObject
    {
        /// <summary>
        /// Permet d&#39;indiquer le type de constante associé à la valeur envoyée
        /// </summary>
        /// <value>Permet d&#39;indiquer le type de constante associé à la valeur envoyée</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FREQUENCECARDIAQUE for value: FREQUENCE_CARDIAQUE
            /// </summary>
            [EnumMember(Value = "FREQUENCE_CARDIAQUE")]
            FREQUENCECARDIAQUE = 1,

            /// <summary>
            /// Enum PRESSIONARTERIELLE for value: PRESSION_ARTERIELLE
            /// </summary>
            [EnumMember(Value = "PRESSION_ARTERIELLE")]
            PRESSIONARTERIELLE = 2,

            /// <summary>
            /// Enum SATURATIONOXYGENE for value: SATURATION_OXYGENE
            /// </summary>
            [EnumMember(Value = "SATURATION_OXYGENE")]
            SATURATIONOXYGENE = 3,

            /// <summary>
            /// Enum FREQUENCERESPIRATOIRE for value: FREQUENCE_RESPIRATOIRE
            /// </summary>
            [EnumMember(Value = "FREQUENCE_RESPIRATOIRE")]
            FREQUENCERESPIRATOIRE = 4,

            /// <summary>
            /// Enum TEMPERATURE for value: TEMPERATURE
            /// </summary>
            [EnumMember(Value = "TEMPERATURE")]
            TEMPERATURE = 5,

            /// <summary>
            /// Enum HEMOGLOCOTEST for value: HEMOGLOCOTEST
            /// </summary>
            [EnumMember(Value = "HEMOGLOCOTEST")]
            HEMOGLOCOTEST = 6,

            /// <summary>
            /// Enum GLASGOW for value: GLASGOW
            /// </summary>
            [EnumMember(Value = "GLASGOW")]
            GLASGOW = 7
        }


        /// <summary>
        /// Permet d&#39;indiquer le type de constante associé à la valeur envoyée
        /// </summary>
        /// <value>Permet d&#39;indiquer le type de constante associé à la valeur envoyée</value>
        /*
        <example>example.json#/evaluation/parameter/0/type</example>
        */
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vital" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vital() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vital" /> class.
        /// </summary>
        /// <param name="type">Permet d&#39;indiquer le type de constante associé à la valeur envoyée (required).</param>
        /// <param name="value">Indique la valeur de la dernière constante prise (required).</param>
        /// <param name="precision">Permet d&#39;apporter des précisions sur la constante prise (ex. le débit d&#39;oxygène lors de la prise de constante de saturation en oxygène).</param>
        public Vital(TypeEnum type = default(TypeEnum), string value = default(string), string precision = default(string))
        {
            this.Type = type;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Vital and cannot be null");
            }
            this.Value = value;
            this.Precision = precision;
        }

        /// <summary>
        /// Indique la valeur de la dernière constante prise
        /// </summary>
        /// <value>Indique la valeur de la dernière constante prise</value>
        /*
        <example>example.json#/evaluation/parameter/0/value</example>
        */
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Permet d&#39;apporter des précisions sur la constante prise (ex. le débit d&#39;oxygène lors de la prise de constante de saturation en oxygène)
        /// </summary>
        /// <value>Permet d&#39;apporter des précisions sur la constante prise (ex. le débit d&#39;oxygène lors de la prise de constante de saturation en oxygène)</value>
        /*
        <example>example.json#/evaluation/parameter/0/precision</example>
        */
        [DataMember(Name = "precision", EmitDefaultValue = false)]
        public string Precision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vital {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
