/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Resources.info.Client.OpenAPIDateConverter;

namespace HubsanteModel/Resources.info.Model
{
    /// <summary>
    /// Team
    /// </summary>
    [DataContract(Name = "team")]
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec le  niveau de médicalisation du vecteur. Cf. nomenclature associée
        /// </summary>
        /// <value>A valoriser avec le  niveau de médicalisation du vecteur. Cf. nomenclature associée</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MedicalLevelEnum
        {
            /// <summary>
            /// Enum MED for value: MED
            /// </summary>
            [EnumMember(Value = "MED")]
            MED = 1,

            /// <summary>
            /// Enum PARAMED for value: PARAMED
            /// </summary>
            [EnumMember(Value = "PARAMED")]
            PARAMED = 2,

            /// <summary>
            /// Enum SECOURS for value: SECOURS
            /// </summary>
            [EnumMember(Value = "SECOURS")]
            SECOURS = 3,

            /// <summary>
            /// Enum SANS for value: SANS
            /// </summary>
            [EnumMember(Value = "SANS")]
            SANS = 4
        }


        /// <summary>
        /// A valoriser avec le  niveau de médicalisation du vecteur. Cf. nomenclature associée
        /// </summary>
        /// <value>A valoriser avec le  niveau de médicalisation du vecteur. Cf. nomenclature associée</value>
        /*
        <example>example.json#/resource/0/team/medicalLevel</example>
        */
        [DataMember(Name = "medicalLevel", EmitDefaultValue = false)]
        public MedicalLevelEnum? MedicalLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="medicalLevel">A valoriser avec le  niveau de médicalisation du vecteur. Cf. nomenclature associée.</param>
        /// <param name="name">A valoriser avec le nom de l&#39;équipe à bord du vecteur (celui communiqué par l&#39;organisation à laquelle l&#39;équipe appartient).</param>
        public Team(MedicalLevelEnum? medicalLevel = default(MedicalLevelEnum?), string name = default(string))
        {
            this.MedicalLevel = medicalLevel;
            this.Name = name;
        }

        /// <summary>
        /// A valoriser avec le nom de l&#39;équipe à bord du vecteur (celui communiqué par l&#39;organisation à laquelle l&#39;équipe appartient)
        /// </summary>
        /// <value>A valoriser avec le nom de l&#39;équipe à bord du vecteur (celui communiqué par l&#39;organisation à laquelle l&#39;équipe appartient)</value>
        /*
        <example>example.json#/resource/0/team/name</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  MedicalLevel: ").Append(MedicalLevel).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
