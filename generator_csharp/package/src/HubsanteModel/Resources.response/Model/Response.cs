/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Resources.response.Client.OpenAPIDateConverter;

namespace HubsanteModel/Resources.response.Model
{
    /// <summary>
    /// Response
    /// </summary>
    [DataContract(Name = "response")]
    public partial class Response : IValidatableObject
    {
        /// <summary>
        /// A valoriser avec la réponse apportée. Cf Nomenclature associée ACCEPTEE, REFUSEE, PARTIELLE, DIFFEREE
        /// </summary>
        /// <value>A valoriser avec la réponse apportée. Cf Nomenclature associée ACCEPTEE, REFUSEE, PARTIELLE, DIFFEREE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnswerEnum
        {
            /// <summary>
            /// Enum ACCEPTEE for value: ACCEPTEE
            /// </summary>
            [EnumMember(Value = "ACCEPTEE")]
            ACCEPTEE = 1,

            /// <summary>
            /// Enum PARTIELLE for value: PARTIELLE
            /// </summary>
            [EnumMember(Value = "PARTIELLE")]
            PARTIELLE = 2,

            /// <summary>
            /// Enum REFUSEE for value: REFUSEE
            /// </summary>
            [EnumMember(Value = "REFUSEE")]
            REFUSEE = 3,

            /// <summary>
            /// Enum DIFFEREE for value: DIFFEREE
            /// </summary>
            [EnumMember(Value = "DIFFEREE")]
            DIFFEREE = 4
        }


        /// <summary>
        /// A valoriser avec la réponse apportée. Cf Nomenclature associée ACCEPTEE, REFUSEE, PARTIELLE, DIFFEREE
        /// </summary>
        /// <value>A valoriser avec la réponse apportée. Cf Nomenclature associée ACCEPTEE, REFUSEE, PARTIELLE, DIFFEREE</value>
        /*
        <example>example.json#/response/answer</example>
        */
        [DataMember(Name = "answer", IsRequired = true, EmitDefaultValue = true)]
        public AnswerEnum Answer { get; set; }
        /// <summary>
        /// A valoriser avec le délai de réponse auquel s&#39;engage l&#39;expéditeur (cf. nomenclature)  Cas particulier : en cas de réponse \&quot;Partielle\&quot; car le délai souhaité ne peut pas être respecté,  à valoriser obligatoirement avec le délai de réponse maximum auquel s&#39;engage l&#39;expéditeur de la réponse, 
        /// </summary>
        /// <value>A valoriser avec le délai de réponse auquel s&#39;engage l&#39;expéditeur (cf. nomenclature)  Cas particulier : en cas de réponse \&quot;Partielle\&quot; car le délai souhaité ne peut pas être respecté,  à valoriser obligatoirement avec le délai de réponse maximum auquel s&#39;engage l&#39;expéditeur de la réponse, </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeadlineEnum
        {
            /// <summary>
            /// Enum DEL0 for value: DEL0
            /// </summary>
            [EnumMember(Value = "DEL0")]
            DEL0 = 1,

            /// <summary>
            /// Enum ASAP for value: ASAP
            /// </summary>
            [EnumMember(Value = "ASAP")]
            ASAP = 2,

            /// <summary>
            /// Enum _30M for value: 30M
            /// </summary>
            [EnumMember(Value = "30M")]
            _30M = 3,

            /// <summary>
            /// Enum _45M for value: 45M
            /// </summary>
            [EnumMember(Value = "45M")]
            _45M = 4,

            /// <summary>
            /// Enum _1H for value: 1H
            /// </summary>
            [EnumMember(Value = "1H")]
            _1H = 5,

            /// <summary>
            /// Enum _2H for value: 2H
            /// </summary>
            [EnumMember(Value = "2H")]
            _2H = 6,

            /// <summary>
            /// Enum _4H for value: 4H
            /// </summary>
            [EnumMember(Value = "4H")]
            _4H = 7,

            /// <summary>
            /// Enum _8H for value: 8H
            /// </summary>
            [EnumMember(Value = "8H")]
            _8H = 8,

            /// <summary>
            /// Enum _12H for value: 12H
            /// </summary>
            [EnumMember(Value = "12H")]
            _12H = 9,

            /// <summary>
            /// Enum _24H for value: 24H
            /// </summary>
            [EnumMember(Value = "24H")]
            _24H = 10,

            /// <summary>
            /// Enum RDV for value: RDV
            /// </summary>
            [EnumMember(Value = "RDV")]
            RDV = 11
        }


        /// <summary>
        /// A valoriser avec le délai de réponse auquel s&#39;engage l&#39;expéditeur (cf. nomenclature)  Cas particulier : en cas de réponse \&quot;Partielle\&quot; car le délai souhaité ne peut pas être respecté,  à valoriser obligatoirement avec le délai de réponse maximum auquel s&#39;engage l&#39;expéditeur de la réponse, 
        /// </summary>
        /// <value>A valoriser avec le délai de réponse auquel s&#39;engage l&#39;expéditeur (cf. nomenclature)  Cas particulier : en cas de réponse \&quot;Partielle\&quot; car le délai souhaité ne peut pas être respecté,  à valoriser obligatoirement avec le délai de réponse maximum auquel s&#39;engage l&#39;expéditeur de la réponse, </value>
        /*
        <example>example.json#/response/deadline</example>
        */
        [DataMember(Name = "deadline", EmitDefaultValue = false)]
        public DeadlineEnum? Deadline { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Response" /> class.
        /// </summary>
        /// <param name="datetime">Groupe date heure de début de la demande (required).</param>
        /// <param name="answer">A valoriser avec la réponse apportée. Cf Nomenclature associée ACCEPTEE, REFUSEE, PARTIELLE, DIFFEREE (required).</param>
        /// <param name="deadline">A valoriser avec le délai de réponse auquel s&#39;engage l&#39;expéditeur (cf. nomenclature)  Cas particulier : en cas de réponse \&quot;Partielle\&quot; car le délai souhaité ne peut pas être respecté,  à valoriser obligatoirement avec le délai de réponse maximum auquel s&#39;engage l&#39;expéditeur de la réponse, .</param>
        /// <param name="freetext">Commentaire libre permettant d&#39;apporter toutes précisions utiles à la réponse. Le motif de refus est notifié dans ce champ..</param>
        public Response(DateTime datetime = default(DateTime), AnswerEnum answer = default(AnswerEnum), DeadlineEnum? deadline = default(DeadlineEnum?), string freetext = default(string))
        {
            this.Datetime = datetime;
            this.Answer = answer;
            this.Deadline = deadline;
            this.Freetext = freetext;
        }

        /// <summary>
        /// Groupe date heure de début de la demande
        /// </summary>
        /// <value>Groupe date heure de début de la demande</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// Commentaire libre permettant d&#39;apporter toutes précisions utiles à la réponse. Le motif de refus est notifié dans ce champ.
        /// </summary>
        /// <value>Commentaire libre permettant d&#39;apporter toutes précisions utiles à la réponse. Le motif de refus est notifié dans ce champ.</value>
        /*
        <example>example.json#/response/freetext</example>
        */
        [DataMember(Name = "freetext", EmitDefaultValue = false)]
        public string Freetext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Response {\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Deadline: ").Append(Deadline).Append("\n");
            sb.Append("  Freetext: ").Append(Freetext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Datetime != null) {
                // Datetime (DateTime) pattern
                Regex regexDatetime = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDatetime.Match(this.Datetime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Datetime, must match a pattern of " + regexDatetime, new [] { "Datetime" });
                }
            }

            yield break;
        }
    }

}
