/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Regulation
    /// </summary>
    [DataContract(Name = "regulation")]
    public partial class Regulation : IValidatableObject
    {
        /// <summary>
        /// Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code de la nomenclature  SI-SAMU-NIVSOIN. Permet de déduire avec la donnée \&quot;niveau de médicalisation du transport\&quot;, si un UMHP est devenu un SMUR. 
        /// </summary>
        /// <value>Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code de la nomenclature  SI-SAMU-NIVSOIN. Permet de déduire avec la donnée \&quot;niveau de médicalisation du transport\&quot;, si un UMHP est devenu un SMUR. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MedicalLevelEnum
        {
            /// <summary>
            /// Enum MED for value: MED
            /// </summary>
            [EnumMember(Value = "MED")]
            MED = 1,

            /// <summary>
            /// Enum PARAMED for value: PARAMED
            /// </summary>
            [EnumMember(Value = "PARAMED")]
            PARAMED = 2,

            /// <summary>
            /// Enum SECOURS for value: SECOURS
            /// </summary>
            [EnumMember(Value = "SECOURS")]
            SECOURS = 3,

            /// <summary>
            /// Enum SANS for value: SANS
            /// </summary>
            [EnumMember(Value = "SANS")]
            SANS = 4
        }


        /// <summary>
        /// Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code de la nomenclature  SI-SAMU-NIVSOIN. Permet de déduire avec la donnée \&quot;niveau de médicalisation du transport\&quot;, si un UMHP est devenu un SMUR. 
        /// </summary>
        /// <value>Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code de la nomenclature  SI-SAMU-NIVSOIN. Permet de déduire avec la donnée \&quot;niveau de médicalisation du transport\&quot;, si un UMHP est devenu un SMUR. </value>
        /*
        <example>example.json#/regulation/medicalLevel</example>
        */
        [DataMember(Name = "medicalLevel", EmitDefaultValue = false)]
        public MedicalLevelEnum? MedicalLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Regulation" /> class.
        /// </summary>
        /// <param name="whatsHappen">whatsHappen.</param>
        /// <param name="healthMotive">healthMotive.</param>
        /// <param name="medicalLevel">Type d’équipe (médical, paramédicale, secouriste). A valoriser par un code de la nomenclature  SI-SAMU-NIVSOIN. Permet de déduire avec la donnée \&quot;niveau de médicalisation du transport\&quot;, si un UMHP est devenu un SMUR. .</param>
        public Regulation(WhatsHappen whatsHappen = default(WhatsHappen), HealthMotive healthMotive = default(HealthMotive), MedicalLevelEnum? medicalLevel = default(MedicalLevelEnum?))
        {
            this.WhatsHappen = whatsHappen;
            this.HealthMotive = healthMotive;
            this.MedicalLevel = medicalLevel;
        }

        /// <summary>
        /// Gets or Sets WhatsHappen
        /// </summary>
        [DataMember(Name = "whatsHappen", EmitDefaultValue = false)]
        public WhatsHappen WhatsHappen { get; set; }

        /// <summary>
        /// Gets or Sets HealthMotive
        /// </summary>
        [DataMember(Name = "healthMotive", EmitDefaultValue = false)]
        public HealthMotive HealthMotive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Regulation {\n");
            sb.Append("  WhatsHappen: ").Append(WhatsHappen).Append("\n");
            sb.Append("  HealthMotive: ").Append(HealthMotive).Append("\n");
            sb.Append("  MedicalLevel: ").Append(MedicalLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
