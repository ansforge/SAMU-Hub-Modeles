/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Patient
    /// </summary>
    [DataContract(Name = "patient")]
    public partial class Patient : IValidatableObject
    {
        /// <summary>
        /// Sexe du patient, suivant le libellé court de la nomenclature NOS-NOMENC_SEXE
        /// </summary>
        /// <value>Sexe du patient, suivant le libellé court de la nomenclature NOS-NOMENC_SEXE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 3,

            /// <summary>
            /// Enum UN for value: UN
            /// </summary>
            [EnumMember(Value = "UN")]
            UN = 4
        }


        /// <summary>
        /// Sexe du patient, suivant le libellé court de la nomenclature NOS-NOMENC_SEXE
        /// </summary>
        /// <value>Sexe du patient, suivant le libellé court de la nomenclature NOS-NOMENC_SEXE</value>
        /*
        <example>example.json#/patient/sex</example>
        */
        [DataMember(Name = "sex", EmitDefaultValue = false)]
        public SexEnum? Sex { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        /// <param name="patientId">Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01.</param>
        /// <param name="birthDate">Date de naissance du patient.</param>
        /// <param name="sex">Sexe du patient, suivant le libellé court de la nomenclature NOS-NOMENC_SEXE.</param>
        /// <param name="residentialAddress">residentialAddress.</param>
        public Patient(string patientId = default(string), string birthDate = default(string), SexEnum? sex = default(SexEnum?), ResidentialAddress residentialAddress = default(ResidentialAddress))
        {
            this.PatientId = patientId;
            this.BirthDate = birthDate;
            this.Sex = sex;
            this.ResidentialAddress = residentialAddress;
        }

        /// <summary>
        /// Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01
        /// </summary>
        /// <value>Identifiant unique du patient.  A valoriser par {ID du SAMU qui engage le SMUR}.{ID du DRM}.P{numéro d’ordre chronologique} : fr.health.samu690.DRFR15DDXAAJJJ00001.P01</value>
        /*
        <example>example.json#/patient/patientId</example>
        */
        [DataMember(Name = "patientId", EmitDefaultValue = false)]
        public string PatientId { get; set; }

        /// <summary>
        /// Date de naissance du patient
        /// </summary>
        /// <value>Date de naissance du patient</value>
        /*
        <example>example.json#/patient/birthDate</example>
        */
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public string BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name = "residentialAddress", EmitDefaultValue = false)]
        public ResidentialAddress ResidentialAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
