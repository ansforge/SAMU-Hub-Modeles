/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract(Name = "varEvent")]
    public partial class Event : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="orgId">Numéro du SAMU régulant la mission SMUR.  A valoriser par fr.health.samuXXX :  {pays}.{domaine}.{organisation} .</param>
        /// <param name="senderCaseId">Numéro du dossier SAMU à l’origine de la mission SMUR A valoriser par DRFR15DDXAAJJJ00000 :  - DR &#x3D; désignation d&#39;un dossier sous forme abrégée, - FR : désigne le pays (FR &#x3D; France), - 15 : désigne le fait que le dossier a été pris en charge par un SAMU / SAS, - DD : désigne le département où est situé le SAMU / SAS qui a traité le dossier, - X : lettre désignant le SAMU / SAS en cas de pluralité de SAMU / SAS sur le même département ou le troisième chiffre des DOM, - AA : année durant laquelle l’appel a été créé, - JJJ : désigne le jour de l&#39;année (de 1j à 365j),\\par - 00000 : numéro d’ordre chronologique du dossier dans la journée de référence ci-dessus..</param>
        /// <param name="creationDate">s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss.</param>
        /// <param name="decisionDate">s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss.</param>
        /// <param name="ressourceFinessLegal">FINESS juridique établissement rattachement SMUR.</param>
        /// <param name="ressourceFinessGeo">FINESS géographique établissement rattachement SMUR ou antenne SMUR.</param>
        /// <param name="ressourceStructure">9 &#x3D; Antenne SMUR, 0 &#x3D; SMUR général, 1 &#x3D; SMUR pédiatrique, 2 &#x3D; SMUR neonatal .</param>
        public Event(string orgId = default(string), string senderCaseId = default(string), DateTime creationDate = default(DateTime), DateTime decisionDate = default(DateTime), string ressourceFinessLegal = default(string), string ressourceFinessGeo = default(string), string ressourceStructure = default(string))
        {
            this.OrgId = orgId;
            this.SenderCaseId = senderCaseId;
            this.CreationDate = creationDate;
            this.DecisionDate = decisionDate;
            this.RessourceFinessLegal = ressourceFinessLegal;
            this.RessourceFinessGeo = ressourceFinessGeo;
            this.RessourceStructure = ressourceStructure;
        }

        /// <summary>
        /// Numéro du SAMU régulant la mission SMUR.  A valoriser par fr.health.samuXXX :  {pays}.{domaine}.{organisation} 
        /// </summary>
        /// <value>Numéro du SAMU régulant la mission SMUR.  A valoriser par fr.health.samuXXX :  {pays}.{domaine}.{organisation} </value>
        /*
        <example>example.json#/context/orgId</example>
        */
        [DataMember(Name = "orgId", EmitDefaultValue = false)]
        public string OrgId { get; set; }

        /// <summary>
        /// Numéro du dossier SAMU à l’origine de la mission SMUR A valoriser par DRFR15DDXAAJJJ00000 :  - DR &#x3D; désignation d&#39;un dossier sous forme abrégée, - FR : désigne le pays (FR &#x3D; France), - 15 : désigne le fait que le dossier a été pris en charge par un SAMU / SAS, - DD : désigne le département où est situé le SAMU / SAS qui a traité le dossier, - X : lettre désignant le SAMU / SAS en cas de pluralité de SAMU / SAS sur le même département ou le troisième chiffre des DOM, - AA : année durant laquelle l’appel a été créé, - JJJ : désigne le jour de l&#39;année (de 1j à 365j),\\par - 00000 : numéro d’ordre chronologique du dossier dans la journée de référence ci-dessus.
        /// </summary>
        /// <value>Numéro du dossier SAMU à l’origine de la mission SMUR A valoriser par DRFR15DDXAAJJJ00000 :  - DR &#x3D; désignation d&#39;un dossier sous forme abrégée, - FR : désigne le pays (FR &#x3D; France), - 15 : désigne le fait que le dossier a été pris en charge par un SAMU / SAS, - DD : désigne le département où est situé le SAMU / SAS qui a traité le dossier, - X : lettre désignant le SAMU / SAS en cas de pluralité de SAMU / SAS sur le même département ou le troisième chiffre des DOM, - AA : année durant laquelle l’appel a été créé, - JJJ : désigne le jour de l&#39;année (de 1j à 365j),\\par - 00000 : numéro d’ordre chronologique du dossier dans la journée de référence ci-dessus.</value>
        /*
        <example>example.json#/context/senderCaseId</example>
        */
        [DataMember(Name = "senderCaseId", EmitDefaultValue = false)]
        public string SenderCaseId { get; set; }

        /// <summary>
        /// s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>s&#39;exprime au format ISO 8601 YYY-MM-DDThh:mm:ss</value>
        [DataMember(Name = "decisionDate", EmitDefaultValue = false)]
        public DateTime DecisionDate { get; set; }

        /// <summary>
        /// FINESS juridique établissement rattachement SMUR
        /// </summary>
        /// <value>FINESS juridique établissement rattachement SMUR</value>
        /*
        <example>example.json#/context/ressourceFinessLegal</example>
        */
        [DataMember(Name = "ressourceFinessLegal", EmitDefaultValue = false)]
        public string RessourceFinessLegal { get; set; }

        /// <summary>
        /// FINESS géographique établissement rattachement SMUR ou antenne SMUR
        /// </summary>
        /// <value>FINESS géographique établissement rattachement SMUR ou antenne SMUR</value>
        /*
        <example>example.json#/context/ressourceFinessGeo</example>
        */
        [DataMember(Name = "ressourceFinessGeo", EmitDefaultValue = false)]
        public string RessourceFinessGeo { get; set; }

        /// <summary>
        /// 9 &#x3D; Antenne SMUR, 0 &#x3D; SMUR général, 1 &#x3D; SMUR pédiatrique, 2 &#x3D; SMUR neonatal 
        /// </summary>
        /// <value>9 &#x3D; Antenne SMUR, 0 &#x3D; SMUR général, 1 &#x3D; SMUR pédiatrique, 2 &#x3D; SMUR neonatal </value>
        /*
        <example>example.json#/context/ressourceStructure</example>
        */
        [DataMember(Name = "ressourceStructure", EmitDefaultValue = false)]
        public string RessourceStructure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  SenderCaseId: ").Append(SenderCaseId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DecisionDate: ").Append(DecisionDate).Append("\n");
            sb.Append("  RessourceFinessLegal: ").Append(RessourceFinessLegal).Append("\n");
            sb.Append("  RessourceFinessGeo: ").Append(RessourceFinessGeo).Append("\n");
            sb.Append("  RessourceStructure: ").Append(RessourceStructure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.OrgId != null) {
                // OrgId (string) pattern
                Regex regexOrgId = new Regex(@"^[a-z]{2,3}\.[a-z]+\.\w*$", RegexOptions.CultureInvariant);
                if (!regexOrgId.Match(this.OrgId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrgId, must match a pattern of " + regexOrgId, new [] { "OrgId" });
                }
            }

            if (this.CreationDate != null) {
                // CreationDate (DateTime) pattern
                Regex regexCreationDate = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexCreationDate.Match(this.CreationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreationDate, must match a pattern of " + regexCreationDate, new [] { "CreationDate" });
                }
            }

            if (this.DecisionDate != null) {
                // DecisionDate (DateTime) pattern
                Regex regexDecisionDate = new Regex(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", RegexOptions.CultureInvariant);
                if (!regexDecisionDate.Match(this.DecisionDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecisionDate, must match a pattern of " + regexDecisionDate, new [] { "DecisionDate" });
                }
            }

            yield break;
        }
    }

}
