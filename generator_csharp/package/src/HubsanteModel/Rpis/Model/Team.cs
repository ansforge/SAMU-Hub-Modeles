/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Team
    /// </summary>
    [DataContract(Name = "team")]
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Team() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="doctor">Permet d&#39;identifier si un médecin compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom du médecin est saisi sur la tablette.  (required).</param>
        /// <param name="nurse">Permet d&#39;identifier si un infirmier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;infirmier est saisi sur la tablette.  (required).</param>
        /// <param name="driver">Permet d&#39;identifier si un ambulancier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;ambulancier est saisi sur la tablette.  (required).</param>
        public Team(bool doctor = default(bool), bool nurse = default(bool), bool driver = default(bool))
        {
            this.Doctor = doctor;
            this.Nurse = nurse;
            this.Driver = driver;
        }

        /// <summary>
        /// Permet d&#39;identifier si un médecin compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom du médecin est saisi sur la tablette. 
        /// </summary>
        /// <value>Permet d&#39;identifier si un médecin compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom du médecin est saisi sur la tablette. </value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "doctor", IsRequired = true, EmitDefaultValue = true)]
        public bool Doctor { get; set; }

        /// <summary>
        /// Permet d&#39;identifier si un infirmier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;infirmier est saisi sur la tablette. 
        /// </summary>
        /// <value>Permet d&#39;identifier si un infirmier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;infirmier est saisi sur la tablette. </value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "nurse", IsRequired = true, EmitDefaultValue = true)]
        public bool Nurse { get; set; }

        /// <summary>
        /// Permet d&#39;identifier si un ambulancier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;ambulancier est saisi sur la tablette. 
        /// </summary>
        /// <value>Permet d&#39;identifier si un ambulancier compose l&#39;équipe. Cette donnée peut être automatiquement déduite, dès que le nom et prénom de l&#39;ambulancier est saisi sur la tablette. </value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "driver", IsRequired = true, EmitDefaultValue = true)]
        public bool Driver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Doctor: ").Append(Doctor).Append("\n");
            sb.Append("  Nurse: ").Append(Nurse).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
