/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Intervention
    /// </summary>
    [DataContract(Name = "intervention")]
    public partial class Intervention : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Intervention" /> class.
        /// </summary>
        /// <param name="location">location.</param>
        /// <param name="team">team.</param>
        /// <param name="smurStatus">smurStatus.</param>
        /// <param name="procedure">procedure.</param>
        /// <param name="mainDiagnosis">Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR(à venir)..</param>
        /// <param name="associatedDiagnosis">Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR (à venir)..</param>
        public Intervention(Location location = default(Location), Team team = default(Team), ResourceStatus smurStatus = default(ResourceStatus), List<string> procedure = default(List<string>), string mainDiagnosis = default(string), string associatedDiagnosis = default(string))
        {
            this.Location = location;
            this.Team = team;
            this.SmurStatus = smurStatus;
            this.Procedure = procedure;
            this.MainDiagnosis = mainDiagnosis;
            this.AssociatedDiagnosis = associatedDiagnosis;
        }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public Team Team { get; set; }

        /// <summary>
        /// Gets or Sets SmurStatus
        /// </summary>
        [DataMember(Name = "smurStatus", EmitDefaultValue = false)]
        public ResourceStatus SmurStatus { get; set; }

        /// <summary>
        /// Gets or Sets Procedure
        /// </summary>
        [DataMember(Name = "procedure", EmitDefaultValue = false)]
        public List<string> Procedure { get; set; }

        /// <summary>
        /// Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR(à venir).
        /// </summary>
        /// <value>Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR(à venir).</value>
        /*
        <example>example.json#/intervention/mainDiagnosis</example>
        */
        [DataMember(Name = "mainDiagnosis", EmitDefaultValue = false)]
        public string MainDiagnosis { get; set; }

        /// <summary>
        /// Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR (à venir).
        /// </summary>
        /// <value>Thésaurus SFMU-FEDORU. A valoriser par un code de la nomenclature Diagnostic SMUR (à venir).</value>
        /*
        <example>example.json#/intervention/associatedDiagnosis</example>
        */
        [DataMember(Name = "associatedDiagnosis", EmitDefaultValue = false)]
        public string AssociatedDiagnosis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Intervention {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  SmurStatus: ").Append(SmurStatus).Append("\n");
            sb.Append("  Procedure: ").Append(Procedure).Append("\n");
            sb.Append("  MainDiagnosis: ").Append(MainDiagnosis).Append("\n");
            sb.Append("  AssociatedDiagnosis: ").Append(AssociatedDiagnosis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
