/*
 * OpenAPI
 *
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubsanteModel/Rpis.Client.OpenAPIDateConverter;

namespace HubsanteModel/Rpis.Model
{
    /// <summary>
    /// Orientation
    /// </summary>
    [DataContract(Name = "orientation")]
    public partial class Orientation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Orientation" /> class.
        /// </summary>
        /// <param name="type">Indique si le patient est transporté ou non (Sans transport associé / avec transport associé).  A valoriser par un code de la nomenclature SI SAMU-NOMENC_DEVENIR_PAT. Si le type d&#39;orientation est sans transport associé, les objets Destination et Transport sont facultatifs. .</param>
        /// <param name="destination">destination.</param>
        /// <param name="decision">decision.</param>
        public Orientation(string type = default(string), Destination destination = default(Destination), Decision decision = default(Decision))
        {
            this.Type = type;
            this.Destination = destination;
            this.Decision = decision;
        }

        /// <summary>
        /// Indique si le patient est transporté ou non (Sans transport associé / avec transport associé).  A valoriser par un code de la nomenclature SI SAMU-NOMENC_DEVENIR_PAT. Si le type d&#39;orientation est sans transport associé, les objets Destination et Transport sont facultatifs. 
        /// </summary>
        /// <value>Indique si le patient est transporté ou non (Sans transport associé / avec transport associé).  A valoriser par un code de la nomenclature SI SAMU-NOMENC_DEVENIR_PAT. Si le type d&#39;orientation est sans transport associé, les objets Destination et Transport sont facultatifs. </value>
        /*
        <example>example.json#/orientation/type</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public Destination Destination { get; set; }

        /// <summary>
        /// Gets or Sets Decision
        /// </summary>
        [DataMember(Name = "decision", EmitDefaultValue = false)]
        public Decision Decision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Orientation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
