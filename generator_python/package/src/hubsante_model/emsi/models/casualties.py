# coding: utf-8

"""
    OpenAPI

    OpenAPI

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Casualties(BaseModel):
    """
    Casualties
    """ # noqa: E501
    context: StrictStr = Field(description="Le champ doit être renseigné mais peut ne pas être interprété", alias="CONTEXT")
    datime: Optional[str] = Field(default=None, description="Optionnel", alias="DATIME")
    decont: Optional[StrictInt] = Field(default=None, description="Optionnel", alias="DECONT")
    triagered: Optional[StrictInt] = Field(default=None, description="Optionnel, Triage victime au sens EMSI", alias="TRIAGERED")
    triageyellow: Optional[StrictInt] = Field(default=None, description="Optionnel", alias="TRIAGEYELLOW")
    triagegreen: Optional[StrictInt] = Field(default=None, description="Optionnel", alias="TRIAGEGREEN")
    triageblack: Optional[StrictInt] = Field(default=None, description="Optionnel", alias="TRIAGEBLACK")
    missing: Optional[StrictInt] = Field(default=None, description="Optionnel", alias="MISSING")
    __properties: ClassVar[List[str]] = ["CONTEXT", "DATIME", "DECONT", "TRIAGERED", "TRIAGEYELLOW", "TRIAGEGREEN", "TRIAGEBLACK", "MISSING"]

    @field_validator('datime')
    def datime_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Casualties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Casualties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CONTEXT": obj.get("CONTEXT"),
            "DATIME": obj.get("DATIME"),
            "DECONT": obj.get("DECONT"),
            "TRIAGERED": obj.get("TRIAGERED"),
            "TRIAGEYELLOW": obj.get("TRIAGEYELLOW"),
            "TRIAGEGREEN": obj.get("TRIAGEGREEN"),
            "TRIAGEBLACK": obj.get("TRIAGEBLACK"),
            "MISSING": obj.get("MISSING")
        })
        return _obj


