# coding: utf-8

"""
    OpenAPI

    OpenAPI

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from hubsante_model.emsi.models.position import Position
from typing import Optional, Set
from typing_extensions import Self

class Egeo(BaseModel):
    """
    Egeo
    """ # noqa: E501
    datime: Optional[str] = Field(default=None, description="Optionnel La localisation de l'affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l'intervention est systématiquement reprécisé dans un objet MISSION", alias="DATIME")
    type: Optional[StrictStr] = Field(default=None, description="Optionnel La localisation de l'affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l'intervention est systématiquement reprécisé dans un objet MISSION. A constituer depuis ref_mapping_EMSI_EVENT_EGEO_TYPE_NEXSIS_ /!\\ plusieurs champs NEXSIS /!\\ plusieurs valeurs par champs d'où un groupe<EGEO> à créer par type différents", alias="TYPE")
    weather: Optional[List[StrictStr]] = Field(default=None, alias="WEATHER")
    freetext: Optional[StrictStr] = Field(default=None, description="Optionnel La localisation de l'affaire est transmise en amont dans un message RC-EDA et le lieu souhaité pour l'intervention est systématiquement reprécisé dans un objet MISSION", alias="FREETEXT")
    position: Optional[Position] = Field(default=None, alias="POSITION")
    __properties: ClassVar[List[str]] = ["DATIME", "TYPE", "WEATHER", "FREETEXT", "POSITION"]

    @field_validator('datime')
    def datime_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AIR', 'CMB', 'DGR', 'FLAME', 'GEN', 'PLUME', 'SMOKE', 'VULN', 'AIR/COR', 'AIR/FLDZ', 'AIR/LZ', 'AIR/NOFLZN', 'AIR/PZ', 'AIR/UAVASP', 'CMB/CZ', 'CMB/DNGR', 'CMB/EXTZN', 'CMB/IMPTPT', 'DGR/BIO', 'DGR/BOMB', 'DGR/CBRNHZ', 'DGR/CBRNRSD', 'DGR/CHM', 'DGR/HZD', 'DGR/MIND', 'DGR/NGA', 'DGR/NGACIV', 'DGR/NUKCNL', 'DGR/OBSGEN', 'DGR/PRHBAR', 'DGR/RAD', 'DGR/RADCLD', 'DGR/RSTR', 'DGR/SGA', 'DGR/SITKIL', 'DGR/UNXOD', 'GEN/AOR', 'GEN/ASYGEN', 'GEN/ASYSPL', 'GEN/BDYOR', 'GEN/BDYPOA', 'GEN/BDYPT', 'GEN/CKPGEN', 'GEN/CNTPTL', 'GEN/COLDZ', 'GEN/COMCKP', 'GEN/COMLOW', 'GEN/COMMZ', 'GEN/COMUP', 'GEN/CONTAR', 'GEN/CORDON', 'GEN/CRDPNT', 'GEN/DIVRT', 'GEN/DROPPT', 'GEN/ENTPT', 'GEN/EVENT', 'GEN/EXITPT', 'GEN/FWCTPT', 'GEN/HOTZ', 'GEN/INCGRD', 'GEN/LA', 'GEN/LIMARE', 'GEN/LOCAT', 'GEN/MSR', 'GEN/PSSGPT', 'GEN/PTINT', 'GEN/RCNSAR', 'GEN/RNDZPT', 'GEN/ROUTE', 'GEN/SAFERT', 'GEN/SAFZ', 'GEN/SARPNT', 'GEN/SEARAR', 'GEN/SPRISK', 'GEN/STRTPT', 'GEN/SUPARE', 'GEN/SUPPT', 'GEN/TRSTRT', 'GEN/WARMZ']):
            raise ValueError("must be one of enum values ('AIR', 'CMB', 'DGR', 'FLAME', 'GEN', 'PLUME', 'SMOKE', 'VULN', 'AIR/COR', 'AIR/FLDZ', 'AIR/LZ', 'AIR/NOFLZN', 'AIR/PZ', 'AIR/UAVASP', 'CMB/CZ', 'CMB/DNGR', 'CMB/EXTZN', 'CMB/IMPTPT', 'DGR/BIO', 'DGR/BOMB', 'DGR/CBRNHZ', 'DGR/CBRNRSD', 'DGR/CHM', 'DGR/HZD', 'DGR/MIND', 'DGR/NGA', 'DGR/NGACIV', 'DGR/NUKCNL', 'DGR/OBSGEN', 'DGR/PRHBAR', 'DGR/RAD', 'DGR/RADCLD', 'DGR/RSTR', 'DGR/SGA', 'DGR/SITKIL', 'DGR/UNXOD', 'GEN/AOR', 'GEN/ASYGEN', 'GEN/ASYSPL', 'GEN/BDYOR', 'GEN/BDYPOA', 'GEN/BDYPT', 'GEN/CKPGEN', 'GEN/CNTPTL', 'GEN/COLDZ', 'GEN/COMCKP', 'GEN/COMLOW', 'GEN/COMMZ', 'GEN/COMUP', 'GEN/CONTAR', 'GEN/CORDON', 'GEN/CRDPNT', 'GEN/DIVRT', 'GEN/DROPPT', 'GEN/ENTPT', 'GEN/EVENT', 'GEN/EXITPT', 'GEN/FWCTPT', 'GEN/HOTZ', 'GEN/INCGRD', 'GEN/LA', 'GEN/LIMARE', 'GEN/LOCAT', 'GEN/MSR', 'GEN/PSSGPT', 'GEN/PTINT', 'GEN/RCNSAR', 'GEN/RNDZPT', 'GEN/ROUTE', 'GEN/SAFERT', 'GEN/SAFZ', 'GEN/SARPNT', 'GEN/SEARAR', 'GEN/SPRISK', 'GEN/STRTPT', 'GEN/SUPARE', 'GEN/SUPPT', 'GEN/TRSTRT', 'GEN/WARMZ')")
        return value

    @field_validator('weather')
    def weather_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HUM', 'ICY', 'TDS', 'TMP', 'VIS', 'WDS', 'WIN', 'HUM/CORECT', 'HUM/DRZLE', 'HUM/FOG', 'HUM/RAIN', 'HUM/RAINSR', 'HUM/THSTRN', 'ICY/BLWSNW', 'ICY/CLRICE', 'ICY/CORECT', 'ICY/FDRZLE', 'ICY/FRAIN', 'ICY/FRZFOG', 'ICY/HAIL', 'ICY/ICECRY', 'ICY/ICEPLT', 'ICY/MIXICE', 'ICY/RIMICE', 'ICY/SLEET', 'ICY/SNOW', 'ICY/SNWGRN', 'ICY/SNWSHR', 'TDS/CORECT', 'TDS/LGTNNG', 'TDS/THST', 'VIS/CORECT', 'VIS/HAZE', 'VIS/SMOKE', 'WIN/CORECT', 'WIN/CYCL', 'WIN/DSTDVL', 'WIN/DSTSND', 'WIN/DSTSTR', 'WIN/FNLCLD', 'WIN/HURR', 'WIN/SNDSTR', 'WIN/STORM', 'WIN/TORN', 'WIN/TRST', 'WIN/TYPH', 'WIN/WHIR', 'WIN/WTRSPT']):
                raise ValueError("each list item must be one of ('HUM', 'ICY', 'TDS', 'TMP', 'VIS', 'WDS', 'WIN', 'HUM/CORECT', 'HUM/DRZLE', 'HUM/FOG', 'HUM/RAIN', 'HUM/RAINSR', 'HUM/THSTRN', 'ICY/BLWSNW', 'ICY/CLRICE', 'ICY/CORECT', 'ICY/FDRZLE', 'ICY/FRAIN', 'ICY/FRZFOG', 'ICY/HAIL', 'ICY/ICECRY', 'ICY/ICEPLT', 'ICY/MIXICE', 'ICY/RIMICE', 'ICY/SLEET', 'ICY/SNOW', 'ICY/SNWGRN', 'ICY/SNWSHR', 'TDS/CORECT', 'TDS/LGTNNG', 'TDS/THST', 'VIS/CORECT', 'VIS/HAZE', 'VIS/SMOKE', 'WIN/CORECT', 'WIN/CYCL', 'WIN/DSTDVL', 'WIN/DSTSND', 'WIN/DSTSTR', 'WIN/FNLCLD', 'WIN/HURR', 'WIN/SNDSTR', 'WIN/STORM', 'WIN/TORN', 'WIN/TRST', 'WIN/TYPH', 'WIN/WHIR', 'WIN/WTRSPT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Egeo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['POSITION'] = self.position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Egeo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DATIME": obj.get("DATIME"),
            "TYPE": obj.get("TYPE"),
            "WEATHER": obj.get("WEATHER"),
            "FREETEXT": obj.get("FREETEXT"),
            "POSITION": Position.from_dict(obj["POSITION"]) if obj.get("POSITION") is not None else None
        })
        return _obj


